<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">CC technical blog</title>
  <id>urn:uuid:cc6bc3c1-d0ad-365f-b7a6-1fcd73488c56</id>
  <updated>2020-03-05T00:00:00Z</updated>
  <link href="http://opensource.creativecommons.org/" />
  <link href="http://opensource.creativecommons.org/blog/feed.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/ajdavis/lektor-atom" version="0.3">Lektor Atom Plugin</generator>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2020-03-05-involucrate-gsoc-outreachy-es/">
    <title type="text">Involúcrate con nuestra comunidad de código abierto a través del  Google Summer of Code y Outreachy</title>
    <id>urn:uuid:e28cf21f-757a-32de-a7b0-5c02f0083c21</id>
    <updated>2020-03-05T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2020-03-05-involucrate-gsoc-outreachy-es/" />
    <author>
      <name>hugosolar</name>
    </author>
    <content type="html">&lt;p&gt;En Creative Commons creemos firmemente en que el código abierto es una gran herramienta para fomentar y desarrollar productos con un enfoque comunitario y, a su vez, la consolidación de una comunidad activa de contribuyentes al  patrimonio común (o, en inglés, &lt;em&gt;Commons&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Con el fin de fomentar la participación de estudiantes en nuestros proyectos de código abierto, CC es parte de los programas que ofrece Google  (&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt;) y también &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;. En ambos casos, el objetivo es involucrar a estudiantes en el código abierto. Para ello, hacemos un llamado abierto a todos y todas quienes tengan interés en colaborar con nuestro equipo, de postular a los llamados cuanto antes.&lt;/p&gt;
&lt;h4 id=&quot;google-summer-of-code&quot;&gt;Google Summer of Code&lt;/h4&gt;&lt;p&gt;Programa impulsado por Google el cual existe desde el año 2005 el cual ha impulsado a mas de 15.000 estudiantes de mas de 118 paises a involucrarse con diversas organizaciones que abogan por el código abierto.&lt;/p&gt;
&lt;h4 id=&quot;outreachy&quot;&gt;Outreachy&lt;/h4&gt;&lt;p&gt;Este programa impulsa pasantías de personas en organizaciones que trabajan con código abierto. El foco de Outreachy está puesto en comunidades que poseen poca representatividad, que sufren prejuicios sistémicos o discriminación en el area de las tecnologias.&lt;/p&gt;
&lt;p&gt;Las pasantías consisten en el desarrollo de un proyecto el cual debe ser llevado a cabo en un periodo de 3 meses. Este proceso se complementa con una mentoría recibida por el estudiante la cual ayuda a guiar el desarrollo y buen término del mismo.&lt;/p&gt;
&lt;p&gt;En las versiones pasadas de estos programas tuvimos excelentes resultados llevados a cabo por excelentes personas que pusieron toda su dedicación para concretar estos proyectos:&lt;/p&gt;
&lt;h2 id=&quot;gsoc-2019&quot;&gt;GSoC 2019&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;Wordpress Plugin&lt;/a&gt; por Ahmad Bilal&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;CC Search Browser extension&lt;/a&gt; por Mayank Nader&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/vue-vocabulary&quot;&gt;CC Vocabulary&lt;/a&gt; por Dhruv Bhanushali&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;Revamping the CC Chooser&lt;/a&gt; por Ari Madian&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;CC Catalog Data Visualization&lt;/a&gt; por Maria Belen Guaranda&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;outreachy-2019-2020&quot;&gt;Outreachy 2019-2020&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;Improve License Chooser&lt;/a&gt; por Olga Bulat&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/creativecommons/vue-vocabulary&quot;&gt;Extend the scope and/or use of CC Vocabulary&lt;/a&gt; por Chidiebere Onyegbuchulem&lt;/li&gt;
&lt;li&gt;Revamp CC's Platform Toolkit guide por Ana Paula Rocha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta manera hemos decidido participar de las siguientes rondas de ambos programas, los cuales se encuentran en la fase de “contribución a la comunidad”, por lo tanto, aún estás a tiempo de leer documentación al respecto, tanto de los programas como de la participación en los proyectos de nuestra organización&lt;/p&gt;
&lt;h3 id=&quot;gsoc&quot;&gt;GSoC&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;Organizaciones participantes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/&quot;&gt;Como funciona&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://google.github.io/gsocguides/student/&quot;&gt;Guía de estudiante&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;outreachy&quot;&gt;Outreachy&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/apply/project-selection/&quot;&gt;Organizaciones / proyectos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/apply/&quot;&gt;Como funciona&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.outreachy.org/docs/internship/&quot;&gt;Guia de estudiante&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cc-open-source&quot;&gt;CC Open Source&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/internships/intern-guide/&quot;&gt;Guia del postulante&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/contributing-code/projects/&quot;&gt;Listado de proyectos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/contributing-code/&quot;&gt;Lineamientos para contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;beneficios&quot;&gt;Beneficios&lt;/h2&gt;&lt;p&gt;Estos programas proveen múltiples beneficios a quienes deseen participar de ellos, por un lado, las organizaciones participantes trabajan en proyectos de código abierto utilizados en todo el mundo y en diversas aplicaciones, convirtiéndose en una oportunidad única de contribuir a proyectos de gran escala que además cuentan con comunidades globales transformando además esta pasantía en una experiencia enriquecedora.&lt;/p&gt;
&lt;p&gt;Por otro lado, técnicamente hablando, también comprende un gran desafío, ya que existe la posibilidad de enfrentarse a la resolución de un problema del mundo real, sin embargo, el hecho de poder enfrentarlo con una mentoría exclusiva provee un gran número de herramientas para el desarrollo y concreción del proyecto, los cuales, sin duda, seran de gran ayuda para el futuro desarrollo de la vida profesional de quien participe.&lt;/p&gt;
&lt;p&gt;Además, estos programas consideran un estipendio por los 3 meses que dura la pasantía. Valores que son variables según la ubicación que quien desea postular.&lt;/p&gt;
&lt;h2 id=&quot;destrezas&quot;&gt;Destrezas&lt;/h2&gt;&lt;p&gt;Con respecto al idioma, para participar en estos programas no se exige un manejo del inglés al 100%, solo basta que puedas comunicarte de manera razonable, ya que, si bien, existen algunos proyectos en los cuales yo soy el mentor ( &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#wp-plugin&quot;&gt;WP Plugin&lt;/a&gt; e &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#vocabulary-integration&quot;&gt;Implementar Vocabulary&lt;/a&gt; ) y podemos tener reuniones en español, la comunicación pública y la documentación debe ser en Inglés.&lt;/p&gt;
&lt;p&gt;Con respecto a nuestros proyectos, todos se encuentran en &lt;a href=&quot;https://github.com/creativecommons&quot;&gt;Github&lt;/a&gt; por lo tanto debes saber lo básico de &lt;a href=&quot;https://rogerdudler.github.io/git-guide/index.es.html&quot;&gt;Git&lt;/a&gt;. Te recomiendo consultar la &lt;a href=&quot;https://help.github.com/es&quot;&gt;ayuda de Github&lt;/a&gt; para mayor detalle, sugiero poner atención a la guia sobre como realizar &lt;a href=&quot;https://help.github.com/es/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;Pull Request&lt;/a&gt; ya que es muy necesario para el flujo de trabajo del equipo tecnico de CC y lo será también para tu pasantía.&lt;/p&gt;
&lt;h2 id=&quot;invitacin&quot;&gt;Invitación&lt;/h2&gt;&lt;p&gt;Desde yá los dejamos invitados a participar en estos programas o a participar directamente en nuestra &lt;a href=&quot;https://opensource.creativecommons.org/&quot;&gt;comunidad de código abierto&lt;/a&gt; o visitar nuestro &lt;a href=&quot;https://github.com/creativecommons&quot;&gt;Github&lt;/a&gt;, el cual contiene nuestros proyectos. También pueden unirse a nuestra comunidad global en &lt;a href=&quot;https://slack-signup.creativecommons.org/&quot;&gt;Slack&lt;/a&gt; donde me pueden encontrar como @hugo si tienen alguna duda o comentario.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2020-03-05-participe-gsoc/">
    <title type="text">Participe do Google Summer of Code / Outreachy</title>
    <id>urn:uuid:e5616ac8-3b6a-3afa-85f5-eddcd822577e</id>
    <updated>2020-03-05T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2020-03-05-participe-gsoc/" />
    <author>
      <name>brenoferreira</name>
    </author>
    <content type="html">&lt;p&gt;O Google Summer of Code (GSoC) é uma iniciativa global do Google com o objetivo de incentivar a participação de estudantes com interesse em tecnologia a contribuírem com projetos de software de código aberto. Programa que existe desde 2005, que incentivou mais de 15.000 estudantes de mais de 118 países a se envolverem com várias organizações que defendem o código aberto.&lt;/p&gt;
&lt;p&gt;O Outreachy promove estágios para pessoas em organizações que trabalham com código aberto. O foco da participação no programa está nas comunidades com pouca representação, viés sistêmico ou discriminação na área de tecnologia.&lt;/p&gt;
&lt;p&gt;Os estudantes trabalham com uma organização responsável por algum projeto e durante um período de estágio de 3 meses, e estarão sob tutoria de um(a) mentor(a) que será responsável por ajudar o estudante e guiá-lo(a) a encontrar a melhor maneira de concluir o projeto.&lt;/p&gt;
&lt;p&gt;Em 2020 a Creative Commons está novamente participando do GSoC e Outreachy, e estagiários participando conosco terão a oportunidade de trabalhar em projetos relacionados à cultura de acesso livre de impacto global, dentre eles o nosso principal produto de tecnologia, o CC Search, que é um site de busca de conteúdo livre licenciados com as licenças da CC ou sob domínio público.&lt;/p&gt;
&lt;p&gt;A Creative Commons é uma organização não governamental sem fins lucrativos que criou licenças que permitem a cópia e compartilhamento com menos restrições que o tradicional todos direitos reservados (copyright), as chamadas &lt;a href=&quot;https://creativecommons.org/licenses/?lang=pt_BR&quot;&gt;Licenças Creative Commons&lt;/a&gt;, como CC-BY, CC-BY-SA, etc..&lt;/p&gt;
&lt;p&gt;Muitas das organizações que participam do programa do Google e Outreachy trabalham em projetos de código livre utilizados globalmente em diversas aplicações. É uma oportunidade única de contribuir com um projeto que gera um impacto positivo na comunidade internacional de tecnologia. Além disso, os estudantes terão um mentor exclusivo para ajudar no desenvolvimento do projeto. Não é um daqueles estágios onde os estudantes ficam desamparados nos momentos de dificuldade.&lt;/p&gt;
&lt;p&gt;O estágio é remunerado naturalmente. Os valores pagos aos estagiários pelo Google variam com a localização onde o estudante mora e mais informações podem ser encontradas no &lt;a href=&quot;https://developers.google.com/open-source/gsoc/help/student-stipends&quot;&gt;site do programa&lt;/a&gt;. No caso do Outreachy, os valores estão também na &lt;a href=&quot;https://www.outreachy.org&quot;&gt;página do programa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Caso voce se interesse em participar do GSoC ou Outreachy esse ano, seguem algumas dicas que poderão te ajudar no seu processo de aplicação e submissão de projeto:&lt;/p&gt;
&lt;p&gt;Leia o conteúdo disponível online sobre como o programa funciona. &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works] e [Outreachy](https://www.outreachy.org/docs/applicant/&quot;&gt;Google Summer of Code&lt;/a&gt;. Assim voce irá poder entender a proposta do programa, sua estrutura e tirar suas dúvidas; &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/&quot;&gt;nossa lista de projetos&lt;/a&gt; que estamos sugerindo esse ano para os estudantes trabalhar e ver qual projeto está melhor alinhado com seus interesses e habilidades; e &lt;a href=&quot;https://opensource.creativecommons.org/internships/applicant-guide/&quot;&gt;nosso guia para candidatos&lt;/a&gt; para entender o passo a passo de como nós iremos trabalhar com candidatos e estudantes selecionados para participar do programa. Esse conteúdo está todo em inglês.&lt;/p&gt;
&lt;p&gt;Sobre inglês, para ser selecionado para trabalhar conosco, é necessário que voce consiga se comunicar razoavelmente bem em inglês. A Creative Commons é uma organização internacional e voce precisará se comunicar com pessoas da organização e da comunidade que não falam português. Eu, Breno Ferreira, autor desse post, falo portugues então caso voce se interesse pelo &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/#cc-search-accessibility&quot;&gt;projeto que serei responsável&lt;/a&gt;, eu poderei me comunicar em privado em portugues, mas toda comunicação dos estudantes em canais públicos deverá ser em inglês. Voce não precisa ser 100% fluente, mas precisa conseguir entender e se fazer entender no idioma.&lt;/p&gt;
&lt;p&gt;O GSoC é um programa focado em contribuições de código, afinal, chama-se Google Summer of Code. Então, voce precisa ter alguns conhecimentos básicos de algumas ferramentas para uma boa participação no programa.&lt;/p&gt;
&lt;p&gt;Voce precisará saber usar Git e Github. Todos os projetos da Creative Commons estão no Github e o conhecimento básico dessas ferramentas é fundamental. A &lt;a href=&quot;https://help.github.com/pt&quot;&gt;documentação do Github&lt;/a&gt; pode ajudar, principalmente a parte sobre &lt;a href=&quot;https://help.github.com/pt/github/collaborating-with-issues-and-pull-requests/about-pull-requests&quot;&gt;como funcionam os Pull Requests&lt;/a&gt; pois é um recurso bem particular do Github e é normal algumas pessoas não saberem utilizar esse recurso muito importante.&lt;/p&gt;
&lt;p&gt;Na nossa página de &lt;a href=&quot;https://opensource.creativecommons.org/internships/project-ideas/all/&quot;&gt;ideias de projetos&lt;/a&gt; os projetos listam as habilidades recomendadas para quem se interessar (listado em &lt;em&gt;Skills recommended&lt;/em&gt;). Verifique se essas habilidades se alinham com as suas.&lt;/p&gt;
&lt;p&gt;Nessa fase inicial, o ideal é voce começar a fazer algumas contribuições nos projetos que te interessam. Por exemplo, se voce se interessou pelo projeto de Acessibilidade e Internacionalização do CC Search, o repositório no Github relacionado é &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend&quot;&gt;https://github.com/creativecommons/cccatalog-frontend&lt;/a&gt;. De uma olhada na &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues&quot;&gt;lista de issues&lt;/a&gt; que estão marcadas com os labels &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;&quot;Good First Issue&quot;&lt;/a&gt; e &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot;&gt;&quot;Help Wanted&quot;&lt;/a&gt;. Essas são as tarefas que nós consideramos as melhores para quem quer começar a contribuir para o projeto. Os nossos principais repositórios tem todos issues marcadas com esses labels. É muito importante também ler a documentação do projeto. Leia o arquivo README no repositório. Nossos projetos também possuem um arquivo CONTRIBUTING.md que contém o código de conduta para quem for contribuir com o projeto, e também um guia sobre como contribuir com aquele projeto em específico. Além disso, é interessante também voce &lt;a href=&quot;https://opensource.creativecommons.org/community/&quot;&gt;participar da comunidade&lt;/a&gt;. Entre no nosso Slack e participe dos canais abertos. As pessoas estão lá interagindo, postando comentarios e tirando dúvidas conosco e outros membros em um ambiente respeitoso e cordial.&lt;/p&gt;
&lt;p&gt;Durante o periodo de submissão de projetos voce irá escrever sua proposta de projeto. É bastante importante que voce compartilhe o rascunho da sua proposta o mais cedo possível conosco para que possamos dar feedback e lhe dizer o que precisa ser melhorado. Se voce só compartilhar sua proposta no final do período de submissão, não teremos a oportunidade de dizer o que está bom e ruim e voce não poderá fazer nenhuma melhoria. Então recomendamos que voce compartilhe seus rascunhos com os mentores cedo e frequentemente.&lt;/p&gt;
&lt;p&gt;Espero que essas dicas lhe ajudem. Caso voce não seja selecionado(a), o GSoC é um programa anual, e ano que vem acontece novamente. E no segundo semestre participaremos também do programa Outreachy, que acontece duas vezes por ano. Caso voce acabe sendo selecionado(a), será um prazer trabalhar com voce durante esses meses.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-4/">
    <title type="text">CC Platform Toolkit Revamp - 4</title>
    <id>urn:uuid:99b50998-4560-3b3f-80bd-b03b892c84ab</id>
    <updated>2020-03-04T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-4/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Phew, how is it possible that we're already in March? Between my last check-in and today, there was a lot of work and effort into revamping the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were two rounds of user interviews: the first one was done looking only at the wireframe, focusing exclusively on usability and content. This provided a lot of important feedback to adjust the structure and move forward with the UI.  I tried my best to apply the design standards already mapped out by the &lt;a href=&quot;https://github.com/creativecommons/vocabulary/&quot;&gt;Vocabulary&lt;/a&gt; project, so that in the future this wouldn't stand out from other CC materials.&lt;/p&gt;
&lt;p&gt;The second round of user interviews was done with a UI prototype, and was meant to take away some of my doubts regarding a few choices in this project. For instance, would it be best for the user to have the information in a single page, or would that be too much, and best to split in separate pages? There were pros and cons to both scenarios, but in the end we decided to stick with the single-page format because of a particular behavior: one of the ways users search for content is to ctrl+F and look for keywords. That would be drastically less effective with multiple pages.&lt;/p&gt;
&lt;p&gt;After all the feedback (and adjustments) were done, it was time to make things come to life. I built the page from scratch with HTML/CSS/JS, making use of the Vocabulary library - it should be live soon, so yay!&lt;/p&gt;
&lt;p&gt;The last three months have been incredible and this was a wonderful opportunity to tackle a project from start to finish. I feel very grateful for all the time and dedication my mentors put into this project, they guided me every step of the way and made sure I was supported throughout the internship. I plan on staying involved in the CC community, so hopefully soon I will have more to contribute.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week5-8/">
    <title type="text">CC Vocabulary - Weeks 5-8</title>
    <id>urn:uuid:b30bf3b1-be65-3f4d-a3c5-5ac5c7c9f626</id>
    <updated>2020-02-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-week5-8/" />
    <author>
      <name>conye</name>
    </author>
    <content type="html">&lt;p&gt;A lot of time and effort have been put in to re-work Vocabulary since my last post and the changes are still ongoing. To understand why these changes are important, we have to better understand Vocabulary.&lt;/p&gt;
&lt;h2 id=&quot;so-why-all-the-changes?&quot;&gt;So Why All The Changes?&lt;/h2&gt;&lt;p&gt;Vocabulary is CC's new design system. This means its design is meant to affect all of CC's websites, applications, and platforms. It is designed to be independent of any language or framework. Its styling will be used by its subsets like Vue-Vocabulary to maintain consistency. The majority of CC's websites and platforms are built with Wordpress, Lektor, and Vue. This means Vue-Vocabulary will inherit its styling from Vocabulary and the same will follow for other subsets of Vocabulary for Wordpress and Lektor which would possibly be developed soon.&lt;/p&gt;
&lt;h2 id=&quot;the-major-change&quot;&gt;The Major Change&lt;/h2&gt;&lt;p&gt;Vocabulary currently uses stylus to easily write the CSS and Webpack as a build system. Stylus will be changed to SASS (actually SCSS). This is because SASS is easier to maintain and the majority of CC's websites are already built with SASS.&lt;/p&gt;
&lt;h2 id=&quot;my-contributions-in-the-past-four-weeks&quot;&gt;My Contributions in the past four weeks&lt;/h2&gt;&lt;p&gt;In the past four weeks, I have been contributing majorly to the re-work of Vocabulary. Some of my contributions include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding vendor prefixes to compiled CSS using autoprefixer&lt;/li&gt;
&lt;li&gt;Updating build script for output CSS token to include CSS custom properties format&lt;/li&gt;
&lt;li&gt;Restyling some components as specified in the new design&lt;/li&gt;
&lt;li&gt;Minifying and cleaning SVGs with SVGOMG&lt;/li&gt;
&lt;li&gt;Removing some components and features not required in the new design&lt;/li&gt;
&lt;li&gt;Fixing broken links&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There has also been a lot of learning for me too. For example, I have been learning better how Webpack and Docker are used in this project.&lt;/p&gt;
&lt;p&gt;Yeah, I said I would share more in two weeks from my last post but it turned out in four weeks but I will try to make in two weeks for my next post.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-coding/">
    <title type="text">Improving CC License Chooser: Coding</title>
    <id>urn:uuid:bda5e013-2b29-3207-8041-cff3bfab0c22</id>
    <updated>2020-01-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-coding/" />
    <author>
      <name>obulat</name>
    </author>
    <content type="html">&lt;p&gt;During the last several weeks I have been busy with coding the redesigned version of the License Chooser.&lt;/p&gt;
&lt;p&gt;When I just started working on coding the License Chooser, it wouldn't compile due to some dependency problems. This became a great opportunity to update the project from a Webpack based Vue.js template to a Vue-cli project, which makes managing dependencies much simpler. I also updated the project to a newer version of Creative Commons Vue Vocabulary for styling.&lt;/p&gt;
&lt;p&gt;For the visual styles, we use Buefy component library (based on Bulma and Vue.js), namely, stepper and tabs components. It has been an interesting journey customizing them to our specific use cases.&lt;/p&gt;
&lt;p&gt;While coding the site, I also tried to extract all the text to a separate file so that it would be easier to integrate it into translation workflow later during my internship.&lt;/p&gt;
&lt;p&gt;After several weeks of work, 2 large PRs merged, we are finally ready to conduct usability tests to better understand how users interact with the License Chooser, and what changes we still need to implement to make it easy both for beginners and for advanced users of Creative Commons Licenses to choose the best license for their needs, and help to use the chosen license.&lt;/p&gt;
&lt;p&gt;A new &lt;a href=&quot;https://chooser-beta.creativecommons.org/&quot;&gt;beta version of the License Chooser&lt;/a&gt; is deployed!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/apache-airflow-testing-with-pytest/">
    <title type="text">Apache Airflow testing with Pytest</title>
    <id>urn:uuid:c59eaf57-778e-3d75-8929-537949d119fd</id>
    <updated>2020-01-23T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/apache-airflow-testing-with-pytest/" />
    <author>
      <name>mathemancer</name>
    </author>
    <content type="html">&lt;p&gt;CC Catalog is a project that gathers information about images from around the
internet, and stores the information so that these images can eventually be
indexed in &lt;a href=&quot;https://ccsearch.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt;. A portion of the process is directed by
&lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;, which is a tool commonly used to organize workflows
and data pipelines.&lt;/p&gt;
&lt;p&gt;The nature of Airflow leads to some particular challenges when it comes to
testing, and special care must be taken to make tests independent from the
global state of the system where they are run.  This blog post will describe a
few of the challenges we faced when writing tests for Airflow jobs, and some
tricks we used to solve those challenges.&lt;/p&gt;
&lt;h2 id=&quot;brief-description-of-apache-airflow&quot;&gt;Brief description of Apache Airflow&lt;/h2&gt;&lt;p&gt;Apache Airflow is an open source piece of software that loads Directed Acyclic
Graphs (DAGs) defined via python files.  The DAG is what defines a given
workflow.  The nodes are pieces of jobs that need to be accomplished, and the
directed edges of the graph define dependencies between the various pieces.  By
default, the Airflow daemon only looks for DAGs to load from a global location
in the user's home folder: &lt;code&gt;~/airflow/dags/&lt;/code&gt;. When a DAG is 'run', i.e., the
tasks defined by the nodes of the DAG are each performed in the order defined by
the directed edges of the DAG, the Airflow daemon stores information about the
dag run in &lt;code&gt;~/airflow/&lt;/code&gt;.  The daemon also stores general information about what
DAGs exist on the system, and all of their current statuses in that directory.
For more details, please see &lt;a href=&quot;https://airflow.apache.org/docs/stable/&quot;&gt;the documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;challenge:-localize-airflow-to-the-project-directory&quot;&gt;Challenge:  Localize Airflow to the project directory&lt;/h2&gt;&lt;p&gt;Even when installed using &lt;code&gt;pip&lt;/code&gt; within a &lt;a href=&quot;https://github.com/pypa/virtualenv&quot;&gt;&lt;code&gt;virtualenv&lt;/code&gt;&lt;/a&gt; environment,
all airflow commands will be run against the default locations in the user's
home directory. In particular, if you want to test a DAG from your project
directory, the method given in the &lt;a href=&quot;https://airflow.apache.org/docs/stable/tutorial.html#testing&quot;&gt;Airflow documentation&lt;/a&gt; is to
copy the dag into the default location &lt;code&gt;~/airflow/dags/&lt;/code&gt;, and use the
command-line &lt;code&gt;airflow&lt;/code&gt; tool to run the tasks defined by the nodes.  The
information about success and failure of the tests will be stored by the Airflow
daemon in the &lt;code&gt;~/airflow/&lt;/code&gt; directory.  We'd rather keep all input and output
from our tests to the project directory instead.  This helps avoid any side
effects which might arise by running tests for different projects, and also
ensures that tests can't affect anything in the default directory, which may be
used for production in many cases.&lt;/p&gt;
&lt;p&gt;The solution is to choose a directory in your project, and set the environment
variable &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; whenever you run the tests, or use the &lt;code&gt;airflow&lt;/code&gt;
command on the project DAGs. I recommend you add the command&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;export AIRFLOW_HOME=/your/desired/full/path/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to a script (ours is called &lt;code&gt;env.sh&lt;/code&gt;) that will be run in any shell dealing with
the 'localized' Airflow instance, because forgetting to set the variable for
even one &lt;code&gt;airflow&lt;/code&gt; command will corrupt the DAG states stored in the global
area. Note that setting this variable is necessary even when running in a
&lt;code&gt;virtualenv&lt;/code&gt; environment.&lt;/p&gt;
&lt;p&gt;Now that you have &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; set, you'll likely want to load some DAGs that
you've written.  This is made easier if you put the files defining them into a
&lt;code&gt;dags&lt;/code&gt; directory in the directory denoted by &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt;.  I.e., it's wise
to structure the project sub-directory dealing with Airflow and Airflow DAGs
similarly to the default location, but in your project directory.  At this
point, you should have some &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; directory as a subdirectory of your
project directory, and then some &lt;code&gt;$AIRFLOW_HOME/dags&lt;/code&gt; directory, where you keep
any python files defining Airflow DAGs, and their dependencies.  Another
advantage of this structure is it's likely the directory structure you'll use in
production, and replicating simplifies deployment.&lt;/p&gt;
&lt;p&gt;Finally, Airflow will leave a number of files in the &lt;code&gt;$AIRFLOW_HOME&lt;/code&gt; directory
which you are not likely to want to track in source control (e.g., &lt;code&gt;git&lt;/code&gt;).
These files are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/airflow.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/airflow.db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/logs/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$AIRFLOW_HOME/unittests.cfg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add these files to &lt;code&gt;.gitignore&lt;/code&gt; or the equivalent.&lt;/p&gt;
&lt;h2 id=&quot;smoketesting:-can-the-airflow-daemon-load-the-dags?&quot;&gt;Smoketesting:  Can the Airflow daemon load the DAGs?&lt;/h2&gt;&lt;p&gt;Note that we're using &lt;code&gt;pytest&lt;/code&gt; for our unit testing, and so most examples assume
this.&lt;/p&gt;
&lt;p&gt;The most basic test you'll want is to determine whether your DAGs can load
without errors. To do this, you can use the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;from airflow.models import DagBag

def test_dags_load_with_no_errors():
    dag_bag = DagBag(include_examples=False)
    dag_bag.process_file(&amp;#39;common_api_workflows.py&amp;#39;)
    assert len(dag_bag.import_errors) == 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We initialize a &lt;code&gt;DagBag&lt;/code&gt; (this loads DAG files). With the &lt;code&gt;process_file&lt;/code&gt; method,
we instruct the Airflow daemon to attempt to load any DAGs defined in the
&lt;code&gt;common_api_workflows.py&lt;/code&gt; file.  We then check to make sure loading the DAGs
didn't produce any errors.&lt;/p&gt;
&lt;h2 id=&quot;hint:-use-functions-to-create-dags.&quot;&gt;Hint: Use functions to create DAGs.&lt;/h2&gt;&lt;p&gt;This will increase testability. You can test the function, bypassing the need to
load the DAG into the &lt;code&gt;DagBag&lt;/code&gt; (except when you're actually testing that it
&lt;em&gt;can&lt;/em&gt; be loaded). This may seem obvious, but none of the Airflow documentation
uses this pattern. Here is an example of a function that creates a simple dag,
and a test of the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;from airflow import DAG
from airflow.operators.bash_operator import BashOperator

def create_dag(
        source,
        script_location,
        dag_id,
        crontab_str=None,
        default_args=DAG_DEFAULT_ARGS):

    dag = DAG(
        dag_id=dag_id,
        default_args=default_args,
        schedule_interval=crontab_str,
        catchup=False
    )

    with dag:
        start_task = BashOperator(
            task_id=&amp;#39;{}_{}&amp;#39;.format(source, status),
            bash_command=&amp;#39;echo Starting {} workflow&amp;#39;.format(status),
            dag=dag
        )

        run_task =  BashOperator(
            task_id=&amp;#39;get_{}_images&amp;#39;.format(source),
            bash_command=&amp;#39;python {} --mode default&amp;#39;.format(script_location),
            dag=dag
        )

        start_task &amp;gt;&amp;gt; run_task

    return dag

def test_create_dag_creates_correct_dependencies():
    dag = create_dag(
        &amp;#39;test_source&amp;#39;,
        &amp;#39;test_script_location&amp;#39;,
        &amp;#39;test_dag_id&amp;#39;
    )
    start_id = &amp;#39;test_source_starting&amp;#39;
    run_id = &amp;#39;get_test_source_images&amp;#39;
    start_task = dag.get_task(start_id)
    assert start_task.upstream_task_ids == set()
    assert start_task.downstream_task_ids == set([run_id])
    run_task = dag.get_task(run_id)
    assert run_task.upstream_task_ids == set([start_id])
    assert run_task.downstream_task_ids == set([])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we assume that &lt;code&gt;DAG_DEFAULT_ARGS&lt;/code&gt; is defined earlier in the file.  See the
Airflow documentation for details about default DAG arguments. Now, this
function is testable (great!) but it doesn't acutally make the DAG it creates
known to the Airflow daemon. To do that, we have to create the created dag into
the global scope of the module defined by the file, which can be done with the
following snippet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;globals()[dag_id] = create_dag(
    source,
    script_location,
    dag_id
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, it's assumed that &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;script_location&lt;/code&gt;, and &lt;code&gt;dag_id&lt;/code&gt; are defined
earlier in the python file.&lt;/p&gt;
&lt;p&gt;We hope that these hints are helpful to the reader.  For more, and for the
context around the snippets shown here, please take a look at
&lt;a href=&quot;https://github.com/creativecommons/cccatalog/tree/c4b80600eb5695cc294e1791ba90bdc3a408b7b9/src/cc_catalog_airflow&quot;&gt;the repo&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-3/">
    <title type="text">CC Platform Toolkit Revamp - 3</title>
    <id>urn:uuid:297bf32e-1761-3ec6-967a-4cb76007305c</id>
    <updated>2020-01-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-3/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Last time I checked-in, I was working on revisiting the current &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt; and making a first draft suggesting changes in both content and structure.&lt;/p&gt;
&lt;p&gt;It was a lot of work, but I'm finally happy with the wire-frame that came out after all the research and experimentation. The original material went through quite a few modifications, with text rewrites and changes in the order and organization of the content. But now comes the important part: making sure that these changes make sense to the users. My vision is already a little skewed, since I've been immersed in this project for the past 7 weeks. From now on, the process of validating this material needs fresh eyes. That way, improvements can be made based on user feedback, and reflect the best possible version when it the time comes to implement.&lt;/p&gt;
&lt;p&gt;For the next two weeks my schedule is focusing on two different activities: I'll be going over a round of user interviews where I intend to show my wireframe and present a few tasks. The idea is to see how both content and usability perform in this new format. In parallel, I've also began taking these wire-framed components and sketching them out in a more refined UI format by experimenting with color, type, and so on. I really wanted to get an early start on this task—even if it's subject to change as the research gives me further insights—because I feel making the visual part come together will be the hardest part for me.&lt;/p&gt;
&lt;p&gt;Thankfully, I have very supportive mentors and help all-around from the CC staff and community. I'm really happy with how this project is coming together and I hope in two weeks I can come back here and report on great progress!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-my-first-four-weeks/">
    <title type="text">CC Vocabulary - My First Four Weeks</title>
    <id>urn:uuid:f0b37b2b-043a-3606-b848-2299619bb41c</id>
    <updated>2020-01-14T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-my-first-four-weeks/" />
    <author>
      <name>conye</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://cc-vocabulary.netlify.com/&quot;&gt;Vocabulary&lt;/a&gt; is Creative Commons's web design system; an extension of 
&lt;a href=&quot;https://creativecommons.org/wp-content/uploads/2019/10/Creative-Commons-Style-Guide-2019.pdf&quot;&gt;CC Style Guide&lt;/a&gt; 
for the web. This project was originally started by my mentors &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/dhruvkb&quot;&gt;Dhruv Bhanushali&lt;/a&gt; 
and &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/hugosolar&quot;&gt;Hugo Solar&lt;/a&gt; to unify all of CC websites and applications. 
Vocabulary has been undergoing a lot of changes lately. As part of my Outreachy internship, 
I will be contributing to extending its scope and usage.&lt;/p&gt;
&lt;h2 id=&quot;my-progress-so-far...&quot;&gt;My Progress so far...&lt;/h2&gt;&lt;p&gt;Before my first contribution, Vocabulary comprised of reusable UI components built with Vue.js and a live styleguide built with Styleguidist. 
My first task was to create an interactive playground experience with Storybook which would eventually replace that built with Styleguidist. 
Storybook was chosen for obvious reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It provides a workbench environment for your components in isolation where you can play around with, customize and test as you develop.&lt;/li&gt;
&lt;li&gt;It provides Storybook Docs to generate design system documentation, customize, and share best practices with your team. 
Styleguidist majorly creates a UI documentation site that can be done better with Storybook Docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My first three weeks were more of struggling and learning. Coming from a React background, I had to reconfigure my brain to understand Vue 
and Vue storybook. I did a lot of reading of documentation and articles, testing locally and asking for help when stuck. I eventually completed 
the task and created a pull request. A live version of the interactive playground can be seen 
&lt;a href=&quot;https://cc-vue-vocabulary.netlify.com/storybook/?path=/story/vocabulary-welcome--welcome&quot;&gt;here&lt;/a&gt;. 
Please feel free to play around with it and give a feedback.&lt;/p&gt;
&lt;p&gt;The following week, I worked on updating some Vue Vocabulary components with the CC Vocabulary design library.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next...&quot;&gt;What's Next...&lt;/h2&gt;&lt;p&gt;This week, I will be working on extending the usage of vocabulary to other CC websites that are not built with Vue. 
What I worked on previously was &lt;a href=&quot;https://cc-vue-vocabulary.netlify.com/&quot;&gt;Vue-Vocabulary&lt;/a&gt; for CC websites and 
platforms that support Vue. The goal is to use the already developed stylesheets in Vocabulary to build the 
same functional components with vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;Well, all said, the past weeks have been great. I will be sharing more in two weeks.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-weeks-1-2-design/">
    <title type="text">Improving CC License Chooser Weeks 1-2: Design</title>
    <id>urn:uuid:24a0bec2-ab5d-3990-9d96-1c8d52fe24f1</id>
    <updated>2020-01-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-cc-license-chooser-weeks-1-2-design/" />
    <author>
      <name>obulat</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons License Chooser has been helping creators to choose the most appropriate license for their work for a long time. As anything on the web, it needs updating. One of my mentors, &lt;a href=&quot;https://opensource.creativecommons.org/blog/authors/akmadian/&quot;&gt;Ari Madian&lt;/a&gt;, has created the new version of this chooser as part of his 2019 GSoC Project. As a 2019-2020 Outreachy intern, I will be working on making it production-ready. The goals of my internship include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improving usability of the Chooser and making it easier for licensors to understand the process of selecting the most appropriate license.&lt;/li&gt;
&lt;li&gt;Setting up and automating internalization.&lt;/li&gt;
&lt;li&gt;Extracting License Chooser as a standalone npm package to make integrating Creative Commons licensing in other websites easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the first two weeks of my internship I mainly worked on redesigning the license selection process based on the usability testing feedback. We decided to set up license selection as a step-by-step process of answering yes/no questions guiding a novice or somewhat experienced user to the CC license that best suits their needs.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;here-is-the-first-draft:&quot;&gt;&lt;strong&gt;Here is the first draft:&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-1.png&quot; alt=&quot;draft-1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Features of this draft that stayed in current version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A card to show the information about currently selected license is prominent on the page.&lt;/li&gt;
&lt;li&gt;Four yes/no questions that help narrow the license choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What was changed in final version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The openness scale (which is drawn incorrectly, by the way) took up too much space on the first screen, not adding as much to the process.&lt;/li&gt;
&lt;li&gt;Toggles as an answer to yes/no questions are confusing for some users.&lt;/li&gt;
&lt;li&gt;Separate Personalization step was moved together with other steps.&lt;/li&gt;
&lt;li&gt;License attribution information was merged with the selected license card, because the card is supposed to contain all the information about selected license, including author/work url/ source url, if they are available.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;draft-2&quot;&gt;&lt;strong&gt;Draft 2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;As a result of continuous communication with my mentors, I this draft to be discussed at our weekly meeting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-2.png&quot; alt=&quot;draft-2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Features that stayed in the current version:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two cards: one for the step-by-step process and the other for presenting license information.&lt;/li&gt;
&lt;li&gt;All the information about selected license in the second card.&lt;/li&gt;
&lt;li&gt;Personalization step as the last and optional step of choosing the license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Features that were suggested during the meeting:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License selection dropdown with all available licenses on the selected license card. This is for experienced users who know what license they want to choose and only need to add details, or copy the attribution text or html.&lt;/li&gt;
&lt;li&gt;A link to a page with more information on how to use the license when sharing on the selected license card: for users who need help with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;currently-final-draft-:&quot;&gt;&lt;strong&gt;Currently Final Draft :)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/blog/entries/improving-cc-license-chooser-weeks-1-2-design/draft-3.png&quot; alt=&quot;draft-3.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;license-chooser-stepper-card&quot;&gt;&lt;strong&gt;License Chooser Stepper Card&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Stepper Card shows five steps to selecting a license, one for each feature of CC licenses and an optional personalization step. The stepper icons show current selection status: selected/unselected features and current feature being displayed. Clicking on an icon opens the corresponding step.&lt;/li&gt;
&lt;li&gt;Each license feature has a yes/no question. A user clicks on a yes or no button to answer, and can immediately see what changed in the license, and the text beneath the buttons shows what current selection of the feature actually means. Default answer for each step besides the first one (attribution - 'BY') is 'no', so if a user simply clicks 'next' on each step, or clicks on the last step icon at the top, they get CC BY 4.0 license.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;selected-license-card&quot;&gt;&lt;strong&gt;Selected License Card&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Current selection dropdown is for experienced users who can quickly select a license that they know they want to use. It also updates when a feature in the license selection process is changed.&lt;/li&gt;
&lt;li&gt;Selected license information displays information about the license and its clauses, as well as its icons. The wording of this part will probably change the most after discussion with the community and legal team.&lt;/li&gt;
&lt;li&gt;Attribution information for the license, with a choice between rich text or html code. These are displayed in tabs to save on space. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I created the wireframes in Figma, and I tried to integrate CC Vocabulary elements as much as possible.&lt;/p&gt;
&lt;p&gt;Next steps for my project will include coding to update the license chooser Vue.js project, and iterating over the design based on community feedback.&lt;/p&gt;
&lt;p&gt;You can follow my work at &lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;https://github.com/creativecommons/cc-chooser&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-2/">
    <title type="text">CC Platform Toolkit Revamp - 2</title>
    <id>urn:uuid:dba4dc6a-e8b6-3f06-9b03-2d58dd440755</id>
    <updated>2020-01-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp-2/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;Time is really flying! I can hardly believe this is already week 5 as of my internship with CC (I'm part of the Outreachy program for the 2019-2020 round). I've been having a wonderful time working on this project (I'm helping revamp the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt;) and I'm excited to report on what's been going on for the past couple of weeks.&lt;/p&gt;
&lt;p&gt;Since the holidays got a bit in the way of user testing existing platform implementations, my mentors and I slightly altered the schedule. These past weeks have been dedicated to reworking the content that is currently online (revisiting writing and format) and suggesting an entirely new structure. I've been documenting that process &lt;a href=&quot;https://drive.google.com/open?id=1g7_76zFmgtqq7khb_aBS-l2Wx8tScMgR1NPBO0vOdkM&quot;&gt;here&lt;/a&gt; as I tackle each section.&lt;/p&gt;
&lt;p&gt;What I really loved about this process is the fact that I'm able to see the platform toolkit through a holistic lens: I'm thinking about how the user is currently interacting with this content, how the information could be made more palatable, how that can be achieved visually, and finally, how to do it in a way that won't be impossible to implement.&lt;/p&gt;
&lt;p&gt;I'm excited about the questions and answers that have been coming up during this process. Even though I'm far from delivering a final version, I believe this first rough draft already brings important improvements. My focus has been on diminishing cognitive load. That means taking very dense content and delivering the same amount of information with an approach that steps away from full copy and comes closer to a UI format. I've been learning a lot with each step of this project and I'm eager to make a positive contribution by the end of the internship. Soon enough I'll be checking in again soon to give a new follow up!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/freesound-intro/">
    <title type="text">An Introduction to Freesound</title>
    <id>urn:uuid:9d8021b4-7645-3213-a8ff-ced7633a4488</id>
    <updated>2019-12-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/freesound-intro/" />
    <author>
      <name>ffont</name>
    </author>
    <content type="html">&lt;h3 id=&quot;about-freesound&quot;&gt;About Freesound&lt;/h3&gt;&lt;p&gt;To the best of our knowledge, &lt;a href=&quot;https://freesound.org&quot;&gt;Freesound&lt;/a&gt; is the biggest website for sharing Creative Commons audio clips in the &lt;em&gt;observable universe&lt;/em&gt;. It was started in 2005 as a research effort of the &lt;a href=&quot;https://www.upf.edu/web/mtg/&quot;&gt;Music Technology Group&lt;/a&gt; in &lt;a href=&quot;https://upf.edu&quot;&gt;Universitat Pompeu Fabra&lt;/a&gt;, Barcelona. The initial goal was to gather a collection of audio clips that could be shared among researchers to carry out computational analysis of sounds and learn about them. Creative Commons licenses had been introduced to the world only a couple of years before, and it seemed a perfect fit for the goals of the Freesound platform. Currently Freesound hosts more than &lt;strong&gt;430k audio clips&lt;/strong&gt; uploaded by more than &lt;strong&gt;20k contributors&lt;/strong&gt;. Freesound sounds have been &lt;strong&gt;downloaded more than 145M times&lt;/strong&gt; by &lt;strong&gt;9M users&lt;/strong&gt; all over the world. It contains all sorts of sounds, from field recordings to music instrument samples, foley, speech and music loops; but not &lt;em&gt;songs&lt;/em&gt; in the traditional sense of &lt;em&gt;finished music compositions&lt;/em&gt;. The aim of Freesound is to provide audio &lt;em&gt;building blocks&lt;/em&gt; to be transformed and combined into other sounds, and reused elsewhere. Here are some nice examples of the variety of sounds to be found in Freesound:&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/264287/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/261328/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/392090/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/447776/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/161478/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;

  &lt;iframe frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://freesound.org/embed/sound/iframe/416984/simple/full_size/&quot; style=&quot;width:800px;height:245px;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;Freesound has been featured in the Creative Commons blog several times in the past: &lt;a href=&quot;https://creativecommons.org/2005/04/12/overinspaincreatinganonlinecollaborativedatabaseofsounds/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2005/10/01/freesound/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2006/07/08/freesoundviaccmixter20kfreesounds/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2007/01/17/freesound-sample-in-children-of-men/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2008/03/13/freesound-20/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/2008/09/29/freesoundorg/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/2011/09/12/celebrating-freesound-2-0-retiring-sampling-licenses/&quot;&gt;here&lt;/a&gt;. Also you'll find plenty of information about Freesound, statistics and the like in the &lt;a href=&quot;https://blog.freesound.org&quot;&gt;Freesound Blog&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;freesound_logo.png&quot; width=1000px/&gt;&lt;/p&gt;&lt;h3 id=&quot;the-freesound-api&quot;&gt;The Freesound API&lt;/h3&gt;&lt;p&gt;In 2011 a web API endpoint was added to Freesound and since then it has been evolving and incorporating new functionalities together with the site. The current version of the API, &lt;strong&gt;Freesound APIv2&lt;/strong&gt;, can be used by 3rd party developers and researchers to programatically search sounds in Freesound, filter results (including CC license), download audio analysis and the sounds themselves. It can also be used to upload new sounds, describe, rate and comment existing ones. In summary, it provides an alternative interface to that of the web browser so that &lt;strong&gt;Freesound content can be easily integrated in all sorts of projects&lt;/strong&gt; outside Freesound itself.&lt;/p&gt;
&lt;p&gt;The Freesound API is a RESTful API that can be used similarly to other web APIs. To facilitate access to the API, we provide clients in &lt;a href=&quot;/blog/entries/freesound-intro/(https://github.com/mtg/freesound-python&quot;&gt;Python&lt;/a&gt;), &lt;a href=&quot;https://github.com/g-roma/freesound.js&quot;&gt;Javascript&lt;/a&gt; and &lt;a href=&quot;https://github.com/mtg/freesound-juce&quot;&gt;Juce (C++)&lt;/a&gt; frameworks, but there are also &lt;a href=&quot;https://freesound.org/docs/api/client_libs.html&quot;&gt;community-developed clients&lt;/a&gt; for other programming languages including Max/MSP, Perl, Supercollider, Objective-C, Scala and QT (C++). As an example, using the Python Freesound API client a search for &lt;em&gt;dog&lt;/em&gt; sounds would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;import freesound

client = freesound.FreesoundClient()
client.set_token(&amp;#39;&amp;lt;Your API key obtained from https://freesound.org/apiv2/apply&amp;gt;&amp;#39;, &amp;#39;token&amp;#39;)

results = client.text_search(query=&amp;#39;dog&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The query could be further refined and, for instance, include only dog sounds which are shorter than 5 seconds, with a high average rating, and in CC0 license like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;results = client.text_search(query=&amp;#39;dog&amp;#39;, filter=&amp;#39;duration:[0.0 TO 15.0] avg_rating:[4.5 TO 5.0] license:&amp;quot;Creative Commons 0&amp;quot;&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Search results can also be easily downloaded:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;results[0].retrieve_preview(&amp;#39;/direcotry/to/save/the/file/&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the features that make the Freesound API unique is the ability to retrieve and filter sounds using &lt;em&gt;audio features&lt;/em&gt; extracted with a &lt;strong&gt;computational analysis of the sounds uploaded to Freesound&lt;/strong&gt;. For that purpose we use a powerful open source audio analysis library called &lt;a href=&quot;https://essentia.upf.edu/&quot;&gt;Essentia&lt;/a&gt; that is also developed at the Music Technology Group. This allows the implementation of features like audio similarity search (i.e. searching for sounds given another sound as a &lt;em&gt;target&lt;/em&gt;), or advanced exploration interfaces in which audio clips are displayed in a space according to some automtically estimated acoustic properties (see the &lt;em&gt;Freesound Explorer&lt;/em&gt; example below).&lt;/p&gt;
&lt;p&gt;The Freesound API is a very powerful tool to facilitate the reuse of Freesound content. You can find more information about the API and its features in the &lt;a href=&quot;https://freesound.org/docs/api/&quot;&gt;Freesound API documentation&lt;/a&gt;. The Freesound API is currently being used by companies like Acoustica, AudioGaming, Google, Mozilla, Soundly, Spotify, Waves Audio, Wolfram, and others.&lt;/p&gt;
&lt;h3 id=&quot;spreading-cc-content-in-the-world&quot;&gt;Spreading CC content in the world&lt;/h3&gt;&lt;p&gt;The audio content hosted in Freesound has a second life outside the website. It is very hard to track all the projects in which Freesound content is used, but with 50k unique visits per day, the accumulated millions and millions of download records and the integration with 3rd party applications, it becomes clear that &lt;strong&gt;Freesound is spreading Creative Commons audio virtually everywhere&lt;/strong&gt;. Some users choose to use the Freesound forums to &lt;a href=&quot;https://freesound.org/forum/your-work-made-with-freesounds/&quot;&gt;explain the work they do using Freesound sounds&lt;/a&gt;, including music, videogames, animations, movies, theater plays, education, etc. Unfortunately this is just a small minority of users. To try to keep track of some of the applications, research proejcts and other initiatives that use Freesound content, the &lt;a href=&quot;https://labs.freesound.org&quot;&gt;Freesound Labs&lt;/a&gt; platform was introduced back in 2015. Currently it lists more than 40 projects and over 50 research papers using Freesound data. Some of these projects include &lt;strong&gt;CTAG's Strämpler&lt;/strong&gt;, an eurorack sample streaming and sound synthesis module; &lt;strong&gt;Spotify's Sountrap&lt;/strong&gt;, an online DAW with direct integration of Freesound search; &lt;strong&gt;Le Sound's AudioTexture&lt;/strong&gt;, a granular synthetizer that transforms Freesound clips; and &lt;strong&gt;Freesound Explorer&lt;/strong&gt;, a visual interface for exploring Freesound in a 2-dimensional space and create music at the same time.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;strampler.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://www.creative-technologies.de/ctag-strampler-a-eurorack-sample-streaming-and-sound-synthesis-module/&quot;&gt;Strämpler&lt;/a&gt; (see &lt;a href=&quot;https://www.youtube.com/watch?v=zmj8tKPHV8g&quot;&gt;video here&lt;/a&gt;)&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;soundtrap.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://www.soundtrap.com&quot;&gt;Soundtrap&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;audiotexturefree.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;https://lesound.io/product/audiotexture-free/&quot;&gt;Audio Texture&lt;/a&gt; (see &lt;a href=&quot;https://www.youtube.com/watch?v=pv1ozaJ3K2o&quot;&gt;video here&lt;/a&gt;)&lt;/p&gt;&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;freesound_explorer2.png&quot; width=500px/&gt;&lt;br&gt;
&lt;a href=&quot;http://labs.freesound.org/fse/&quot;&gt;Freesound Explorer&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h3&gt;&lt;p&gt;Both the Freesound website and API run on a modern technology stack which was built with high load and scalability in mind. Below is a diagram with the main blocks of the architecture. The main website consists of a &lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt; application and HTML/CSS/JS frontend connected to a &lt;a href=&quot;https://www.postgresql.org&quot;&gt;PostgreSQL&lt;/a&gt; database. This implements sound browsing and basic social interaction features (forum, sound comments, sound ratings, private messaging, etc.). Text indexing is supported by an Apache &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt; server including text descriptions and tags, which allows for sophisticated sound text queries using the Solr query syntax. A distributed architecture is used for processing incoming sounds, producing compressed previews and waveform/spectrogram images (using Python's &lt;a href=&quot;https://pillow.readthedocs.io/en/stable/&quot;&gt;Pillow&lt;/a&gt; package), as well as for audio feature extraction. Feature extraction and the similarity search service are supported with the abovementioned Essentia library. Finally, Freesound uses &lt;a href=&quot;https://www.nginx.com&quot;&gt;NGINX&lt;/a&gt; webserver to serve the Django app and static content in the appservers, and &lt;a href=&quot;http://www.haproxy.org&quot;&gt;HAProxy&lt;/a&gt; loadbalancers to balance the load of incoming requests across the appservers.&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;diagram.png&quot; width=600px/&gt;&lt;/p&gt;&lt;p&gt;The code of the Freesound website is &lt;strong&gt;open source&lt;/strong&gt;, and all development happens in our &lt;a href=&quot;https://github.com/mtg/freesound/&quot;&gt;public source code repository&lt;/a&gt;. External contributions are welcome so if you want to participate don't hesitate to get in touch with us. Of course if you're not interested in devleopment but still want to contribute to Freesound you can upload sounds or &lt;a href=&quot;https://freesound.org/donations/donate/&quot;&gt;consider making a donation&lt;/a&gt; :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp/">
    <title type="text">CC Platform Toolkit Revamp</title>
    <id>urn:uuid:076e809b-c084-3977-8ca5-7bbd76064c50</id>
    <updated>2019-12-16T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-platform-toolkit-revamp/" />
    <author>
      <name>apdsrocha</name>
    </author>
    <content type="html">&lt;p&gt;I've just finished my second week as an intern for CC (part of the Outreachy program 2019-2020 round), helping revamp the &lt;a href=&quot;https://creativecommons.org/platform/toolkit/&quot;&gt;Platform Toolkit&lt;/a&gt; and it's been a great learning experience so far.&lt;/p&gt;
&lt;p&gt;Before we get into what I've been doing, I wanted to quickly explain why I think this is such a cool project - maybe you'll think it's cool too and want to collaborate as well at some point :) See, the better this toolkit is, the more we increase our chances of having really great, user-friendly implementations in partner platforms. Providing a helpful toolkit is one of the ways we can guide users towards finding better information, understanding licenses, and making better use of content -- not to mention that getting this right ensures we reach a ton of people.&lt;/p&gt;
&lt;p&gt;So in order to start, we began by taking a step back and  studying in detail how platforms are addressing licenses today. These first weeks I went through a lot of user flows, seeing what works, and what were possible points to address and improve. The greatest challenge so far was trying to break down what were good UX/UI practices that could benefit any platform -- regardless of the type of content or current layout. Once I analyzed the material through this point of view, it was easier to filter the kind of information that must be addressed in our new version of the toolkit. This first study also gave me a lot of material to begin thinking about our next step: user research. It's important to find out how much of this process is intuitive to users and what flies under the radar -- having more answers is crucial so that we can be assertive when making suggestions.&lt;/p&gt;
&lt;p&gt;I'll keep checking in every two weeks with updates on how this project is going. Trust me, there's still a lot of really exciting tasks to be done in the following months :)&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/aws_grant/">
    <title type="text">Creative Commons Awarded AWS Imagine Grant</title>
    <id>urn:uuid:4d147a26-5b4d-3f51-a551-0df926143964</id>
    <updated>2019-12-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/aws_grant/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons was recently awarded a $125,000 AWS Imagine grant, which will cover infrastructure costs associated with some of the key features we intend to add to CC Search in 2020. In particular, some of the key outcomes we hope to have achieved at the end of the year are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Machine-generated tags using cutting edge computer vision technology produced by Amazon Rekognition. In addition to surfacing metadata-sparse images in our catalog, we may be able to offer features like filtering by artistic medium (painting, photo, pencil sketch, etc).&lt;/li&gt;
&lt;li&gt;Produce CC-hosted thumbnails for every image instead of relying on third-party images, which are often suffer from unreliable availability, are resistant to embedding, or are otherwise too low quality for our purposes.&lt;/li&gt;
&lt;li&gt;Acquire knowledge of other features of images, such as their resolution or filesize. Since we often scrape links to images without any further processing, we rely on the data upstream providers give us, which is often missing this information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because cutting-edge computer vision typically requires specialized hardware and expertise, outsourcing this task to AWS ends up being economical in comparison to implementing it ourselves. Nonetheless, due to the volume of images we need to classify, this will take up a significant amount of the grant budget; we intend to hand-pick which data sources get tagged in order to make the best use of the resources available to us.&lt;/p&gt;
&lt;p&gt;When we’re discussing computer vision, generating thumbnails and collecting resolution sounds  comparatively mundane, but it is actually a significant technical challenge that will require a serious investment in infrastructure as well. For one thing, in order to feed images to Rekognition, we need to have a copy of the image in the first place, which you may be surprised to find that we currently do not! All of our content is hosted by the original third party sources and embedded in the search results page. Sometimes, we will sneakily proxy images through our own infrastructure (in cases where the source does not offer HTTPS or an appropriately sized thumbnail), but in most instances, we have to place complete trust in what the source makes available to us. This has lead to problems with availability. Nobody likes it when the images in their search results are inexplicably broken because a third-party datacenter is having issues. Using the funds from the grant, we will at the very least be able to generate thumbnails just before they are served to the user, and possibly even bulk thumbnail our catalog of 325 million images. That’s a huge task - there may very well be petabytes of image data to scrape.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In order to thumbnail and label our entire catalog, we are going to need to build some additional infrastructure. For the thumbnailing component, we intend to use Scrapy Cluster (composed of an MSK queue, an Elasticache instance, some utility EC2 instances for controlling the cluster and communicating between components, and a large cluster of EC2 instances running web scrapers) to build a distributed system for rapidly downloading and resizing images. A controller instance will feed image URLs into the job queue. Once the destination image URLs have been fed to the cluster, Scrapy Cluster dispatches the URLs to a scalable group of crawler bots, which fetch the image, collect some metadata (such as dimensions), resize the images, and then upload the thumbnails to S3 while pushing the new image metadata back to our image database on RDS. We will then be able to start serving up the thumbnails to our end users. While we initially plan to only use this cluster for producing thumbnails, we expect it could be valuable for discovering and indexing additional CC licensed content in the future. See below for a visualization of the distributed scraping and thumbnailing system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scraping and thumbnailing system:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/aws_grant/scraping_cluster.png&quot; alt=&quot;Image scraping and thumbnailing system&quot;&gt;&lt;/p&gt;
&lt;p&gt;Image recognition pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/aws_grant/object_recognition.jpg&quot; alt=&quot;Object recognition pipeline&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/building-distributed-indexer/">
    <title type="text">Building a Distributed Indexer for a Search Engine</title>
    <id>urn:uuid:707d616c-8953-3a17-925b-02567a4c9516</id>
    <updated>2019-12-11T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/building-distributed-indexer/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;With &lt;a href=&quot;https://search.creativecommons.org&quot;&gt;CC Search&lt;/a&gt;, we want to make it possible to search all of the estimated 1.6 billion Creative Commons works on the internet. In order to make it possible for thousands of people to search billions of records in a reasonable period of time, we have to build a big inverted index (a data structure similar to the index in the back of a textbook), which allows very fast lookups of documents related to the user’s search query. To populate this index, we have to build a large database of Creative Commons works and then replicate it to our search index, which is powered by Elasticsearch.&lt;/p&gt;
&lt;p&gt;It turns out that, once your search index contains more than just a few million documents, maintaining the index is a non-trivial problem. Some of the concerns we had for our implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How often do we update the index as new Creative Commons licensed works are discovered? What if we need to make a change to every single document in the index, such as when we modify our search algorithm?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we rebuild the entire index quickly?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can we rebuild the index without users noticing degraded search performance or, worse yet, not being able to serve results while reindexing?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can we make this a completely automated process and avoid further operations tedium?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no off-the-shelf solution for this, particularly when performance is of concern; anybody in the business of writing a large search engine is going to have to write a custom indexer at some point.&lt;/p&gt;
&lt;p&gt;In the end, given the size of our dataset was in the range of a few hundred gigabytes, it turned out that bulk reindexing every week would be good enough for our purposes; our current upstream data sources don’t update much more frequently than that anyway. We wrote a program that automated the procedure of refreshing our database with the latest upstream data and pushing it to Elasticsearch, all completely online and without negative impact to production performance. A single server was responsible for moving all of our image data around to the appropriate data stores and juggling temporary tables and indices to hide the indexing process from the end user. I wrote a little bit about the design of this piece in &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/searching-300-million/&quot;&gt;a previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/one_server_indexing.png&quot; alt=&quot;Ingestion Server architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;At this point, we could reindex all 325 million images in about 1.5 days. That’s not exactly fast, but it could be scheduled to run over the weekend in a “set and forget” manner. That was good enough for about a year.&lt;/p&gt;
&lt;p&gt;However, in practice, we need to refresh our data more than once a week. For instance, if something went wrong with the indexing job (as often does while new search features are being tested on real data), we would have to start the process all over again, which means that the cost of even a small bug in indexing logic can dramatically lengthen the time it takes to deliver a new feature. More importantly, we wanted to iterate on our search algorithm, which meant we had to reindex our data quite frequently. We hoped to avoid this by performing tests on mock data or smaller subsets of the real data, but this ends up being only weakly correlated with search quality in the complete production dataset (in my experience, search result quality is inseparable from the quality of the underlying data). It became clear that indexing performance was slowing down the software development lifecycle, and further optimization was needed.&lt;/p&gt;
&lt;p&gt;Our single-node indexer had a throughput of about 2,500 records per second, which is far below Elasticsearch’s advertised indexing rates (although there are &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-indexing-speed.html&quot;&gt;numerous factors unique to each workload&lt;/a&gt; that affect indexing speed). Further profiling revealed that in our case we were likely bottlenecked by our Python code rather than I/O to the cluster: writing to the search index was reasonably fast (7,000 per second), but the indexer spent a ton of CPU time on deserializing records pulled in from database chunks, accounting for 2/3rds of the indexing process. A possible solution would be rewriting the indexer in a faster language, but there are a lot of drawbacks to this approach in that rewrites are costly, the likely performance improvement is not foreseeable, and we had already sunk plenty of time into writing the logic in Python. Instead, we decided to distribute the existing process across multiple machines, which would allow us to reuse existing code and scale up to an arbitrary number of nodes as our indexing performance requirements inevitably increase with the size of our data set.&lt;/p&gt;
&lt;p&gt;A few weeks of coding later, we had a solution in place that increased throughput to 15,000 records per second, or a 6-fold increase in performance, by splitting the work across 6 nodes. Indexing responsibilities are offloaded from Ingestion Server, which instead acts as a central point for coordinating the multiple indexing workers through a simple RPC API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing1.jpg&quot; alt=&quot;Partitioning the data&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing2.jpg&quot; alt=&quot;Simultaneous indexing&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/building-distributed-indexer/indexing3.jpg&quot; alt=&quot;Notification and promotion&quot;&gt;&lt;/p&gt;
&lt;p&gt;There appears to be ample room for us to increase the node count before we become I/O bound by the database or Elasticsearch. I’m assuming doubling our node count would approximately halve our indexing time. Eventually, if our search index becomes as big as we anticipate it will, we are going to have to make the indexer workers better utilize the underlying hardware somehow, perhaps by rewriting the “hot” parts in a lower level language than Python, but that seems to be a distant concern as of today. Additionally, since workers only run when indexing is in progress, the cost of maintaining these additional nodes is low; it costs about $10 in cloud time to perform a full reindex of all 325MM images.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-11-25-empowering-collaboration/">
    <title type="text">Empowering Collaboration in the Commons</title>
    <id>urn:uuid:c9d7d6f2-545c-3adb-95b7-c51cdee22ed4</id>
    <updated>2019-11-25T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-11-25-empowering-collaboration/" />
    <author>
      <name>TimidRobot</name>
    </author>
    <content type="html">&lt;p&gt;In the past few months I have been privileged to attend &lt;a href=&quot;https://wikimania.wikimedia.org/wiki/2019:Program&quot;&gt;Wikimania
2019&lt;/a&gt; and the Google Summer of Code &lt;a href=&quot;https://sites.google.com/view/gsoc-mentorsummit2019/home&quot;&gt;2019 Mentor
Summit&lt;/a&gt;. At these events I was overwhelmed with the amount of
care and effort people are putting into their projects and communities.&lt;/p&gt;
&lt;p&gt;At Wikimania 2019, I was impressed with how much overlap there is between the
Creative Commons and Wikimedia communities. Both communities are actively
engaged in expanding the content and participation in the commons--in the
collection and communities empowered by open content. I have a lot of hope in
what existing and future collaborations will allow. At the conference, I got to
see just the tip of the iceberg representing volunteers’ work across the globe.
I hope we at Creative Commons can continue to keep the demands of our daily
workloads in perspective and increase collaboration with the global effort.&lt;/p&gt;
&lt;p&gt;At the GSoC 2019 Mentor Summit I was able to attend a good number of sessions
on increasing and maintaining participation. Based on the session discussions
and the work already being done by other organizations, I expect we’ll pursue
the following strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Improved support for first timers--people who are engaging with code
repositories for the first time&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve tagging of issues&lt;/li&gt;
&lt;li&gt;Dedicated documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve support for GSoC and Outreachy program applicants&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide application templates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Participate in social media networks to actively recruit groups who are
underrepresented in FOSS (free and open source software)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Collect anonymous demographic data &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A couple of organization examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Public Lab: &lt;a href=&quot;https://code.publiclab.org/&quot;&gt;Community toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Software Foundation: &lt;a href=&quot;https://python-gsoc.org/index.html&quot;&gt;Python GSoC – Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you to the community and the work you’re doing &amp;lt;3&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/ssr-ccsearch/">
    <title type="text">Server Side Rendering with Vue.JS on CC Search</title>
    <id>urn:uuid:1dcdb6c2-1f17-364b-8ec0-9454ba69a338</id>
    <updated>2019-11-01T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/ssr-ccsearch/" />
    <author>
      <name>brenoferreira</name>
    </author>
    <content type="html">&lt;p&gt;The frontend of CC Search is built with Vue.JS, which is a Javascript library for managing and rendering DOM elements in the browser, similar to React and Angular. But, as it is usually the case with applications built with those libraries, the application was rendered completely on the users' browser. It means that when users loaded CC Search, the server would send a blank HTML page and some Javascript files that would be downloaded by the user. Only once those JS assets were loaded and parsed, would the rendering begin.&lt;/p&gt;
&lt;p&gt;While easier to implement initially, when we needed to ship the initial versions of CC Search faster to validate our ideas, this approach has some significant disadvantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Performance: The page initially loaded doesn't contain any visual elements. The user still has to download a few KBs of JS, which have to be parsed and interpreted by the browser before anything is rendered. On faster connections and devices, this performance hit can be negligible, but on slower and older devices and slow mobile networks, this can degrade performance significantly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Empty HTML page: When the initial HTML sent by the server is empty, meaning no visual elements, any internet bots that parse a page HTML wouldn't work properly, that is: SEO, social media websites (when users share a link to CC Search on Twitter or Facebook, those nice previews wouldn't work), the Web Archive, etc..&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So on July 26th we deployed our first release of CC Search with Server Side Rendering. You can see the work that went into it on this &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411&quot;&gt;Pull Request on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My goal with this blog post will be to explain some of the challenges that we faced while both coding the SSR support on the VueJS codebase and also the operations side with deployment and maintenance.&lt;/p&gt;
&lt;p&gt;If you are interested in learning how to do SSR with VueJS, I highly recommend reading its &lt;a href=&quot;https://ssr.vuejs.org/&quot;&gt;documentation first&lt;/a&gt;, as it provides a really helpful and comprehensive getting started guide.&lt;/p&gt;
&lt;h2 id=&quot;initial-coding-challenges&quot;&gt;Initial coding challenges&lt;/h2&gt;&lt;p&gt;Browser specific APIs&lt;/p&gt;
&lt;p&gt;A few modules and components of CC Search have dependencies on browser specific APIs, such as the &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; objects. This causes a problem with SSR because on the server, the Vue application is running on a Node.JS environment where those APIs don't exist. Therefore we need to do a couple of things to remove all possible calls to these APIs on the server. We adopted a few different strategies depending on each case.&lt;/p&gt;
&lt;p&gt;On some cases, a simple check for undefined values is sufficient, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const queryParams = !(typeof window === 'undefined') ? window.location.search : '';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;link to change diff &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-e3b1ca4ad5a207c170c97a435b3d1ff3L15&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There were also cases of components that accessed browser APIs directly on, for example, &lt;code&gt;computed&lt;/code&gt; values. Since those values are eagerly evaluated during render of a component, it would break on server rendering.&lt;/p&gt;
&lt;p&gt;The solution adopted was to set those values on the &lt;code&gt;mounted&lt;/code&gt; lifecycle method, which runs exclusively on the browser, not on the server. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mounted() {
  // for SSR, sets the value with window.location, which is only available on client
  this.shareURL = window.location.href;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;link to change diff &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-f987cb63f02cb3471ab3cfae238746f7R37&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But there was a more complicated case in which we had dependencies to visual components which in turn depended on these browser APIs to render. One in particular was the image search result grid, which is a responsive grid layout that fits all images nicely on whatever screen size the users have.&lt;/p&gt;
&lt;p&gt;One of the cases, we had a dependency tree that looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- BrowsePage
  - SearchGrid
    - GridLayoutComponent // specific component with browser API render dependency
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few other page components also depended on this &lt;code&gt;GridLayoutComponent&lt;/code&gt; component. Our solution was to split the higher level components into server and client versions. The browser version would render the search grid, and the server version wouldn't.&lt;/p&gt;
&lt;p&gt;You can an example of this case with the client version of the component &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-15c47fe052b8e07589e6cd5c7ce126fe&quot;&gt;here&lt;/a&gt; and the server version &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-9bfa3295d81a84c0fee1b5af98992561&quot;&gt;here&lt;/a&gt;. We used a mixin to provide the component interaction logic &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/commits/d3e05c01262d4fbc5bed1eceb1c256fc8da9ea80#diff-b4102772ceac63ff8d35545a2d003200&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since we had different components, we also needed different routers that mapped to the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-96a7306e1ed8bbbc4982aac42b5ef8df&quot;&gt;server&lt;/a&gt; and &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-9b23694ae94e6ff902037f3d79772bae&quot;&gt;client&lt;/a&gt; components.&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;&lt;p&gt;One thing we did, and still do, is build the assets for both server and client rendering. One reason is that we need both anyways, because on the client we need to do something called &lt;a href=&quot;https://ssr.vuejs.org/guide/hydration.html&quot;&gt;client side hydration&lt;/a&gt;, and also because if there's a problem on the server renderer that breaks our production environment, we can easily revert back to the old way of serving an empty HTML page and do client side rendering and keep CC Search up. We had to do that on the first few days after the initial deployment when we identified a few problems. I'll cover some of them below.&lt;/p&gt;
&lt;h2 id=&quot;optimizations&quot;&gt;Optimizations&lt;/h2&gt;&lt;h3 id=&quot;micro-cache&quot;&gt;Micro cache&lt;/h3&gt;&lt;p&gt;Soon after we deployed the initial release of SSR, we noticed that our Node servers were sometimes crashing, for memory exhaustion reasons, or sometimes taking too long to respond due to GC running. It seems that rendering Vue apps has a &lt;a href=&quot;https://ssr.vuejs.org/guide/caching.html#page-level-caching&quot;&gt;high memory footprint from components and their Virtual DOM Nodes&lt;/a&gt;. Because of that, we decided to adopt a micro-caching of every server response, as you can see &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/475/commits/aa5ee97101d38443416ef19a954dff63031e293a&quot;&gt;here&lt;/a&gt;. Important caveat: no CC Search page has user specific content. They all serve the same content, no matter which user requests it. So that makes it trivial to cache the responses, since the response never changes for individual users. If that were the case, we either wouldn't be able to cache the response or only cache some request responses but not others.&lt;/p&gt;
&lt;p&gt;After implementing this cache, we saw that the memory consumption dropped dramatically and response times were now constant of a few milliseconds. Node wasn't crashing because it ran out of memory and GC wasn't being triggered as much lowering response times.&lt;/p&gt;
&lt;h3 id=&quot;not-loading-data-twice&quot;&gt;Not loading data twice&lt;/h3&gt;&lt;p&gt;Another optimization was to not repeat requests, which were made on the server, again on the client.
One example is the &lt;a href=&quot;https://ccsearch.creativecommons.org/photos/df2e7f75-7fe9-457b-a58f-edc1833a1ed8&quot;&gt;image details page&lt;/a&gt;. The image can be loaded both on the server and the client, but we don't want the user to request the image data if it was already loaded on the server.&lt;/p&gt;
&lt;p&gt;We did this by using the &lt;code&gt;serverPrefetch&lt;/code&gt; method to load the data on the server, but on the client, in the &lt;code&gt;mounted&lt;/code&gt; method, we check if the data isn't already available before making the request. You can see how that works &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/411/files#diff-e33cf6c2e6f63a3ac958ac500eeabcaaR87&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future improvements&lt;/h2&gt;&lt;p&gt;As said before, we have a dependency on a component that uses browser APIs which doesn't work on the server side. That dependency is &lt;a href=&quot;https://github.com/shershen08/vue-masonry&quot;&gt;Masonry Layout&lt;/a&gt;. And because of that, we had to split components and router into server and client versions.&lt;/p&gt;
&lt;p&gt;To remove that complexity, we will probably try to use a pure-CSS approach to generate the responsive grid, as described in &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/issues/489&quot;&gt;this issue on Github&lt;/a&gt;. If that doesn't work, we'll use something like &lt;a href=&quot;https://github.com/egoist/vue-client-only&quot;&gt;vue-client-only&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-09-25-ccgn-redesign/">
    <title type="text">Revamping the Creative Commons Global Network website</title>
    <id>urn:uuid:f7cf9cf1-939f-397e-981f-87ad4e9c50d5</id>
    <updated>2019-09-25T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-09-25-ccgn-redesign/" />
    <author>
      <name>hugosolar</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://network.creativecommons.org&quot;&gt;CC Global Network&lt;/a&gt; website is the face of our global community; it is the home for a community of advocates, activists, scholars, artists, and users working to strengthen the Commons worldwide.
One of our organizational goals regarding the global network is to “create value for members, toward impact at global scale” and that’s why we plan on redesigning the Global Network website.&lt;/p&gt;
&lt;h2 id=&quot;increase-value-for-members&quot;&gt;Increase value for members&lt;/h2&gt;&lt;p&gt;When we think of a website focused on members and their possible needs, we have to think about how different users interact with the website. We established three differents users/personas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Not logged in users:&lt;/em&gt; users looking for global network general information or how to begin the sign up process&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logged in but not approved yet&lt;/em&gt;: users looking for information about their membership approval status&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logged in and approved members&lt;/em&gt;: users utilizing the site’s search function and contacting other members&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keeping this in mind, three differents homepages were designed according to each identified profile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/blog-ccgn-home.png&quot; alt=&quot;CCGN differents homepages&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;improved-user-search&quot;&gt;Improved user search&lt;/h2&gt;&lt;p&gt;We listened to the community feedback and developed a major revamp of the member section. We improved the member list and the search section by adding useful filters to help identify specific people or groups of people based on a range of factors, such as nationality or language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/user-search.png&quot; alt=&quot;User search filters&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;member-profiles&quot;&gt;Member profiles&lt;/h2&gt;&lt;p&gt;Member profiles were redesigned to take advantage of the current metadata of users so we can show the information in a better way. In addition, the profile shows more/less information if you are/aren’t approved as a member.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/member-profile.png&quot; alt=&quot;Member profile&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;chapters-section&quot;&gt;Chapters section&lt;/h2&gt;&lt;p&gt;Giving more visibility for the local chapters’ infrastructure, this entire section was redesigned considering the network’s global reach and the necessity of easily searching for details and specific chapters. The new interface supports switching between the map and the sortable list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/chapters-map.png&quot; alt=&quot;Map from chapters around the world&quot;&gt;
&lt;img src=&quot;/blog/entries/2019-09-25-ccgn-redesign/chapters-list.png&quot; alt=&quot;Chapters list with details&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;keeping-forward-the-global-network-website&quot;&gt;Keeping forward the global network website&lt;/h2&gt;&lt;p&gt;This is certainly not the end of our revamp of the CC Global Network website, we're always working on giving the members a better experience by fixing bugs and updating the interface. If you have any feedback, feature request, or bug report please feel free to &lt;a href=&quot;https://github.com/creativecommons/commoners/issues&quot;&gt;open an issue&lt;/a&gt; in the &lt;a href=&quot;https://github.com/creativecommons/commoners&quot;&gt;Commoners repository&lt;/a&gt; on Github or reach out to us on Slack.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-09-11-google-docs-plugin/">
    <title type="text">Creative Commons Google Docs Add-on</title>
    <id>urn:uuid:ba029f48-4750-335c-b171-9d4a4f73f956</id>
    <updated>2019-09-11T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-09-11-google-docs-plugin/" />
    <author>
      <name>brandonopened</name>
    </author>
    <content type="html">&lt;p&gt;A few years ago I published a &lt;a href=&quot;https://gsuite.google.com/marketplace/app/creative_commons_license_chooser/803008856330&quot;&gt;Google Docs Add-on that allowed users to insert a Creative Commons license image and link into their Google doc&lt;/a&gt;. Since then it’s been used thousands of times and I’ve gotten some great feedback from teachers about how nice it is to teach their students about digital literacy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image1.png&quot; alt=&quot;Plugin screenshot 1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;&lt;p&gt;I created the add-on after inspiration from students in one of the classes I teach at &lt;a href=&quot;http://www.fresno.edu/&quot;&gt;Fresno Pacific University’s Graduate School of Education&lt;/a&gt;. I was teaching a course on digital literacy, and open licenses and fair use was a large portion of the course.&lt;/p&gt;
&lt;p&gt;To get started, I used the &lt;a href=&quot;https://developers.google.com/apps-script/overview&quot;&gt;templates Google provided about building an addon&lt;/a&gt;, took a look at the html etc on the Creative Commons License Chooser page itself, and eventually got something working! It took a couple of days off and on and mostly was me remembering javascriptI admit I had to pay a guy on Upwork to help clean up the code before I published it because sometimes the chooser would keep selecting hundreds of license images… of course, this was also before I was a bona fide contributor to the open source project I Product Manage, &lt;a href=&quot;http://www.github.com/opensalt/opensalt&quot;&gt;OpenSALT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My hope is that folks are able to normalize the idea of putting a Creative Commons license on their public documents, as well as when &lt;a href=&quot;https://support.google.com/youtube/answer/2797468?hl=en&quot;&gt;uploading creative content to Youtube&lt;/a&gt; etc. Teachers in particular would be served by publishing a license so that if their work shows up unauthorized on &lt;a href=&quot;https://www.edweek.org/ew/articles/2018/12/19/on-teachers-pay-teachers-some-sellers-are.html&quot;&gt;Teachers Pay Teachers without attribution or for commercial purposes&lt;/a&gt;, they have a legal avenue to pursue it to be taken down. Even &lt;a href=&quot;https://creativecommons.org/2015/05/06/medium-embraces-cc-licenses/&quot;&gt;Medium has an option to publish documents with a CC license&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My nine year teaching career in Fresno Unified School District plus my career in Edtech (OpenEd.com, ACT) have opened my eyes to the need for a more open Web. Creative Commons licenses allow ‘free’ to not just be free, but able to conform to the five &lt;a href=&quot;https://opencontent.org/definition/&quot;&gt;R’s of open content&lt;/a&gt;(retained, reused, revised, remixed, and redistributed) and enable greater opportunities for innovation and equity.&lt;/p&gt;
&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;&lt;p&gt;This month I’ve finally updated it from the old Google Docs add-on store to the Gsuite Marketplace and updated some links. I’ve also updated the &lt;a href=&quot;https://github.com/brandonopened/creativecommons_gdocs&quot;&gt;Github sit&lt;/a&gt;e as the main website for the app and hope to implement some changes based on the work in&lt;a href=&quot;https://github.com/creativecommons/cc-license-chooser&quot;&gt; this Github repo&lt;/a&gt; with an updated license chooser process etc. The add-on has been installed thousands of times and usually has couple of hundred uses a month based on statistics.&lt;/p&gt;
&lt;p&gt;I hope in the future to use an API call to support different languages, and perhaps embed RDF into the Google doc if that is possible to make the license machine-searchable. This is a fun project that is useful and helping teach me more about coding and best practices for open source software.&lt;/p&gt;
&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;In Google Docs, select “Get Add-ons” &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image2.png&quot; alt=&quot;How-to screenshot 1&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Input Creative Commons and press enter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image3.png&quot; alt=&quot;How-to screenshot 2&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install and use!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-09-11-google-docs-plugin/image4.png&quot; alt=&quot;How-to screenshot 3&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;video-tutorial&quot;&gt;Video tutorial&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://youtu.be/sQZFlNXEVZ4&quot;&gt;A video tutorial is available here&lt;/a&gt; or by clicking on the image below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=sQZFlNXEVZ4
&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/sQZFlNXEVZ4/0.jpg&quot; 
alt=&quot;Video tutorial&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/improving-ranking/">
    <title type="text">Some thoughts on improving the relevance of images in CC Search</title>
    <id>urn:uuid:79bf7360-f0e9-3023-8ec4-827550e3502e</id>
    <updated>2019-09-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/improving-ranking/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;Like other image search services, CC Search matches queries with keywords in descriptive metadata derived from the source page of the image, including user-generated tags, the title of the image, the name of the author, and, if provided, a description of the image. Our search engine is able to sift through our collection of 325 million images to find positive matches.&lt;/p&gt;
&lt;p&gt;Finding images that match the user’s keywords is easy. The much more difficult problem is ranking the results in a meaningful way. Most search queries will have thousands or millions of potential matches. The user is only going to look at maybe the first few hundred results at most. Because of that, it’s important to make sure the best images are presented first. How do we determine which images are “the best”?&lt;/p&gt;
&lt;p&gt;With nothing except descriptive metadata, we have few options for ranking images. The basic premise behind the current ranking algorithm is that the more that the user’s keywords appear in the metadata, the more likely that the image is relevant to the user’s work. There are plenty of ways to fine-tune this approach by adjusting the impact of each metadata field, how these fields are interpreted during indexing and querying, and which matching algorithms are chosen for each field, but ultimately, the ranking is still based off of a very limited amount of information. These fields tell us that an image is a plausible result for a search, but does nothing to tell us about the quality of the image. The end result is that our ranking algorithm will treat a blurry amateur photo on someone’s Flickr photo stream the same as a work by a master painter, as long as the keywords match. In an environment where we could hand-curate every work in our database, this would be acceptable; in the real world, where a lot of low-effort stuff gets uploaded to the internet, we need to find a way to separate the wheat from the chaff.&lt;/p&gt;
&lt;p&gt;How can we figure out which images are “significant”? That’s a fuzzy qualitative measure that we won’t be able to teach a computer to judge. Instead, we have to find some metrics that can act as a proxy for significance. Popularity and provenance seem like two promising indicators.&lt;/p&gt;
&lt;p&gt;What makes an image popular? Other search engines have solved this problem using PageRank, which uses the number of links to a page across the internet as an indicator that a result is high-quality. In our case, PageRank might not be as applicable, as our images tend to be sourced from a small number of trusted domains; instead of ranking entire websites, we need to rank individual images. Still, the basic idea of using popularity as a ranking factor sounds like a good idea. How can we use that for our case? What other factors can we use to determine whether an image should be given preferential treatment over others? Here’s a few possible ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How popular is this image on its original platform? For images from social sites, how many people are following the author? Has anybody added the image to their favorites, or does it have a particularly large number of views? Has it been “liked” a lot by its users? For images from Wikimedia Commons, how many articles reference the image?&lt;/li&gt;
&lt;li&gt;Is the image from a high-quality curated collection like the MET Museum, or from a social media website where the quality is more variable?&lt;/li&gt;
&lt;li&gt;Using computer vision technology, can we determine anything else about the image? Is it a painting or a drawing? Is the image an overly compressed 50x50 JPG? Can we detect that it’s blurry? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these metrics can be hooked up to our search engine and used as factors in ranking images. I expect that this will go a long way in boosting the most interesting CC images to the top and generally increase the quality of our search results.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-thelinkedcommons/">
    <title type="text">The Linked Commons graph: the final vis</title>
    <id>urn:uuid:05bd2f86-63f9-3669-ac70-1032a147354b</id>
    <updated>2019-09-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-thelinkedcommons/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part 3 of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;p&gt;Hello! In this last post, I am going to talk you about the final visualization. First, I would like to talk about the data and share my recommendations.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-data-driven-graph&quot;&gt;Creating a data-driven graph&lt;/h3&gt;&lt;p&gt;+250 million licensed content is a very big number. That is the amount of data I had to visualize for this GSoC project. The graph is very sensitive to the amount of data. Let's talk about sensitivity as the property that a visualization has to look well-structured or tightly clustered like a hairball. The graph is less sensitive to the data if there are a few hundred or thousand nodes but as the amount of data increases it starts to look more and more like a hairball. Take a look at the following examples:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;20k_graph.png&quot; alt=&quot;Graph with 20k nodes&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The Linked Commons gaph with 20k nodes and links. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;100k_graph.png&quot; alt=&quot;Graph with 100k nodes&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The Linked Commons gaph with 100k nodes and links.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Moreover, any visualization library starts to render the elements slower, and at one point, it freezes. For the 100k nodes graph, the visualization took ages to appear and had the same clustered appearance. This was my major concern. That's why I decided to choose the top 500 domains from the processed data, as well as all the other domains those 500 nodes are connected to. This is also more user-friendly, because having the entire dataset will make the navigation through the graph very dizzy. Even with this smaller dataset, we could get valuable insights from the graph. We were able to find communities like the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;community_graph_cc.png&quot; alt=&quot;Libraries community&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Educational community, including libraries and universities.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Insights like this are valuable for Creative Commons, because they can help with outreach efforts, targeted communications and for the CC Search team to choose which domains to include in the CC Search tool.&lt;/p&gt;
&lt;p&gt;The final graph is interactive. Users can pan, zoom in and out, hover over a node to see its neighbors and neighbors of neighbors, and click on a node to display a pie chart.&lt;/p&gt;
&lt;h3 id=&quot;pie-chart-visualization&quot;&gt;Pie chart visualization&lt;/h3&gt;&lt;p&gt;The pie charts are built using the &lt;a href=&quot;https://www.highcharts.com/&quot;&gt;Highcarts library&lt;/a&gt;. The purpose of this chart is to show  to the public how each domain uses CC licenses. I spoke about this in my blog post: &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/&quot;&gt;Visualize CC Catalog data&lt;/a&gt;. Here is an image to illustrate the above:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;pie_chart.png&quot; alt=&quot;cc_licenses dictionary&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Pie chart of ask.openstack.org &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;There are some nodes that we do not have information about their CC licenses (and they probably do not have licensed content). For these nodes, a message saying &quot;The CC License information of &lt;em&gt;domain_name&lt;/em&gt; is not available&quot; is displayed instead of the pie chart. We did not wanted to disable the pie chart for them, because we wanted to be consistent with the nodes behavior. Making some nodes not clickable would confuse everyone, and it would also make more complicate the implementation of the visualization.&lt;/p&gt;
&lt;h3 id=&quot;tweaking-the-graph&quot;&gt;Tweaking the graph&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/vasturiano/force-graph&quot;&gt;Force-graph&lt;/a&gt; has a nice API that offers a lot of possibilites for customizing the visualization. The building of the graph is data-driven, and we can use the data in order to alter the appearance of nodes and edges.&lt;/p&gt;
&lt;p&gt;I implemented the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The node size is proportional to the number of CC licensed content in each domain. &lt;/li&gt;
&lt;li&gt;When the user hovers over a node, a label with the domain name is displayed. This might sound redundant when you can see the node perfectly. But the graph is very big, and you will like to see it in a low zoom level in order to have a picture of the shape of the entire graph. This is when this functionality is useful, because you don't have to zoom in in order to see the name of a node. &lt;/li&gt;
&lt;li&gt;The force of a link between two nodes (&lt;em&gt;node A&lt;/em&gt; and &lt;em&gt;node B&lt;/em&gt;) is given by the number of links &lt;em&gt;node A&lt;/em&gt; has that references &lt;em&gt;node B&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;When you hover over a node, you can also see the links to its neighbors highlighted, as well as the links to the neighbors of the neighbors. This feature make it pretty easy for you to find communities, and see how strongly connected a node is in the graph. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the final visualization, using a sample data from one month of the Common Crawl data:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph, &quot;The Linked Commons&quot;. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;highlights.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph, &quot;The Linked Commons&quot;. Neighbors of domain &lt;i&gt;svgsilh&lt;/i&gt; hihglighted. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;You can check the whole project source code in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz/tree/master/GSoC2019&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;final-comments-and-future-work&quot;&gt;Final comments and future work&lt;/h3&gt;&lt;p&gt;This was my first experience with big data visualization, and I really enjoyed it!&lt;/p&gt;
&lt;p&gt;There are features that could be implemented in the future in order to reduce the amount of data rendered in the graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A user might just want to check if a specific domain has licensed content, and how does it use it. An enhancement could be then to add a search bar and offer to the user the possibility to search for a node, given a domain name and/or URL.&lt;/li&gt;
&lt;li&gt;Given the suffix of the URLs of the &lt;em&gt;provider_domains&lt;/em&gt;, we could try to find the country of origin, and so filter domains by country.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;check-out-the-live-demo&quot;&gt;Check out the live demo!&lt;/h3&gt;&lt;p&gt;[2D version] (&lt;a href=&quot;http://ec2-3-80-82-250.compute-1.amazonaws.com/&quot;&gt;http://ec2-3-80-82-250.compute-1.amazonaws.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[3D version] (&lt;a href=&quot;http://ec2-3-80-82-250.compute-1.amazonaws.com/visualization_3d.html&quot;&gt;http://ec2-3-80-82-250.compute-1.amazonaws.com/visualization_3d.html&lt;/a&gt;)&lt;br&gt;
*Yes, with my mentor Sophine, we thought it could be a great idea to try with a 3D version of the graph :) . You can interact with the graph in the same way as with the 2d version.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;I had a great time working with Creative Commons. I hope you like the final product as much as I do. Thank you for following the development of this project.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/introducing-cc-search-extension/">
    <title type="text">Introducing CC Search Extension</title>
    <id>urn:uuid:1d9e2dcd-6ee5-3ee2-a330-7acf4858af05</id>
    <updated>2019-09-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/introducing-cc-search-extension/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;The past three months of Google summer of code has been an amazing learning experience to say the least. I am thrilled to announce that &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;my GSoC project&lt;/a&gt; was successfully completed and we were able to achieve more than we aimed for!&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;light-dark-mode.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        CC Search Browser Extension
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;&lt;p&gt;The three extension stores of the browsers we were building support for have approved the extension 🎉&lt;/p&gt;
&lt;p&gt;Install the extension on your favorite browser from the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/cc-search-extension/&quot;&gt;Firefox Addon Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/cc-search/agohkbfananbebiaphblgcfhcclklfnh&quot;&gt;Google Chrome store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://addons.opera.com/en/extensions/details/cc-search/&quot;&gt;Opera Addon Store&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Checkout &lt;a href=&quot;/blog/entries/introducing-cc-search-extension/#join-the-community&quot;&gt;Join the community&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;&lt;p&gt;At inception, we thought that the extension would become a complementary plugin to the amazing &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; but now I can say with confidence that the extension has the potential to sketch an identity of itself.
In this section, I will go through all the major features(exclusive of any technical jargon) of the extension.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Search and filter CC Licensed content&lt;/strong&gt;&lt;br&gt;
This feature is at the core and the extension does a good job. The searching and filtering is powered by &lt;a href=&quot;https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt; which exposes various endpoints to get search results and apply filters for providers, licenses, and use-case. This makes sure that you will find exactly what are you looking for.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;minimal-ui.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Bunch of features. Minimal interface.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One-click easy attribution:&lt;/strong&gt;&lt;br&gt;
Attributing the owner of the image is as easy as it can get with one-click attribution. You can copy either the Rich-text or HTML version of the attribution to your clipboard by one-click.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;search-images-attribution.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Search CC License Images. Easy one-click attribution, image info, and share options.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Download images (and attribution):&lt;/strong&gt;&lt;br&gt;
Download the image to use it in your works from the extension itself. You also have the option to download the attribution as a text file along with the image. This can be helpful when you want to download multiple images in a single session.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bookmark images:&lt;/strong&gt;&lt;br&gt;
Hovering over the image thumbnails and clicking the bookmark icon will save the images. This is perfect for shortlisting the images that you might find usefull in the future. You can view and remove your bookmarks from the bookmarks section.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;bookmarks.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        View saved images in Bookmark Section. Export and import bookmarks from the &quot;Bookmarks&quot; tab in the options page.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Export and import bookmarks.&lt;/strong&gt;&lt;br&gt;
As a user, you might want to easily archive and/or transfer your bookmarks. The extension goes one step ahead and gives you the feature of exporting and importing bookmarks.  This makes sure that the solution to archiving and transfer of bookmarks is uncomplicated and straightforward.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sync your custom setting and bookmarks across devices.&lt;/strong&gt;&lt;br&gt;
The extension uses the in-build feature of chrome and firefox to sync your custom settings and bookmarks.  So you can be sure to have a familiar user experience across your devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Options-UI for custom settings.&lt;/strong&gt;&lt;br&gt;
The extension also has an options page where you can set default filters and settings. The options page helps in decluttering and making sure that the main popup of the extension remains minimal and holds only the most necessary information. This page will host most of the future features too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;custom-filters.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Add custom defaults from the options page.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dark Mode.&lt;/strong&gt;&lt;br&gt;
Because everyone loves dark mode! Save battery and go easy on your eyes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;opera-light.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Light mode.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;opera-dark.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        Dark Mode. Looks more cool if the browser is also in dark mode!
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;about-page.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        About page of the extension.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;h3 id=&quot;join-the-community&quot;&gt;Join The Community&lt;/h3&gt;&lt;p&gt;We hope that you will give this a shot and maybe use it as your daily driver to search for images. There is so much more that we can do to improve and expand this project. Your help in form of &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#reporting-bugs&quot;&gt;bug reports&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#feature-requests&quot;&gt;feature requests&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/blob/master/INSTRUCTIONS.md#contributing-code&quot;&gt;code contribution&lt;/a&gt; will be of great importance in shaping the future of the extension.&lt;/p&gt;
&lt;p&gt;You can check out the &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;project on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Come and say hi to us on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt; and tell about your experience with CC Search extension. The slack channel is &lt;code&gt;#gsoc-browser-ext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-final-phase/">
    <title type="text">Creative Commons WordPress Plugin Final Phase</title>
    <id>urn:uuid:bd8f5195-c23f-3aab-8233-2d4cfe53580c</id>
    <updated>2019-08-23T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-final-phase/" />
    <author>
      <name>ahmadbilaldev</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working with my mentor &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot&lt;/a&gt; on Creative Commons WordPress Plugin in GSoC 2019. It is basically an attribution tool, allowing users to attribute their content and include a CC license on their WordPress website.&lt;/p&gt;
&lt;p&gt;GSoC is about to end, and I am excited that we have the plugin ready with all the possible attribution features.
 We had a stable version of the plugin up and running in the last phase. This allowed us to use it and
look for possible improvements and increments. We managed to get a handful of suggestions and feedback
from some users, which turned out quite applicable. First, let's take a quick look at the releases in
this phase and their changelogs.&lt;/p&gt;
&lt;h3 id=&quot;releases&quot;&gt;Releases&lt;/h3&gt;&lt;h4 id=&quot;v2019.7.2&quot;&gt;v2019.7.2&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Bug fixes.&lt;/li&gt;
&lt;li&gt;New license selection settings.&lt;/li&gt;
&lt;li&gt;Old license chooser removed and plugin linked to the &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;current chooser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plugin settings page redesigned for better user experience.&lt;/li&gt;
&lt;li&gt;New feature to add additional text after the license.&lt;/li&gt;
&lt;li&gt;Gutenberg blocks for CC licenses redesigned.&lt;/li&gt;
&lt;li&gt;Added customization settings for Gutenberg blocks for backend and front end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v2019.8.1&quot;&gt;v2019.8.1&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Re-wrote license widget for the plugin. Added option to display the default license
as a widget or in the footer.&lt;/li&gt;
&lt;li&gt;Refactored and improved code quality.&lt;/li&gt;
&lt;li&gt;Submitted plugin to WordPress.org for review.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v2019.8.2&quot;&gt;v2019.8.2&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;All necessary Default/Site license settings added.&lt;/li&gt;
&lt;li&gt;Plugin settings page design completed.&lt;/li&gt;
&lt;li&gt;Rich-text components added to previously static Gutenberg blocks converted to allow attribution of any content.&lt;/li&gt;
&lt;li&gt;Gutenberg blocks redesigned to include settings.&lt;/li&gt;
&lt;li&gt;Security improvements.&lt;/li&gt;
&lt;li&gt;i18n improvements.&lt;/li&gt;
&lt;li&gt;Minor bug fixes and refinements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;blocks&quot;&gt;Blocks&lt;/h3&gt;&lt;p&gt;The CC blocks are now editable with a bunch of options. We integrated rich-text in each block, which
 renders a rich content-editable input, providing users with the option to format the content.
 This makes sure that the requirements of describing the title, author and the source
 while using a CC licensed content can be met..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/cc-block.png&quot; alt=&quot;CC License Block&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;re-designed-settings&quot;&gt;Re-designed Settings&lt;/h3&gt;&lt;p&gt;The redesigned plugin settings are straightforward and have every required field. We have added widget as a display
option, which is much better than previous footer implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/settings-1.png&quot; alt=&quot;Plugin Settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Selecting a license is simple and quick with a link to the chooser&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-final-phase/settings-2.png&quot; alt=&quot;Plugin Settings&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What's next&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Implement GitHub Actions or similar for automated deployment on release from GitHub to WordPress SVN directory.&lt;/li&gt;
&lt;li&gt;Integrate WPGulp workflow and improve i18n.&lt;/li&gt;
&lt;li&gt;Improve documentation with a visual walk-around of every feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading. For more, see the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any feedback or suggestions, let us know in the discussion on &lt;code&gt;#cc-dev-wordpress&lt;/code&gt; Slack channel. Looking forward!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-chooser-lastweek/">
    <title type="text">GSoC cc-chooser Final Post</title>
    <id>urn:uuid:4a9b45fd-e1a7-3613-bfba-21928b8ee42c</id>
    <updated>2019-08-22T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-chooser-lastweek/" />
    <author>
      <name>akmadian</name>
    </author>
    <content type="html">&lt;p&gt;Summer of Code is drawing to a close, and so is my work on the chooser project (well, sort of, I'll continue to help build and support the project for some time). These have easily been some of the best months of my life for a number of reasons. I remember vividly getting my first Slack message from my mentor, Breno, and being in utter disbelief that I was chosen. I have been fortunate enough to have this project be my own, complete with a whole Git repo just for this project!&lt;/p&gt;
&lt;p&gt;My work started with an empty GitHub repository, and bunch of planning: layout, wireframes, usability testing, etc. It wasn't until week 3 when I could start on actually building the site. To reflect on this time, I thought it would be cool to take a look back at the most significant PRs of the last three months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My first PR with anything of substance was &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/9&quot;&gt;#9 - Refactor Modal System&lt;/a&gt;. This changed the site's modal system from using a cooler approach to one not quite as flashy, but the old method was lacking some critical features.&lt;/li&gt;
&lt;li&gt;Then came &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/10&quot;&gt;#10 - Add Chooser Functionality&lt;/a&gt;. This was a pretty big deal, as this brought the functionality behind the main point of the page: the License Chooser.&lt;/li&gt;
&lt;li&gt;Next up, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/11&quot;&gt;#11&lt;/a&gt;: a big change to page layout. This changed the layout of the help section itself, and the layout of the page as a whole.&lt;/li&gt;
&lt;li&gt;Another big design change: &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/14&quot;&gt;#14&lt;/a&gt;. This PR changed the method of displaying the chosen license from the legacy look that was essentially just copied over from the legacy chooser, to a newer, more modern, and more informative card.&lt;/li&gt;
&lt;li&gt;Then, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/23&quot;&gt;#23 - Add HTML Generator Functionality&lt;/a&gt;. This added functionality to the HTML Generator, previously just a collection of dummy controls and fields.&lt;/li&gt;
&lt;li&gt;Currently still open, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/18&quot;&gt;#18&lt;/a&gt;. This PR changes the look and functionality of the chooser controls. Previously they were just some standard switches. Now, they are (in my opinion) more modern, and more informative, although maybe more difficult for the average user to grasp.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, and most recently, &lt;a href=&quot;https://github.com/creativecommons/cc-chooser/pull/24&quot;&gt;#24 - Refactor Site to Vue Components&lt;/a&gt;. This is a complete rewrite of the entire site to shift from a standard HTML5/ CSS/ JS toolset to Vue.js.&lt;/p&gt;
&lt;p&gt;For all of these merged PRs, there is still work to be done: more usability testing, ensuring that all content on the page meets the proper legal requirments, localization, adding CSS for mobile and tablet breakpoints, and deployment!&lt;/p&gt;
&lt;p&gt;I plan to have #24 done and merged by Monday, August 26, and I hope to continue my work on the chooser project either in my free time, or by moving into a mentor type role.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/vocabulary-so-long/">
    <title type="text">CC Vocabulary: Care for dessert?</title>
    <id>urn:uuid:fadb492f-cfe1-309e-bb0e-18854ec25020</id>
    <updated>2019-08-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/vocabulary-so-long/" />
    <author>
      <name>dhruvkb</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;&quot;Three months?!&quot;&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;&quot;Can't be that soon, right?&quot;&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;&quot;Right?!&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Damn.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi, it's me again. It's been long since I last sat down to write. I haven't been
punctual with my posts and my only hope of redemption is that my punctuality
with code makes up for it somehow.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;graph.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;
        All that green makes 
        &lt;a href=&quot;https://github.com/dhruvkb&quot;&gt;me&lt;/a&gt; very happy.
      &lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;With GSoC deadlines drawing to a close, it makes sense to have a post describing
the fruits of this quarter-year of labour. Let's start with two big news pieces.&lt;/p&gt;
&lt;p&gt;If this feels like a self-congratulatory piece patting myself on the back, I 
apologise. It's also my GSoC final submission work product report.&lt;/p&gt;
&lt;h3 id=&quot;vocabulary-is-ready-for-consumption&quot;&gt;🎉 Vocabulary is ready for consumption!&lt;/h3&gt;&lt;p&gt;It's been that way for almost a couple of weeks, actually. I just wasn't able to
take time out for a blog post.&lt;/p&gt;
&lt;p&gt;The rate at which Vocabulary components have received compatibility-breaking
changes has continuously gone down week after week. Code has been refactored,
&lt;em&gt;yes&lt;/em&gt;. Stylesheets have been cleaned up, &lt;em&gt;yes&lt;/em&gt;. Documentation has been updated
and at times even rewritten, &lt;em&gt;yes&lt;/em&gt;. But in terms of functionality, the
components are stable and solid enough to act as a foundation for the apps to
come. The external API for the components has matured considerably.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;scott.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;&quot;It's every parent's dream.&quot;&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;It's been about twelve weeks since the first commit to CC Vocabulary way back in
May. As with everything else in software, Vocabulary has moved fast. Under the
mentorship of &lt;a href=&quot;/blog/authors/hugosolar/&quot;&gt;Hugo Solar&lt;/a&gt; and over the course of
&lt;strong&gt;300+ commits&lt;/strong&gt; and &lt;strong&gt;17+ alpha releases&lt;/strong&gt;, Vocabulary has gone from 1
component that just said &lt;em&gt;&quot;Hello World!&quot;&lt;/em&gt; to &lt;strong&gt;over 33 components&lt;/strong&gt; that are
capable of replacing over half the entire codebase of the frontend for CC
Search. Talk about kids growing fast!&lt;/p&gt;
&lt;p&gt;You get all the components a typical web application needs, and then some. It's
got the standards like &lt;code&gt;InputField&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt;, some unconventional ones like
&lt;code&gt;Definition&lt;/code&gt; and &lt;code&gt;Quote&lt;/code&gt;, and some components that only our own tailored design
library could afford like &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's a list and &lt;a href=&quot;https://creativecommons.github.io/cc-vocabulary&quot;&gt;there's&lt;/a&gt; 
a living styleguide.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Elements&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Heading&lt;/li&gt;
      &lt;li&gt;Paragraph&lt;/li&gt;
      &lt;li&gt;ImageView&lt;/li&gt;
      &lt;li&gt;Button&lt;/li&gt;
      &lt;li&gt;ChoiceField&lt;/li&gt;
      &lt;li&gt;InputField&lt;/li&gt;
      &lt;li&gt;SelectField&lt;/li&gt;
      &lt;li&gt;SwitchField&lt;/li&gt;
      &lt;li&gt;Rating&lt;/li&gt;
      &lt;li&gt;ProgressBar&lt;/li&gt;
      &lt;li&gt;Statistic&lt;/li&gt;
      &lt;li&gt;LicenseIconography&lt;/li&gt;
      &lt;li&gt;Shield&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;button.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Button&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Layouts&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Container&lt;/li&gt;
      &lt;li&gt;Section&lt;/li&gt;
      &lt;li&gt;Grid
        &lt;ul&gt;&lt;li&gt;GridCell&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tabbed
        &lt;ul&gt;&lt;li&gt;TabbedPane&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Table
        &lt;ul&gt;&lt;li&gt;TableCell&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;tabbed.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Tabbed&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Patterns&lt;/summary&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;Card&lt;/li&gt;
      &lt;li&gt;Definition&lt;/li&gt;
      &lt;li&gt;Header&lt;/li&gt;
      &lt;li&gt;Footer&lt;/li&gt;
      &lt;li&gt;LicenseBadge&lt;/li&gt;
      &lt;li&gt;BrandImagery&lt;/li&gt;
      &lt;li&gt;Quote&lt;/li&gt;
      &lt;li&gt;Locale&lt;/li&gt;
      &lt;li&gt;NavigationLink
        &lt;ul&gt;&lt;li&gt;NavigationLink&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Trail
        &lt;ul&gt;&lt;li&gt;TrailCrumb&lt;/li&gt;&lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;text-align: center;&quot;&gt;
      &lt;figure&gt;
        &lt;img src=&quot;card.png&quot;/&gt;
        &lt;figcaption&gt;
          &lt;em&gt;&lt;code&gt;Card&lt;/code&gt;&lt;/em&gt;
        &lt;/figcaption&gt;
      &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;Button
&lt;/details&gt;&lt;p&gt;Vocabulary also offers some Stylus mixins, token collection in Stylus, SASS and 
JSON and some handy utils too. That's about it.&lt;/p&gt;
&lt;p&gt;I know what you are thinking and &lt;em&gt;yes, all of that, including
the designs and revisions, was accomplished in two months and a half&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;quality&quot;&gt;Quality&lt;/h4&gt;&lt;p&gt;The code follows the &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standard code style&lt;/a&gt; and the &lt;a href=&quot;https://vuejs.org/v2/style-guide/&quot;&gt;Vue
official style guide&lt;/a&gt;. In addition,
Vocabulary has &lt;a href=&quot;https://opensource.creativecommons.org/cc-vocabulary/#/Vocabulary/Code%20style&quot;&gt;its own style
guide&lt;/a&gt;
that has rules right down to the order of rules in the CSS. This ensures that
code is sensibly written, easily understandable and as little in debt as
possible.&lt;/p&gt;
&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;&lt;p&gt;CC Vocabulary can be installed via &lt;code&gt;npm&lt;/code&gt; and used with a build process...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install @creativecommons/vocabulary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...or used directly in the browser inside &lt;code&gt;script&lt;/code&gt; tags.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;
        src=&quot;https://unpkg.com/@creativecommons/vocabulary&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even JS is optional (may break in some cases, horrifying so).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot;
      type=&quot;text/css&quot;
      href=&quot;https://unpkg.com/@creativecommons/vocabulary/vocabulary.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;&lt;p&gt;Of course I'm not going to hype you up and leave you hanging! Here's a pen to
show you what's possible. Actually, since the pen uses the UMD version, what it
shows is the lower end of what's possible.&lt;/p&gt;
&lt;p&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-default-tab=&quot;result&quot; data-user=&quot;dhruvkb&quot; data-slug-hash=&quot;dxRJYV&quot; data-preview=&quot;true&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;CC Vocabulary UMD demo&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/dhruvkb/pen/dxRJYV/&quot;&gt;
  CC Vocabulary UMD demo&lt;/a&gt; by Dhruv Bhanushali (&lt;a href=&quot;https://codepen.io/dhruvkb&quot;&gt;@dhruvkb&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;h4 id=&quot;contributions-invited&quot;&gt;Contributions invited&lt;/h4&gt;&lt;p&gt;Also to make the repository friendlier to incoming developers a number of issues
have been dug out, reported and labelled. This provides incomers, like myself
three months ago, a channel to familiarise themselves with the codebase well
before Outreachy and the next Summer of Code.&lt;/p&gt;
&lt;h4 id=&quot;gsoc-work-product&quot;&gt;GSoC work product&lt;/h4&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;contributions.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;That's over half a million changes!&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/&quot;&gt;https://github.com/creativecommons/cc-vocabulary/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commits:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/commits/master&quot;&gt;https://github.com/creativecommons/cc-vocabulary/commits/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issues:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/issues&quot;&gt;https://github.com/creativecommons/cc-vocabulary/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributors:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/graphs/contributors&quot;&gt;https://github.com/creativecommons/cc-vocabulary/graphs/contributors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The proposal listed a number of components to be developed as a part of the 
program. Over twice that number of components have been implemented.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In other news...&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;search-is-largely-integrated-with-vocabulary&quot;&gt;🎉 Search is largely integrated with Vocabulary!&lt;/h3&gt;&lt;p&gt;This was the subordinate goal of my Summer of Code proposal. Surprisingly
enough, once the components were ready it was only a matter of finding code in
CC Search's frontend and swapping it out with Vocabulary components. &lt;em&gt;Oh, the
tests have pained me so.&lt;/em&gt; Literally every single test broke down and had to be
manually updated.&lt;/p&gt;
&lt;p&gt;The end result of the toil under the guidance and review of &lt;a href=&quot;http://localhost:5000/blog/authors/brenoferreira/&quot;&gt;Breno
Ferreira&lt;/a&gt; is a search
experience that &lt;strong&gt;feels polished&lt;/strong&gt; and &lt;strong&gt;looks beautiful&lt;/strong&gt; and &lt;strong&gt;works
elegantly&lt;/strong&gt;. It also enables another &lt;strong&gt;half a billion&lt;/strong&gt; people to use the
platform and sets the groundwork to take that number higher.&lt;/p&gt;
&lt;p&gt;The bundle size is lower and code manageability is higher thanks to decoupling
of low level components from the high level experience. Can you ask for more?
How about more consistent icons?&lt;/p&gt;
&lt;p&gt;The least I can do is attach screenshots of the new CC Search to give you a 
sneak peek into what Creative Commons apps, starting with Search of course, will
look like in the future. These are screenshots, &lt;em&gt;not mockups&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;sneak-peek&quot;&gt;Sneak peek&lt;/h4&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;homepage.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;A very minor change to the homepage...&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;img src=&quot;homepage_hi.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;...is a door to a new world of possibilities.&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;Yes, CC Search has largely also been translated to Hindi, making it accessible
to the Internet-savvy chunk of the half a billion people who speak the language
in the country with the second-largest Internet enabled populace (first if you
factor in democracy and freedom).&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;about.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;Statistics were never this beautiful...&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
    &lt;img src=&quot;collections.png&quot;/&gt;
    &lt;figcaption&gt;
      &lt;em&gt;...and neither were collections.&lt;/em&gt;
    &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;These pages too have been internationalised.&lt;/p&gt;
&lt;p&gt;Did you spot the new icons? I made a choice to adopt Font Awesome for Vocabulary
as it is a modern, scalable and lightweight alternative to finding a cohesive
set of icons from the trove of the Noun Project and bundling them ourselves.
Plus Font Awesome provides Vue components! What's not to like.&lt;/p&gt;
&lt;h4 id=&quot;status&quot;&gt;Status&lt;/h4&gt;&lt;p&gt;I'm not sure if there is enough time in the GSoC period for the integration PR
to be reviewed and merged but I'm not going anywhere and neither are you. You
can follow the integration as it happens
&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're enthusiastic you can clone the branch and run the setup on your 
machine. Experience it for yourself, how about that?&lt;/p&gt;
&lt;h4 id=&quot;gsoc-work-product&quot;&gt;GSoC work product&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Repository:&lt;/strong&gt; &lt;a href=&quot;https://github.com/dhruvkb/cccatalog-frontend/&quot;&gt;https://github.com/dhruvkb/cccatalog-frontend/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PR&lt;/strong&gt;: &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413/&quot;&gt;https://github.com/creativecommons/cccatalog-frontend/pull/413/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Commits:&lt;/strong&gt; &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413/commits&quot;&gt;https://github.com/creativecommons/cccatalog-frontend/pull/413/commits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The proposal aimed to replace a lot of indigenous components with Vocabulary
counterparts. Internationalisation and a consistent icon system are just me
going above and beyond.&lt;/p&gt;
&lt;h3 id=&quot;tl;dr?&quot;&gt;😴 TL;DR?&lt;/h3&gt;&lt;p&gt;Summarising, &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;CC Vocabulary&lt;/a&gt;
is now mature and &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/pull/413&quot;&gt;is getting
married&lt;/a&gt; to &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;CC
Search&lt;/a&gt;. GSoC was a successful
matchmaker.&lt;/p&gt;
&lt;h3 id=&quot;postremo&quot;&gt;❤️ Postremo&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&quot;I think... I feel good about it.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GSoC has been a thoroughly refreshing, enriching and educating experience.
Without a shred of doubt I am taking away a lot from this exercise (notably, the
knowledge of the existence of CSS custom properties). My only hope is that I
have given back a comparable amount of output to the community that gave an
outsider like me a chance to work on something this impactful in the long-term.&lt;/p&gt;
&lt;p&gt;I can't wait to continue my journey post-GSoC and see what the core team and
the next batch of interns creates for, and using, Vocabulary.&lt;/p&gt;
&lt;p&gt;GSoC may be over, but &lt;strong&gt;CC and I have a long way to go&lt;/strong&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;letterheart.svg&quot; width=&quot;32&quot;/&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;p&gt;~Signing off, for now~&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week9-10/">
    <title type="text">CC Browser Extension Week 9, 10</title>
    <id>urn:uuid:48a56854-464e-306f-bf36-7e316a0e496e</id>
    <updated>2019-08-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week9-10/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working on my GSoC project that is to make a browser-extension to search CC Licensed content in the public domain by interacting with CC Catalog API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Previous Blogs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-a-gsoc-project/&quot;&gt;CC Browser Extension - A GSoC Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-week5-6/&quot;&gt;CC Browser Extension Week 5, 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-week7-8/&quot;&gt;CC Browser Extension Week 7, 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;work-done&quot;&gt;Work Done&lt;/h3&gt;&lt;p&gt;These weeks were spent on adding bookmarking feature to the extension and writing some unit tests.&lt;/p&gt;
&lt;p&gt;On clicking the bookmark icon, that appears when the image thumbnail is hovered on, the image will be bookmarked. Under the hood, the unique image identifier is saved in the local storage of the extension. The images ids are enough to get all the required image and attribution data needed using the &lt;code&gt;/image/{identifier}&lt;/code&gt; endpoint of &lt;a href=&quot;/blog/entries/cc-browser-extension-week9-10/[https://github.com/creativecommons/cccatalog-api](https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bookmarked images persist even when the extension session terminates. User can view, inspect, delete the bookmarked images in the &lt;em&gt;'Bookmarks'&lt;/em&gt; section. There is also a button to delete all the bookmarks at once.&lt;/p&gt;
&lt;p&gt;To let the users organize and share bookmarks, importing and exporting feature is also added. The buttons to export and import the bookmarks are in the options page. Simple &lt;code&gt;json&lt;/code&gt; files are used for this feature.&lt;/p&gt;
&lt;p&gt;The rest of the time was spent on writing tests for the extension. One positive side-effect of this was cleaner and modular code. Finally, the CircleCi config file was modified to let the tests to run in CI pipeline.&lt;/p&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming Up&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Write more tests.&lt;/li&gt;
&lt;li&gt;Test and fix bugs.&lt;/li&gt;
&lt;li&gt;Modifying webpack config to spit out code for production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out the project on &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github&lt;/a&gt; and join the discussion on &lt;code&gt;#gsoc-browser-ext&lt;/code&gt; channel on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/">
    <title type="text">Visualize CC Catalog data - data processing part 3</title>
    <id>urn:uuid:f6fc50e8-e571-36b1-8c3d-b8fc1f513c5f</id>
    <updated>2019-08-12T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-3/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part 2 of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;p&gt;Hello! In this post I am going to talk you about the extraction of unique nodes, and links, and the visualization of the force-directed graph with the processed data.&lt;/p&gt;
&lt;h3 id=&quot;nodes-and-links-generation&quot;&gt;Nodes and links generation&lt;/h3&gt;&lt;p&gt;The nodes and links will be visualized using &lt;a href=&quot;https://github.com/vasturiano/force-graph&quot;&gt;force-graph&lt;/a&gt;. I spoke about this library in my blog post: &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/&quot;&gt;Visualize CC Catalog data&lt;/a&gt;. My first step is to use the data to generate the json file that it needs. Force-graph needs to be passed a single json file with two lists: one containing information about the nodes, and the other containing the links. They are both arrays of dictionaries. I have huge input files (and over 100 million unique domains in total). So in Pandas I need to build a DataFrame of a tsv input file using chunks. The challenge I am facing now is to generate a list of unique nodes. Here is why this is a challenge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In order to build the nodes list, I need to think aboutwhat are the source and target nodes.&lt;/li&gt;
&lt;li&gt;Take into account a source node can also be a target node.&lt;/li&gt;
&lt;li&gt;I can delete duplicate entries per column, but as I process the data in chunks, my scope is limited to the chunk size.&lt;/li&gt;
&lt;li&gt;A domain can be repeated not only within a chunk, but in different chunks too.&lt;/li&gt;
&lt;li&gt;Source and target must have licensed content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So as you can see, dealing with duplications is not that trivial when you have a lot of data. Next what I tried was to analyze smaller files, in order to be able to keep the data in memory in a single DataFrame. So for each TSV file I had before, now I have several small TSV files. This may extend the data analysis, but it can smooth the coding complexity.&lt;/p&gt;
&lt;p&gt;I first started by formatting the data into source and target columns to generate the unique nodes for the graph. I iterate through each row of the current DataFrame I have (the one with provider_domain, cc_licences,links column, etc), and by reading the &lt;em&gt;links&lt;/em&gt; column, I load the json of each row. For each key in the json, I create a new row with provider_domain as source, they key as target, and the value of the key as a &lt;em&gt;value&lt;/em&gt;  feature. I append that new row to a new DataFrame. I build a new row each time I read a line, so I have a DataFrame with all the links of a single provider_domain. When I finish iterating over the rows, I convert the DataFrames to list and save the output. That is how I get a new DataFrame containing all the existing links of the graph, with source, target and value columns. Yeah!&lt;/p&gt;
&lt;p&gt;The visualization I get is the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph with the real data. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;graph-2.png&quot; alt=&quot;Force-directed graph with the real data&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Force-directed graph with the real data. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;&lt;p&gt;As you could visualize before, there are a lot of lonely nodes (nodes with no neighbors). My thoughts are to filter out the provider_domains that do not have a minimum quantity of licensed content. I will try with different values, starting form 100 to 1000, and see how the graph changes. I believe a lot of those nodes do not have a relevant amount of licensed content, so with this filter rule they will be removed.
The other tasks left to do are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visualization of the pie chart&lt;/li&gt;
&lt;li&gt;Development or modification of pruning/filtering rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/saltstack-host-classification/">
    <title type="text">Host Classification with SaltStack</title>
    <id>urn:uuid:7f23aa93-d5a3-354d-8363-13dc2487fe78</id>
    <updated>2019-07-31T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/saltstack-host-classification/" />
    <author>
      <name>TimidRobot</name>
    </author>
    <content type="html">&lt;p&gt;Within infrastructure as code, as with all programming, there is a goal to
reduce redundancy as much as possible. With configuration management,
duplicated configurations can quickly lead to confusion and unexpected states.
One of the key ways to reduce configuration duplication is robust host
classification.&lt;/p&gt;
&lt;h3 id=&quot;minion-classification&quot;&gt;Minion Classification&lt;/h3&gt;&lt;p&gt;As this post is about SaltStack, the terms &quot;minion classification&quot; for &quot;host
classification&quot; and &quot;minion&quot; for &quot;host&quot; are used. With Puppet, &quot;node
classification&quot; and &quot;node&quot; would be used.&lt;/p&gt;
&lt;p&gt;Minion classification consists of rules that determine what a minion is and
which states (or configurations) should be applied to it. Good minion
classification removes or minimizes the necessity of explicitly assigning
configurations to a minion. Our goal is for the computer to do as much of the
work as possible.&lt;/p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;&lt;p&gt;Minions are added and configured from the primary salt server (called the
salt-master) with the following Minion ID schema: &lt;strong&gt;&lt;code&gt;HST__POD__LOC&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;HST&lt;/code&gt;&lt;/strong&gt; is the hostname or role. It indications what services are running
on the host or the role that it serves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;POD&lt;/code&gt;&lt;/strong&gt; is the pod or group. It indicates the logical grouping of the
host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LOC&lt;/code&gt;&lt;/strong&gt; is the location. It indicates where the host is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wordpress__prod__us-east-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wordpress__stage__us-east-2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Minion ID parts are matched against the following list. SaltStack pillar
data, like Apache2, uses a last declared wins model. The following list is
organized from least-specific to most-specific:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1_LOC&lt;/code&gt; (location)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2_POD&lt;/code&gt; (pod/group)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3_HST&lt;/code&gt; (host/role)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4_POD__LOC&lt;/code&gt; (pod/group and location)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5_HST__POD&lt;/code&gt; (host/role and pod/group)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using our Minion ID examples above, this allows configuration data to be
specified for both shared data (ex. WordPress security settings that should be
applied to all WordPress hosts/roles) and specific data (ex. Let's Encrypt
TLS/SSL settings).&lt;/p&gt;
&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The only grain which can be safely used is &lt;code&gt;grains['id']&lt;/code&gt; which contains the
Minion ID.&lt;/em&gt; (&lt;a href=&quot;https://docs.saltstack.com/en/latest/faq.html#is-targeting-using-grain-data-secure&quot;&gt;FAQ Q.21&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It is important to rely &lt;em&gt;only&lt;/em&gt; on the Minion ID as all other grains can be
manipulated by the client. This means a compromised client could change its
grains to collect secrets if a dedicated grain (ex. &lt;code&gt;role&lt;/code&gt;) was used for minion
classification.&lt;/p&gt;
&lt;h3 id=&quot;imperfect-work-in-progress&quot;&gt;Imperfect Work in Progress&lt;/h3&gt;&lt;p&gt;This implementation has proven to be robust and helpful. However, there is
still room for improvement. For example, I will probably refactor &lt;code&gt;HST&lt;/code&gt; to
&lt;code&gt;ROLE&lt;/code&gt; and &lt;code&gt;POD&lt;/code&gt; to &lt;code&gt;GRP&lt;/code&gt; for added clarity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback and development is welcomed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime&quot;&gt;creativecommons/sre-salt-prime&lt;/a&gt; repository is open
source.&lt;/p&gt;
&lt;p&gt;This host classification is also documented within it: &lt;a href=&quot;https://github.com/creativecommons/sre-salt-prime/blob/master/docs/Host_Classification.md&quot;&gt;sre-salt-prime/Host_Classification.md at master&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/">
    <title type="text">Visualize CC Catalog data - data processing part 2</title>
    <id>urn:uuid:4766028d-0afd-3efb-8e6b-bd3bc0f5cc00</id>
    <updated>2019-07-26T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing-2/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;This is a continuation of my last blog post about the data processing part of the CC-data catalog visualization project. I recommend you to read that &lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing/&quot;&gt;last post&lt;/a&gt; for a better understanding of what I'll explain here.&lt;/p&gt;
&lt;h3 id=&quot;the-data&quot;&gt;The data&lt;/h3&gt;&lt;p&gt;Every dataset needs cleasing and pre processing operations before their analysis. In order to implement validations, I have to know first with what kind of inconsistencies I would deal with. Here are some interesting insights about the dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are several cases where the provider_domain has not referenced a correct cc_license path. We might say then, that not everybody has a clear understading of how to give CC license attributions correctly.&lt;/li&gt;
&lt;li&gt;I found a case where the links json was malformed. It had a huge paragraph as key (instead of a domain). I wasn't expecting something like that hehe.&lt;/li&gt;
&lt;li&gt;There are both types of entries, a provider domain with a small image quantity and a lot of links, and with a huge amount of images but few links. Some of the domains with a lot of images belong to online shops or news websites.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from the above, I have had to face with almost empty lines(meaning just a single column had information), columns bad separated (not a single but more than one tab between the columns), and some other usual problems of a real and non perfect dataset. I have made validations to catch these inconsistencies.&lt;/p&gt;
&lt;h3 id=&quot;data-aggregation&quot;&gt;Data aggregation&lt;/h3&gt;&lt;p&gt;It is needed to aggregate the data by provider_domain, in order to get the complete information of every node. Aggregating the images column is simple, as I only have to sum the values in that column. Now the links column is a little bit tricky to be aggregated. We have to remember that this field contains dictionaries, with domains as keys and the times they have been referenced to as values. So for aggregating this column, I need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an empty dictionary&lt;/li&gt;
&lt;li&gt;Loop through every key and save it&lt;/li&gt;
&lt;li&gt;If I face with a key that is already in the dictionary, just sum the value that I currently hold to the existing value in the dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, I have to extract creativecommons from the final links dictionary, and put the value into another column, called _Licences_qty_. This is because the quantity of links to &lt;a href=&quot;/blog/entries/cc-datacatalog-data-processing-2/creativecommons.org&quot;&gt;creativecommons.org&lt;/a&gt; can tell us how many licenses the provider_domains uses.&lt;/p&gt;
&lt;p&gt;We also need to aggregate the licences column. The goal is to have a data structure that contains the licenses types the provider_domain uses, and to know how many licenses per each license type the provider_domain has.
To achieve this, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an empty dictionary of licences&lt;/li&gt;
&lt;li&gt;For each license, create a tuple (license_name,version), which will be a key in the dictionary&lt;/li&gt;
&lt;li&gt;Check if the key exists in the dictionary. If it doesn't, the key is added, with an initial value of 1, to the dictionary.&lt;/li&gt;
&lt;li&gt;If the key exists, increment the value in 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end, we will have rows like the following:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;row.png&quot; alt=&quot;Example row of the processed dataset&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Example row, with data aggregated. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;considerations-and-future-challenges&quot;&gt;Considerations and future challenges&lt;/h3&gt;&lt;p&gt;I mentioned before that there are provider domains with a lot of images and a few links, and vice versa. As I still have to prune and filter data, I can develop a rule to exclude the domains that are not relevant to the graph. This relevance can be determined by the quantity of images and/or links. My thought with the rules are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exclude domains that have a lot of images but few links (less than 20 links).&lt;/li&gt;
&lt;li&gt;Exclude domains that have few images(less than 100) and few links (less than 20)&lt;/li&gt;
&lt;li&gt;Exclude domains that have no links (is not a targeted node).&lt;/li&gt;
&lt;li&gt;Exclude domains that are social networks (Facebook, Instagram, Twitter), as they might not give relevant insights. Most of the references to these SN's are found because the provider domain gives the user the option to share a content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thresholds for the quantity of images and links are my intuitions from having seen the data and manually checking some provider domains. If it is possible I could validate it with some data analysis (checking average, maximum and minimum values of the columns).&lt;/p&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Extraction of unique nodes, and links.&lt;/li&gt;
&lt;li&gt;Visualization with the data. &lt;/li&gt;
&lt;li&gt;Development or modification of pruning/filtering rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/2019-07-24-cc-search-wp-plugin/">
    <title type="text">Easy search and use of CC-licensed images for WordPress</title>
    <id>urn:uuid:ab122e6c-a0e8-39cc-a0de-b0d5f2c444cc</id>
    <updated>2019-07-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/2019-07-24-cc-search-wp-plugin/" />
    <author>
      <name>lenasterg</name>
    </author>
    <content type="html">&lt;h4 id=&quot;inspiration-and-idea-for-the-wordpress-plugin&quot;&gt;Inspiration and idea for the WordPress plugin&lt;/h4&gt;&lt;p&gt;Back in May, I read a blog post about the new Creative Commons search tool CC Search. My colleagues in CTI &lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; and I were fascinated by its searching power.
Inspired by this new CC tool, we began thinking, how we could use it, into the Greek School Network’s&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; blogging platform &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; - a WordPress multisite installation, free for all Greek teachers, students, and Greek school units.&lt;/p&gt;
&lt;p&gt;We decided to make a WordPress plugin, which would “harvest” the images from the Creative Commons Catalog API, in a similar way &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; does, but without the need for the user to leave the WordPress post editor. The plugin should allow the execution of “search, select and import image and CC license data” into the post, while the author was still in WordPress edit page.&lt;/p&gt;
&lt;h4 id=&quot;our-wordpress-plugin&quot;&gt;Our WordPress plugin&lt;/h4&gt;&lt;p&gt;After a while, our plugin was ready. Its temporary name is “WP CC Search plugin”. It is a WordPress plugin for searching millions of CC-licensed images while the user is still in the post edit page. He/she can select a CC licensed image and insert it into the post content or set as post-featured image very quickly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/01.png&quot; alt=&quot;Plugin screenshot 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;The plugin’s features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Works in WordPress editor and add a button above the content text area and into the “Add Media” pop-up window.&lt;/li&gt;
&lt;li&gt;Via a pop-up window, allows searching through millions of images using Creative Commons Catalog API power.&lt;/li&gt;
&lt;li&gt;Allows filtering by a provider&lt;/li&gt;
&lt;li&gt;Paginated results&lt;/li&gt;
&lt;li&gt;Quick insert original image or thumbnail with a link to the image URL&lt;/li&gt;
&lt;li&gt;Use image as a featured image for the blog post&lt;/li&gt;
&lt;li&gt;WPML compatible&lt;/li&gt;
&lt;li&gt;Multisite compatible&lt;/li&gt;
&lt;li&gt;Translation ready (it’s already translated in Greek)&lt;/li&gt;
&lt;li&gt;Tested up to WordPress 5.2 with Classic Editor plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As intended, we already use the plugin in &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;, which hosts more than 50.000 blogs. The plugin is available to all its blogs and users since middle May, who has been using it without any issues reported yet.&lt;/p&gt;
&lt;h4 id=&quot;how-it-works&quot;&gt;How it works&lt;/h4&gt;&lt;p&gt;The plugin needs the WordPress &lt;a href=&quot;https://wordpress.org/plugins/classic-editor/&quot;&gt;Classic Editor&lt;/a&gt; plugin in order to work for WP 5+.&lt;/p&gt;
&lt;p&gt;After the plugin’s activation, when the user writes a post, an &lt;strong&gt;“Image with CC licence”&lt;/strong&gt; button is added above the post editor area and as an option into the “Add Media” pop-up window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/02.png&quot; alt=&quot;Plugin screenshot 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;By pressing the button, a pop-up window allows the user to search using Latin characters for an image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/03.png&quot; alt=&quot;Plugin screenshot 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;The user can browse the returned images, preview an image and its license and adjust the image settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use of thumbnail or original image&lt;/li&gt;
&lt;li&gt;set the image link (if any)&lt;/li&gt;
&lt;li&gt;insert the image into the post or as the featured image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/04.png&quot; alt=&quot;Plugin screenshot 4&quot;&gt;&lt;/p&gt;
&lt;p&gt;After the user selects an image and insert it, into the post, the image code along with its licensing data is pasted into the post body and the user can continue writing the blog post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/2019-07-24-cc-search-wp-plugin/05.png&quot; alt=&quot;Plugin screenshot 5&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;some-technical-details&quot;&gt;Some technical details&lt;/h4&gt;&lt;p&gt;The plugin uses AJAX requests to communicate with &lt;a href=&quot;https://api.creativecommons.engineering&quot;&gt;https://api.creativecommons.engineering&lt;/a&gt; and get responses in JSON format.&lt;/p&gt;
&lt;p&gt;Only 2 AJAX requests are sent to &lt;a href=&quot;https://api.creativecommons.engineering&quot;&gt;https://api.creativecommons.engineering&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://api.creativecommons.engineering/statistics/image?format=json&quot;&gt;https://api.creativecommons.engineering/statistics/image?format=json&lt;/a&gt;, for getting the providers list. Then the JSON response is used as select options, for the provider’s dropdown menu.&lt;/li&gt;
&lt;li&gt;A call to &lt;a href=&quot;https://api.creativecommons.engineering/image/search&quot;&gt;https://api.creativecommons.engineering/image/search&lt;/a&gt; with the necessary parameters for searching for images based on the given words and the selected provided.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The JSON results, are then transformed via jQuery to images and show up into the popup window. When the user selects an image, jQuery creates a complete HTML &lt;div&gt; tag with all the image info and auto add it into the post editor area or executed the WordPress code to use in as featured image.&lt;/p&gt;
&lt;h4 id=&quot;still-to-do&quot;&gt;Still to do&lt;/h4&gt;&lt;p&gt;There are still some things that we want to add/change into the plugin and any help on building them is welcome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a different plugin name :-). We believe that the plugin’s name should change since it is not an “official” CC commons plugin.&lt;/li&gt;
&lt;li&gt;Currently, the plugin needs the Classic Editor plugin in order to work for WP 5+. A main goal is to make it Gutenberg compatible. &lt;/li&gt;
&lt;li&gt;Add Multiple images select support&lt;/li&gt;
&lt;li&gt;Add Multi-select options for filtering: providers&lt;/li&gt;
&lt;li&gt;Add select options for filtering: licenses, creator&lt;/li&gt;
&lt;li&gt;Find an icon for the 'Image via CC Search' editor button&lt;/li&gt;
&lt;li&gt;Add plugin’s Info page&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;code-and-test-site&quot;&gt;Code and test site&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;You can find and fork the plugin’s code at: &lt;a href=&quot;https://github.com/lenasterg/wp_ccsearch&quot;&gt;https://github.com/lenasterg/wp_ccsearch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can test the plugin functionality at &lt;a href=&quot;http://users.sch.gr/stergatu/wordpress/&quot;&gt;http://users.sch.gr/stergatu/wordpress/&lt;/a&gt; by login via &lt;a href=&quot;http://users.sch.gr/stergatu/wordpress/wp-login.php&quot;&gt;http://users.sch.gr/stergatu/wordpress/wp-login.php&lt;/a&gt; as username: &lt;code&gt;testuser&lt;/code&gt; password: &lt;code&gt;testuser&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;credits&quot;&gt;Credits&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;The plugin is inspired and based on the &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;https://search.creativecommons.org/&lt;/a&gt; and it couldn’t be possible without the Creative Commons Catalog API &lt;a href=&quot;https://api.creativecommons.engineering/#tag/image&quot;&gt;https://api.creativecommons.engineering/#tag/image&lt;/a&gt; which is the engine.&lt;/li&gt;
&lt;li&gt;Most of the plugin's code is based on the WP Pexels &lt;a href=&quot;https://wordpress.org/plugins/wp-pexels/&quot;&gt;https://wordpress.org/plugins/wp-pexels/&lt;/a&gt; code by WPclever.net&lt;/li&gt;
&lt;li&gt;Pointer's code is based on &lt;a href=&quot;https://code.tutsplus.com/articles/integrating-with-wordpress-ui-admin-pointers--wp-26853&quot;&gt;https://code.tutsplus.com/articles/integrating-with-wordpress-ui-admin-pointers--wp-26853&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;more-about-us&quot;&gt;More about us&lt;/h4&gt;&lt;p&gt;&lt;span id=&quot;footnote-1&quot;&gt;&lt;/span&gt;&lt;strong&gt;[1] CTI - Greek School Network and Networking Technologies Directorate&lt;/strong&gt;&lt;br&gt;
Our main activities in Greek School Network and Networking Technologies Directorate (GSN-NTS) (&lt;a href=&quot;http://nts.cti.gr&quot;&gt;http://nts.cti.gr&lt;/a&gt;) of Computer Technology Institute and Press “Diophantus” (CTI) are the design, implementation, and support of network infrastructures and Internet services. Through its involvement in pioneer National and European research and development projects, GSN-NTS has a major role in the development of network infrastructures and services, and Internet services as well in Greece, especially those concerning school networks and ICT infrastructures at schools.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;footnote-2&quot;&gt;&lt;/span&gt;&lt;strong&gt;[2] Greek School Network (&lt;a href=&quot;https://www.sch.gr/&quot;&gt;https://www.sch.gr/&lt;/a&gt;)&lt;/strong&gt;&lt;br&gt;
&lt;a href=&quot;https://www.sch.gr/&quot;&gt;https://www.sch.gr/&lt;/a&gt; is the national network of the Ministry of Education and Religious Affairs which safely interconnects all schools of Primary and Secondary education, including educational units abroad, services and entities supervised by the Ministry of Education and Religious Affairs at central and regional level, service providers of lifelong learning, students, teaching staff, other educators and other entities of Ministry of Education and Religious Affairs (&lt;a href=&quot;https://www.minedu.gov.gr/&quot;&gt;www.minedu.gov.gr&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;footnote-3&quot;&gt;&lt;/span&gt;&lt;strong&gt;[3] &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
The plugin was originally developed for &lt;a href=&quot;https://blogs.sch.gr&quot;&gt;https://blogs.sch.gr&lt;/a&gt;, which is the free blogging platform for all Greek teachers, students, and school units. The blogs.sch.gr is a service of Greek School Network&lt;strong&gt;&lt;sup&gt;&lt;a href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; (&lt;a href=&quot;https://www.sch.gr/en&quot;&gt;https://www.sch.gr/en&lt;/a&gt;). It hosts more than 50.000 blogs and users. It is built and maintained by the Greek School Network and Networking Technologies Directorate of CTI.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-second-phase/">
    <title type="text">Creative Commons WordPress Plugin Second Phase</title>
    <id>urn:uuid:515b418c-a3a9-33d3-8f03-54a5b317c2b6</id>
    <updated>2019-07-20T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-second-phase/" />
    <author>
      <name>ahmadbilaldev</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working with my mentor &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot&lt;/a&gt; on Creative Commons WordPress Plugin in GSoC 2019. It is basically an attribution tool, allowing users to attribute their content and include a CC license on their WordPress website. The second phase of the project is now ending, and the plugin has a stable version ready. Following is a summary of the work accomplished during this phase.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Week 5:&lt;/strong&gt; Added customization settings for Gutenberg blocks for backend and front end.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 6:&lt;/strong&gt; Fixed and closed 17 existing issues to pave way for a stable release.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 7-8:&lt;/strong&gt; Prepped the plugin for the release to WordPress.org directory. Started working on the support to use the new license chooser. For now, removing the integrated chooser (old Partner Interface) and linking to the new chooser is our strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;release-of-v2019.7.1&quot;&gt;Release of v2019.7.1&lt;/h3&gt;&lt;p&gt;We have released the latest stable version of the plugin. &lt;code&gt;v2019.7.1&lt;/code&gt; is out and tagged in the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons/releases&quot;&gt;wp-plugin-creativecommons repository&lt;/a&gt;. Given that a stable release is available, we have submitted it to &lt;a href=&quot;https://en-nz.wordpress.org/plugins/&quot;&gt;WordPress.org plugin directory&lt;/a&gt;. As soon as their team approves it, the plugin will be available to install for all WordPress users, which is substantial.&lt;/p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What's next&lt;/h3&gt;&lt;p&gt;Although the current implentation does the job, but we want it to use new &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;CC License Chooser&lt;/a&gt; in the future. The existing approach uses an integrated modal of &lt;a href=&quot;https://creativecommons.org/choose/?partner={partner}&quot;&gt;Partner Interface&lt;/a&gt; from 2014. So, currently I am re-writing and re-designing the plugin settings to use the new and improved chooser without integrating it. Other upcoming additions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a button to copy license and author information for content sharing.&lt;/li&gt;
&lt;li&gt;CC Search integration.&lt;/li&gt;
&lt;li&gt;Changes in design and features.&lt;/li&gt;
&lt;li&gt;Improve the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more, see the &lt;a href=&quot;https://github.com/creativecommons/wp-plugin-creativecommons&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any feedback or suggestions, let us know in the discussion on &lt;code&gt;#cc-dev-wordpress&lt;/code&gt; Slack channel. Looking forward!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-the-main-course/">
    <title type="text">CC Vocabulary: the main course</title>
    <id>urn:uuid:7bfdb6e1-17ba-39b2-9908-8f9e44eea3f7</id>
    <updated>2019-07-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-the-main-course/" />
    <author>
      <name>dhruvkb</name>
    </author>
    <content type="html">&lt;p&gt;A little over seven weeks ago we initialised CC Vocabulary. It was a simple recipe, a set of components for other apps to
use for consistency and ease of development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Week 1:&lt;/strong&gt;    we assembled the ingredients: &lt;em&gt;Vue CLI, Vue Styleguidist, Theo, Lodash, Font Awesome&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 2:&lt;/strong&gt;    we cleaned up the kitchen: &lt;em&gt;Dockerised our project and set up CI/CD&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Week 3:&lt;/strong&gt;    we ground spices: &lt;em&gt;developed and incorporated design tokens&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weeks 4-5:&lt;/strong&gt; we cooked appetizers: &lt;em&gt;our collection of simple Elements&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weeks 6-7:&lt;/strong&gt; we cooked the main dishes: &lt;em&gt;our collection of very functional Patterns and Layouts&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Last week:&lt;/strong&gt; we garnished these dishes: &lt;em&gt;a splash of styling for the &lt;a href=&quot;https://opensource.creativecommons.org/cc-vocabulary&quot;&gt;styleguide&lt;/a&gt; itself&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Today, main course is served, &lt;em&gt;hot&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Grab your forks, knives and spoons for today we announce that CC Vocabulary is now very stable, has a lot of valuable,
nay indispensable features such as mobile responsiveness and i18n and, best of all, embodies the vibrancy of Creative
Commons in its versatile customisability and its collection of 36 hues and 8 greyscale tones usable across dozens of
elements and patterns.&lt;/p&gt;
&lt;p&gt;Based on the facts that fewer and fewer changes are being made to the core functionality with every commit, that there
is a definite coding and nomenclature scheme, that desirable consistency has been achieved across its myriad of
offerings and that a number of features have been frozen, I am very confident that CC Vocabulary is nearing its public
release and into version &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we head into the next phase of Vocabulary, i.e. using it in our very own apps, here is a comprehensive look on where
we stand right now in terms of what the library provides. The goal of this exercise is to determine what elements and/or
patterns have been overlooked and to determine additional functionality that may be required in some of them. Since
every component can be customised tweaked and extended, an interactive exploration is preferable but to get you hyped up
for the meal, here are some pictures of what to expect.&lt;/p&gt;
&lt;p&gt;If you are a developer of CC applications, please take the time to visit the styleguide and play around with these
components so that you may identify shortcomings or ideas for improvement. If you are an explorer, do so for the thrill
of seeing a design system take shape. Any and all contributions are welcome in this crucial moment as our beloved
brainchild comes of age.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presenting to you our special menu of Vue components.&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;2&quot;&gt;&lt;h3&gt;Tokens&lt;/h3&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Colors&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;colors.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Fonts&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;fonts.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Spaces&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;spaces.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;2&quot;&gt;&lt;h3&gt;Elements&lt;/h3&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Button&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;button.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;InputField&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;inputfield.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;SelectField&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;selectfield.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Heading&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;heading.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Paragraph&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;paragraph.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;LicenseBadge&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;licensebadge.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;LicenseIconography&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;licenseiconography.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ProgressBar&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;progressbar.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Shield&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;shield.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;2&quot;&gt;&lt;h3&gt;Layouts&lt;/h3&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Container&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;container.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Grid&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;grid.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Table&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;table.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;2&quot;&gt;&lt;h3&gt;Patterns&lt;/h3&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Header&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;header.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Footer&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;footer.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Locale&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;locale.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Hello&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;hello.png&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th colspan=&quot;2&quot;&gt;&lt;h3&gt;Templates&lt;/h3&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Index&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;orange.png&quot; onclick=&quot;this.src = 'green.png'&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What's next&lt;/h3&gt;&lt;p&gt;There are a number of components under construction right now such as cards and social media buttons. They will be
published on the styleguide very soon. After these, the final month, phase III of of the project's GSoC term will be
spent continuously polishing the project to suit the needs of all CC apps as discovered during the integration with
CC Search as mentioned by &lt;a href=&quot;/blog/authors/brenoferreira&quot;&gt;Breno Ferreira&lt;/a&gt; in the 'Next steps' in his post on
&lt;a href=&quot;/blog/entries/cc-search-redesign/&quot;&gt;CC Search Redesign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In keeping with the culinary theme of this post, think of it as sweet sweet dessert.&lt;/p&gt;
&lt;h3 id=&quot;closing-note&quot;&gt;Closing note&lt;/h3&gt;&lt;p&gt;In closing, I would like to thank my GSoC mentor Hugo Solar as always for always being present to help and refer me to
documentation that I would likely never have found myself. Also I extend thanks to Kriti Godey for regularly keeping
in touch and directing me to the right people to contact whenever in difficulty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CC Vocabulary is for, by, inspired from and due to the diverse and active Creative Commons community.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;oh-and-one-more-thing...&quot;&gt;Oh and one more thing...&lt;/h3&gt;&lt;p&gt;I buried an easter egg inside this article indicative of the fun nature of the library.
See if you can find it. &lt;em&gt;Looking into the source code is cheating.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See you in two weeks with more updates (... and the aforementioned dessert).&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week7-8/">
    <title type="text">CC Browser Extension Week 7, 8</title>
    <id>urn:uuid:4d47a6bc-b015-3c45-8fd8-7b510b9a3b5f</id>
    <updated>2019-07-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week7-8/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working on my GSoC project that is to make a browser-extension to search CC Licensed content in the public domain by interacting with CC Catalog API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Previous Blogs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-a-gsoc-project/&quot;&gt;CC Browser Extension - A GSoC Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.creativecommons.org/blog/entries/cc-browser-extension-week5-6/&quot;&gt;CC Browser Extension Week 5, 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;work-done&quot;&gt;Work Done&lt;/h3&gt;&lt;p&gt;A couple of major features were added to the browser extension these weeks like image Info and attribution preview and options UI. Also, the extension now has dark mode :)&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;home-light.png&quot; alt&quot;CC Browser Extension Screenshot&quot; height=500 /&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot;&gt;CC Browser Extension Welcome Screen (light)&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;home-dark.png&quot; alt&quot;CC Browser Extension Screenshot&quot; height=500 /&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot;&gt;CC Browser Extension Welcome Screen (dark)&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now, when the user clicks on the image thumbnail, a popup with image information (like title, creator link, license, and provider links), attribution (both rich text and HTML version) and social media share links opens.&lt;/p&gt;
&lt;p&gt;We also tried to figure out a way to let users download the images and attribute the creator with the least possible clicks. Right now there are two user-flows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the users need only one image, they can press the &lt;code&gt;Download Image&lt;/code&gt; button and copy the desired attribution to the clipboard.&lt;/li&gt;
&lt;li&gt;If they need to download multiple images in a single session, they can  press &lt;code&gt;Download Image and Attribution&lt;/code&gt;. This will download both versions (rich text and HTML) of attribution in a text file of the same name as the image file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;info-light.png&quot; alt&quot;CC Browser Extension Screenshot&quot; height=500 /&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot;&gt;CC Browser Extension Image Info/Attribution popup(light)&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;info-dark.png&quot; alt&quot;CC Browser Extension Screenshot&quot; height=500 /&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot;&gt;CC Browser Extension Image Info/Attribution popup(dark)&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;
These workflows work perfectly on chrome. Whereas, Firefox prompts the user to confirm the download with a popup (if they have not already set a default option) and this results in termination of the browser-extension session. So, the purpose of the second workflow of letting the user continue the session while also downloading the images fails here. I also had a discussion about this with the mentors and we brainstormed some possible solutions. I have written about a possible solution in the 'Coming Up' section below.&lt;/p&gt;
&lt;p&gt;I also added an options page to the extension which will open in a new tab and the user can set default filters here. So, now they don't have to apply the filters that they often use again and again for every session.&lt;/p&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming Up&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Add a bookmark feature. A lot of the users may want to save multiple images for later to check out. I think this might also provide a better solution to the problem discussed above.&lt;/li&gt;
&lt;li&gt;Test and fix bugs.&lt;/li&gt;
&lt;li&gt;Improve documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out the project on &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github&lt;/a&gt; and join the discussion on &lt;code&gt;#gsoc-browser-ext&lt;/code&gt; channel on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-search-redesign/">
    <title type="text">CC Search Redesign</title>
    <id>urn:uuid:de03abbc-63b0-3427-a446-750f2eb0e34e</id>
    <updated>2019-07-17T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-search-redesign/" />
    <author>
      <name>brenoferreira</name>
    </author>
    <content type="html">&lt;p&gt;In 2018, Creative Commons started a project to build a new, improved front door to the Commons, and in September 2018, a &lt;a href=&quot;https://creativecommons.org/2018/09/24/big-changes-for-cc-search-beta-updates-released-today/&quot;&gt;beta version of this new CC Search product was released&lt;/a&gt; to the public.
This is what it looked like back then:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/old homepage.png&quot; alt=&quot;old homepage design&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see that the home page is quite convoluted, with a lot of things presented to the user right from the start. And one of the main problems that we identified during some of our usability testing was that it didn't look exactly like a search engine page. Maybe it looked like an image gallery website? Moreover, the &quot;Search the commons...&quot; placeholder text on the search box isn't really clear, unless you are someone familiar with Creative Commons and know what The Commons represents.&lt;/p&gt;
&lt;p&gt;But the biggest problem was that it didn't look at all like any of the other CC pages. So our intuition was that if we linked this on the CC homepage, people would have gone to a different environment that looked and felt different from where they were previously. Unlike in other platforms where every tool follows similar UI patterns under a single visual identity.&lt;/p&gt;
&lt;p&gt;We then decided to do a redesign of the entire CC Search website, addressing the issues described previously, and at the same time, fixing some other usability issues we had already identified. This redesign started around the end of March 2019, and we decided on having it ready in time for the CC Summit at the end of May. That gave us around two months to work on the following items.&lt;/p&gt;
&lt;h2 id=&quot;the-homepage&quot;&gt;The homepage&lt;/h2&gt;&lt;p&gt;We started the redesign of the homepage by removing all that content that was distracting to the user: the background image, top categories, suggested images, therefore having only the essential on the homepage: a search box, a navigation bar, and a footer with some legal information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/new homepage.png&quot; alt=&quot;new homepage design&quot;&gt;&lt;/p&gt;
&lt;p&gt;There's a lot less &quot;noise&quot; on the new homepage. It also follows more of the design you can see on the Creative Commons homepage, &lt;a href=&quot;https://creativecommons.org/&quot;&gt;https://creativecommons.org/&lt;/a&gt;. Initially, we planned to follow the same color scheme, but in internal conversations, we decided to have each of CC's main pages have some colors of its own, so they are more easily recognizable by users. So we dropped the orange from CC's homepage in favour of this light blue you see now.&lt;/p&gt;
&lt;p&gt;We also replaced the &quot;Search the Commons...&quot; placeholder on the search text box for &quot;Search for images...&quot;. As we currently provide only image search, users can more easily and intuitively know what they will be searching for using our tool, instead of hoping to find textbooks or video works in the results because &quot;Search the commons...&quot; could have meant search the full Commons corpus.&lt;/p&gt;
&lt;h2 id=&quot;search-results&quot;&gt;Search results&lt;/h2&gt;&lt;p&gt;Along with the redesign of the overall look and feel of the website and the homepage, we made some improvements to the search results page as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/old search results.png&quot; alt=&quot;old search results page&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the old results are displayed in rows of three columns of fixed width and as a result, many of those image-container boxes have a lot of empty space, except for images that fit into a landscape orientation. If the image is in portrait orientation, or a square resolution, which tends to be a large portion of the total collection, we end up with a lot of unused space.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/new search results.png&quot; alt=&quot;new search results page&quot;&gt;&lt;/p&gt;
&lt;p&gt;The new search results page address this by removing the container box and displaying them in a grid that maximizes the available space for every image, considering its orientation and resolution. Now the user can see more images at a single glance, without having to scroll down as much to see more of the results. We are also able to render the full image in this new design, as opposed to the old one, where we would sometimes scale the images to fit into the rectangle-shaped container box, sometimes cropping out a part of some images.&lt;/p&gt;
&lt;h2 id=&quot;filters&quot;&gt;Filters&lt;/h2&gt;&lt;p&gt;This is a smaller update, changing the location and layout of the search filters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/old filters.gif&quot; alt=&quot;old filters&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/new filters.gif&quot; alt=&quot;new filters&quot;&gt;&lt;/p&gt;
&lt;p&gt;With this new layout, when the select dropdowns are open, they don't hide the other filter components. And they now take less space since they are displayed one next to the other, as opposed to one below the other in the old design.&lt;/p&gt;
&lt;p&gt;There's been some feedback from the community requesting additional filters, such as resolution, image type (such as illustrations, vector graphics, etc..), and a few others. So this is a piece of UI that might change in the future.&lt;/p&gt;
&lt;h2 id=&quot;photo-details&quot;&gt;Photo details&lt;/h2&gt;&lt;p&gt;On this page, what we did was more of a rearrangement and change of layout instead of a full redesign. The information there is still the same, but we added a few things, which, if we still had the same layout, would result in a lot of information cramped and cluttered in a tight space.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/old details.png&quot; alt=&quot;old photo details page&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-redesign/new details.gif&quot; alt=&quot;new photo details page&quot;&gt;&lt;/p&gt;
&lt;p&gt;What we ended up with is a page that makes the photo itself stand out among everything else, and we split distinct pieces of information in separate tabs below the image. This gave us the possibility of adding more information of a particular domain without mixing it with a bunch of unrelated data that distracts the user and results in information confusion.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;&lt;p&gt;Now we're in a phase of making small improvements to this UI standard. Like we said before, there's some recurrent feedback from the community asking for additional image filters, so we're planning to add that soon.&lt;/p&gt;
&lt;p&gt;As part of our Google Summer of Code initiative, we have a project called &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;CC Vocabulary&lt;/a&gt; that aims to build a set of reusable UI styles and components that will be used across all CC websites. Soon this will also be integrated into the CC Search website.&lt;/p&gt;
&lt;p&gt;If you have any feedback, please feel free to send your thoughts and opinions &lt;a href=&quot;https://ccsearch.creativecommons.org/feedback&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you feel like contributing to the CC Search frontend code, please refer to our &lt;a href=&quot;https://opensource.creativecommons.org/contributing-code/&quot;&gt;Contribution guide&lt;/a&gt; and to the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend&quot;&gt;CC Search frontend codebase&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-link-checker/">
    <title type="text">Combating dead links with CC Link Checker</title>
    <id>urn:uuid:50c64e98-b026-3a32-9993-33e3f8f5cd4b</id>
    <updated>2019-07-15T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-link-checker/" />
    <author>
      <name>bhumijgupta</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons provides vast number of public copyright licenses for people who want to enable free distribution of their work. Creative Commons licenses currently covers over &lt;strong&gt;1.6 billion resources&lt;/strong&gt;. These license files are then translated to multiple different languages and ported for &lt;a href=&quot;https://wiki.creativecommons.org/wiki/CC_Ports_by_Jurisdiction&quot;&gt;different jurisdictions&lt;/a&gt; for international usage. People link to the respective licenses along with their licensed works. These license files are in the form of &lt;code&gt;html&lt;/code&gt; files, stored in &lt;a href=&quot;https://github.com/creativecommons/creativecommons.org/tree/master/docroot/legalcode&quot;&gt;creativecommons/creativecommons.org&lt;/a&gt; repo.&lt;/p&gt;
&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h3&gt;&lt;p&gt;These license files contain links to their deeds, license translated to other languages, internal links, and many more. Sometimes due to errors, these files may contain dead / broken links. These broken links leads to incorrect/ incomplete understanding of the license clauses and permissions by the viewer. This may sometime lead to incorrect usage of the licensed resource.&lt;/p&gt;
&lt;p&gt;At the time of writing, the repo contains over &lt;strong&gt;930 files&lt;/strong&gt; with an average of &lt;strong&gt;50 links per file&lt;/strong&gt;. New translation of license deeds are regularly added to the repo and the existing license deeds are also updated frequently. Manually testing these files would take a lot of time. Considering the future additions of licenses, translations and jurisdiction ports, the time required for manual testing would increase drastically.&lt;/p&gt;
&lt;h3 id=&quot;solution-cc-link-checker&quot;&gt;Solution - CC Link Checker&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/creativecommons/cc-link-checker&quot;&gt;CC Link Checker&lt;/a&gt; aims to solve the problem by automating the task of checking links in the license and reporting errorneous and broken links. The python script scrapes all the licenses from the repo and checks the status of the links in the files. The script checks the link for &lt;code&gt;40X&lt;/code&gt; errors, &lt;code&gt;timeout errors&lt;/code&gt; and &lt;code&gt;invalid schema&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;Firstly, let's get the features out of the way. The script uses multiprocessing, taking full use of multiple core processors, has 2 modes of output to CLI - default and verbose, and can also print the error links, summary of the result, and mapping of error links to their URLs of occurence in a file.&lt;/p&gt;
&lt;p&gt;Now let's hop in the nerd train and take a deeper look at development journey.&lt;/p&gt;
&lt;h3 id=&quot;development-journey&quot;&gt;Development Journey&lt;/h3&gt;&lt;p&gt;I started working on the project a month back i.e. 13 Jun. During this journey there were many ups and downs, with some productive and some totally unproductive days. For better understanding, lets look the journey for each week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Week 1
  The approach for the first week was to get the basic functionality done. The script was able to scrape and parse all license and links from the github repo using &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;BeautifulSoup&lt;/code&gt;. I implemented basic memoization to prevent repeated fetching of already fetched links. This step decreased the execution time of the script by several folds. Parallel to the development of the script, I also had to implement Circle-CI. Since it was my first time using a CI service, it took me quite some time to wrap my head around Circle-CI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I learned:&lt;/strong&gt; Circle-CI, pipenv, different docstring formats, different code styles and pep8 recommendations - black and flake8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Week 2
  With the basic functionality completed, now it was time to implement some advance features. This week I worked on implementing &lt;code&gt;--verbose&lt;/code&gt; flag a.k.a. the verbose mode of output to CLI. The verbose mode would help in debugging and give a deeper look into how the python script was working. Also I worked on &lt;code&gt;--output-errors&lt;/code&gt; flag, which would print error links and summary to a file.&lt;/p&gt;
&lt;p&gt;Everything was working fine and ahead of schedule, until a major bug was detected i.e. incorrect conversion of relative to absolute links which resulted in several false positive and false negatives. Fixing this required deducing pattern between the URL on which the license file would be displayed from the license name. This step took a lot of time and pushed project below its schedule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I learned:&lt;/strong&gt; Argument parser and help text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Week 3
  The output file consisted only file name and the errorneous links encountered in the file. As per suggestion of &lt;a href=&quot;https://creativecommons.org/author/kgodey&quot;&gt;Kriti Godey&lt;/a&gt;, I worked on adding the summary section to the file which would include information like total error links, number of unique links along with errorneous link and the page URLs on which it is present (since many page consist the same dead link). The next step was optimizing time taken to run the script.&lt;/p&gt;
&lt;p&gt;Before any optimisation the script took 4+ minutes to run on cloud servers. To reduce the time, I started working on implementing &lt;strong&gt;multithreading&lt;/strong&gt; to reduce the execution time of the script. Implementing multithreading was a big task as it required major refactoring of the code to make it thread safe and compatible with concurrency. After sucessfully refactoring and implementing multithreading, I was able to bring down the execution time to around 3:20.&lt;/p&gt;
&lt;p&gt;As pointed out by my mentor, this came with its own set of problems. Due to python's &lt;code&gt;Global Interpretor Lock(GIL)&lt;/code&gt; no two threads can run parallely inside the python interpretor and the use of global and lock made the code more complex. Also, the performance increase was not significant. This was a setback as my week long efforts had gone in vain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I learned:&lt;/strong&gt; Multithreading, locks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Week 4
  To aid the situation my mentors suggested using &lt;strong&gt;multiprocessing&lt;/strong&gt; instead. I had no former experience with multiprocessing, but thanks to python's beautiful documentations and examples, I was quickly able to get a hold of it. I finished implementing multiprocessing and to my surprise, there was &lt;strong&gt;49.5% performance increase&lt;/strong&gt;. The script now only took 2:27 to complete.&lt;/p&gt;
&lt;p&gt;The major functionality of the script were completed, and the optimisations were done. To improve the code quality and improve documentation, it was time to write &lt;strong&gt;unit tests&lt;/strong&gt; for the script. To write the tests I used &lt;code&gt;pytests&lt;/code&gt; framework which provides several benefits and higher level abstraction over the inbuilt &lt;code&gt;unittest&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I learned:&lt;/strong&gt; Multiprocessing, pytests&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;future-work&quot;&gt;Future work&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Optimising the script for more performace increase&lt;/li&gt;
&lt;li&gt;Making the script more CI-friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CC Link Checker is only possible due to the support and guidance of my mentors &lt;a href=&quot;https://creativecommons.org/author/aldenpage&quot;&gt;Alden Page&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/TimidRobot&quot;&gt;Timid Robot Zehta&lt;/a&gt;, who have been very supportive on every step of the project. Also I would like to thank engineering director &lt;a href=&quot;https://creativecommons.org/author/kgodey&quot;&gt;Kriti Godey&lt;/a&gt; for her continuous support.&lt;/p&gt;
&lt;p&gt;You can follow the project on Github: &lt;a href=&quot;https://github.com/creativecommons/cc-link-checker&quot;&gt;creativecommons/cc-link-checker&lt;/a&gt;. You can also join the discussion on &lt;code&gt;#cc-link-checker&lt;/code&gt; on &lt;a href=&quot;https://opensource.creativecommons.org/community/#slack&quot;&gt;Slack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The project is approaching its completion. Can't wait to see it in production.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Signing off&lt;br&gt;
Bhumij Gupta&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing/">
    <title type="text">Visualize CC Catalog data - data processing</title>
    <id>urn:uuid:ed9e120c-65fb-3c67-8409-d197b629709b</id>
    <updated>2019-07-10T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-data-processing/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to the data processing part of the GSoC project! In this blog post, I am going to tell you about my first thoughts with the real data, and give you some details of the implementation developed so far.&lt;/p&gt;
&lt;h3 id=&quot;data-extraction&quot;&gt;Data Extraction&lt;/h3&gt;&lt;p&gt;Each month, Creative Commons uses &lt;a href=&quot;http://commoncrawl.org/&quot;&gt;Common Crawl&lt;/a&gt; data to find all domains that contain CC licensed content. As you might be guessing, the amount of data is very big, so the CC Catalog data is stored in &lt;a href=&quot;http://commoncrawl.org/the-data/get-started/&quot;&gt;S3&lt;/a&gt; buckets and &lt;a href=&quot;https://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; is used to extract the data from Common Crawl.&lt;/p&gt;
&lt;p&gt;Spark is used again in this project to extract the data, in the form of parquet files, from the buckets. In order to facilitate the analysis and processing of the data, the files are converted to TSV (tab-separated values). The dataset I work on contains the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;provider_domain&lt;/code&gt;: name of the domain with licensed content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cc_license&lt;/code&gt;: path to the Creative Commons license deed used by the &lt;code&gt;provider_domain&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt;: number of images showed in the &lt;code&gt;provider_domain&lt;/code&gt; web page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: JSON field that contains a dictionary with domains as keys, and number of links as values. A link appears when &lt;code&gt;provider_domain&lt;/code&gt; has an href tag in its web page that points to the domain key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each file can easily contain dozens of millions of rows. My first aproach is to load the information in a Pandas Dataframe, but this can become very slow. Therefore, I will test the scripts for the data processing with a portion of the real data. Afterwards, I will use &lt;a href=&quot;https://dask.org/&quot;&gt;Dask&lt;/a&gt; with the entire dataset. Dask provides advanced parallelism for analytics, and has a behaviour similar to Pandas.&lt;/p&gt;
&lt;h3 id=&quot;cleansing-and-filtering&quot;&gt;Cleansing and Filtering&lt;/h3&gt;&lt;p&gt;This step is about preparing the data for analysis and reducing the amount of data, in order to get a meaningful visualization. The data that comes from the S3 buckets is actually pretty neat (no strange characters for example, or incomplete rows). Nevertheless as a first step, duplicate rows are deleted (given by duplicate URLs). Next I, develop pruning rules. I try to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exclude cycles (cyclic edges),&lt;/li&gt;
&lt;li&gt;exclude lonely nodes,&lt;/li&gt;
&lt;li&gt;&lt;p&gt;avoid duplicates (for example, subdomains which are part of a single domain),&lt;/p&gt;
&lt;p&gt;These rules are being developed on an on-going basis and new rules will be added based on the insights derived from the data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;formatting-domain-names&quot;&gt;Formatting Domain Names&lt;/h3&gt;&lt;p&gt;In the dataset, we have domain names in the form of URLs. But we want to make the graph looks pretty well. This is why I am going to extract the domain name from the URLs we have in the dataset. For this purpose, I use &lt;a href=&quot;https://github.com/john-kurkowski/tldextract&quot;&gt;tldextract&lt;/a&gt;, which is a simple and complete open source library for extracting the parts of the domains (e.g. suffix, subdomain, domain name). This package is available in conda-forge too. Here is how tldextract works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; ext = tldextract.extract(&amp;#39;http://forums.bbc.co.uk&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; (ext.subdomain, ext.domain, ext.suffix)
(&amp;#39;forums&amp;#39;, &amp;#39;bbc&amp;#39;, &amp;#39;co.uk&amp;#39;) #extract the domain name &amp;quot;bbc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main part is the extraction of the domain name. This will be applied to the _provider_domain_ and &lt;em&gt;links&lt;/em&gt; fields in order to build the graph. The domain names will be the ones displayed over the nodes, as depicted in &lt;a href=&quot;https://creativecommons.github.io/blog/entries/cc-datacatalog-visualization/&quot;&gt;my first blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;license-validation&quot;&gt;License Validation&lt;/h3&gt;&lt;p&gt;Another important aspect is the licenses types. In the dataset, we do not have the exact license name; rather, we have a URL that directs to the license definition on &lt;a href=&quot;https://creativecommons.org&quot;&gt;creativecommons.org&lt;/a&gt;. We have developed a &lt;a href=&quot;https://github.com/creativecommons/cccatalog/blob/master/src/providers/api/modules/etlMods.py#L75&quot;&gt;function&lt;/a&gt; with some regular expressions to validate the correct format of these URls, and extracts from them the license name and version. This information will be shown in the pie chart that appears after the user clicks on a node.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;'https://creativecommons.org/licenses/by/4.0/' #valid license
'https://creativecommons.org/licenses/zero/' #non-valid license
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming Soon&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data aggregation&lt;/li&gt;
&lt;li&gt;Visualization with the data + perfectioning pruning/filtering rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-so-far/">
    <title type="text">CC Vocabulary, the lexicon so far</title>
    <id>urn:uuid:eb8192d1-4f89-35cd-b13c-ba931ccba0ce</id>
    <updated>2019-07-05T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-so-far/" />
    <author>
      <name>dhruvkb</name>
    </author>
    <content type="html">&lt;p&gt;CC Vocabulary has really come into its own over the last couple of weeks. Here
are some of the newest additions to the CC Vocabulary thesaurus of components.&lt;/p&gt;
&lt;p&gt;Tokens now have i18n enabled.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Token i18n&quot; src=&quot;token-i18n.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;p&gt;The code editor has a new dark Material-design inspired theme.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Dark editor theme&quot; src=&quot;editor.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;p&gt;Meet Inputs, the Vue approach to forms.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Input&quot; src=&quot;input.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;p&gt;Say hi to new documentation for Container (and a lot of other components).&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Container&quot; src=&quot;container.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;p&gt;Grids are a powerful way to lay your content out.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Grid&quot; src=&quot;grid.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;p&gt;There's also a new table component. It's still under active development as of
now.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;Table&quot; src=&quot;table.png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&quot;future&quot;&gt;Future&lt;/h3&gt;&lt;p&gt;CC Vocabulary is much more mature now than it was at the time of writing my last 
blog. It has a much more stable codebase and a larger collection of polished
components. So if you are a developer of CC apps, I would recommend you use some
of its offerings in your latest project.&lt;/p&gt;
&lt;p&gt;CC Vocabulary is out now, with its code, design and translations on GitHub and a
live styleguide hosted on GitHub pages. Please &lt;a href=&quot;https://creativecommons.github.io/cc-vocabulary/&quot;&gt;check it
out&lt;/a&gt; and join the discussions.
Since it is too early to even call it a beta, your feedback is crucial in shaping
its future and with it, the future of all Creative Commons apps.&lt;/p&gt;
&lt;p&gt;Here's a sneak peek!&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;CC Vocabulary in production&quot; src=&quot;hello.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Say hello to CC Vocabulary!&lt;/small&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;CC Vocabulary is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/hugocreativecommons-org/&quot;&gt;Hugo
Solar&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;. Although not officially
a mentor &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt; has also
been really supportive and helpful.&lt;/p&gt;
&lt;h3 id=&quot;work-log&quot;&gt;Work log&lt;/h3&gt;&lt;p&gt;See GitHub &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/commits&quot;&gt;commits&lt;/a&gt;
for in-depth logs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactored and massively improved code quality&lt;/li&gt;
&lt;li&gt;Developed some layout components such as Container and Grid&lt;/li&gt;
&lt;li&gt;Reworked styling so as to publish a vanilla CSS library&lt;/li&gt;
&lt;li&gt;Developed a consistent system of colors&lt;/li&gt;
&lt;li&gt;Rewrote significant portions of documentation for almost all components&lt;/li&gt;
&lt;li&gt;Split large components like Header and Footer into smaller elementary components&lt;/li&gt;
&lt;li&gt;Developed an Input component for forms&lt;/li&gt;
&lt;li&gt;Switched to a developer-beloved darker theme for the code editor&lt;/li&gt;
&lt;li&gt;I18n-ed the tokens section of the documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming up&lt;/h3&gt;&lt;p&gt;See proposal for in-depth goals.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop buttons, tables, dropdown boxes (important, urgent)&lt;/li&gt;
&lt;li&gt;Increase the interdependent use of components&lt;/li&gt;
&lt;li&gt;Add more generic components&lt;/li&gt;
&lt;li&gt;Integrate these into CC Search&lt;/li&gt;
&lt;li&gt;Go to point 3&lt;/li&gt;
&lt;li&gt;Add a dark theme for the entire styleguide (unimportant, non-urgent)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week5-6/">
    <title type="text">CC Browser Extension Week 5, 6</title>
    <id>urn:uuid:5119b9c2-67aa-3110-8598-9aadbb19fce9</id>
    <updated>2019-07-04T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-week5-6/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;For the context, I am working on my GSoC project that is to make a browser-extension to search CC Licensed content in the public domain by interacting with CC Catalog API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Previous Blogs&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://creativecommons.github.io/blog/entries/cc-browser-extension-a-gsoc-project/&quot;&gt;CC Browser Extension - A GSoC Project&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;work-done&quot;&gt;Work Done&lt;/h3&gt;&lt;p&gt;These couple weeks were spent on finishing the filter section, setting up infinite-scroll and fixing issues and bugs after some days of testing.&lt;/p&gt;
&lt;p&gt;Most of the filter section was complete but I missed a tiny detail that the Catalog API &lt;a href=&quot;https://api.creativecommons.engineering/image/search?q=hello&amp;amp;li=cc0&amp;amp;lt=commercial&quot;&gt;does not accept&lt;/a&gt; both the license and use-case filter queries in the same request. I did some changes in the code for generating the valid URL for every filter action and added the relevant UI changes of deselecting and disabling the license drop-down when a use-case is selected.&lt;/p&gt;
&lt;p&gt;The infinite scroll was set-up by following the classic solution of firing another request to the API when the user scrolls to the bottom and appending the thumbnails of the result in the grid.&lt;/p&gt;
&lt;p&gt;I tested the extension for a couple of days and made some &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;bug reports&lt;/a&gt; on Github. Most of them were pretty easy to fix but the one I struggled with was &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/issues/3&quot;&gt;this&lt;/a&gt; one. After some discussion on slack,  &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno&lt;/a&gt; and &lt;a href=&quot;https://github.com/dhruvkb&quot;&gt;Dhruv&lt;/a&gt; suggested using the &lt;a href=&quot;https://masonry.desandro.com/&quot;&gt;Masonry grid&lt;/a&gt; for the thumbnails (I was previously using the standard float grid of 3 columns). I made the transition but observed some flickering in the images on firefox when a new batch loaded on scrolling. It was working fine on chrome though. I spent a whole day looking for alternatives or doing some silly fix by using a bunch of timeouts. Again, Breno and Druv came to the rescue and suggested that some animations may be causing this. But even after a few hours of hit and trial and removing and fixing animations, I couldn't fix it only because I was looking in the wrong place. By changing the &lt;code&gt;transitionDuration&lt;/code&gt; option of masonry to &lt;code&gt;0&lt;/code&gt; did the trick. In fact, it was the first thing I should have tried. I should maybe take breaks more often to clear my mind :p&lt;/p&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming Up&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Work on showing relevant image info when we click on the image.&lt;/li&gt;
&lt;li&gt;Let users copy the rich-text or HTML version of the attribution with one click.&lt;/li&gt;
&lt;li&gt;Add the download buttons to download the image and the attribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out the project on &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github&lt;/a&gt; and join the discussion on &lt;code&gt;#gsoc-browser-ext&lt;/code&gt; channel on &lt;a href=&quot;http://creativecommons.github.io/community/#slack&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special Thanks&lt;/em&gt;:  &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-chapter-websites/">
    <title type="text">Creative Commons Chapter Websites network</title>
    <id>urn:uuid:68cfff15-a1be-3330-8e22-677ea1e6452d</id>
    <updated>2019-07-03T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-chapter-websites/" />
    <author>
      <name>hugosolar</name>
    </author>
    <content type="html">&lt;p&gt;This year, Creative Commons launched a new communication tool to improve the chapters work around the world. The rationale behind this tool is to &quot;&lt;em&gt;Ensure the network is creating value for members&lt;/em&gt;&quot; providing a site network that try to be a useful and easy to use tool for the Creative Commons chapters.&lt;/p&gt;
&lt;h2 id=&quot;technology&quot;&gt;Technology&lt;/h2&gt;&lt;p&gt;This network was built in WordPress in its &quot;Multisite&quot; mode. This means we can create multiple websites with a single Wordpress install, this has a lot of benefits in terms of administration and visual consistency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-chapter-websites/nl-screenshot.png&quot; alt=&quot;CC Netherlands beta site&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CC Netherlands homepage from beta testing stage&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;theme&quot;&gt;Theme&lt;/h3&gt;&lt;p&gt;The work behind this network is based in a single &lt;a href=&quot;https://github.com/creativecommons/wp-theme-cc-chapter&quot;&gt;WordPress theme&lt;/a&gt; which is assigned by default in every new site created. This theme uses all the capabilities availables on WordPress such as &lt;code&gt;Custom post types&lt;/code&gt;, &lt;code&gt;Custom Taxonomies&lt;/code&gt;, &lt;code&gt;Widgets&lt;/code&gt;, &lt;code&gt;Metaboxes&lt;/code&gt; and so on. To ease the backend development work I choose a Development Toolkit for WordPress named &lt;a href=&quot;https://github.com/felipelavinz/queulat&quot;&gt;Queulat&lt;/a&gt;, which provide a lot of powerful tools to create and maintain Custom Post types and its own queries, metabox creation and a powerful form factory with many useful elements.
The theme file structure is aim to be as logical as posible and following the &lt;a href=&quot;https://developer.wordpress.org/themes/basics/organizing-theme-files/&quot;&gt;recommended structure&lt;/a&gt; from WordPress in order to keep the files in a semantic order ready for community colaboration.
The theme front page was built using sidebars and widgets in order to increase its flexibility, there are a lot of widgets for each website content which can be configured and placed into homepage sidebars and splitted in columns as needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-chapter-websites/event-metabox.png&quot; alt=&quot;Event metabox&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Event Post type with custom data metabox&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;gutenberg&quot;&gt;Gutenberg&lt;/h3&gt;&lt;p&gt;The new WordPress editor is a whole new experience for me, as they say &quot;&lt;em&gt;We call the new editor Gutenberg. The entire editing experience has been rebuilt for media rich pages and posts. Experience the flexibility that blocks will bring, whether you are building your first site, or write code for a living.&lt;/em&gt;&quot;
I decide to take advantage of this new feature by creating customizations for the websites like custom styles, a custom color palette for button block, and responsive support for most common Gutenberg blocks to keep the content as flexible as posible&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-chapter-websites/gutenberg-button-block.png&quot; alt=&quot;Gutenberg button block&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Gutenberg custom button block&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;frontend&quot;&gt;Frontend&lt;/h3&gt;&lt;p&gt;Thinking on scalability and maintenance I like to build website styles using &lt;a href=&quot;https://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; preprocessor. For layout, I like to modularize elements and use a standardizing format like the Microformats specification (in this case &lt;a href=&quot;http://microformats.org/wiki/hatom&quot;&gt;hAtom&lt;/a&gt;), this helps new developers to understand the layout and the code in a better way and also helps to optimize crawling from search engines.&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;&lt;p&gt;We're working on improve this website network and pushing forward a lot of new features requested by the community. They can be &lt;a href=&quot;https://github.com/creativecommons/wp-theme-cc-chapter/milestone/2&quot;&gt;tracked here&lt;/a&gt;. Some of the most important features in the future will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CCsearch Integration&lt;/li&gt;
&lt;li&gt;Easy Attribution&lt;/li&gt;
&lt;li&gt;Post formats compatibility (Image, video, gallery)&lt;/li&gt;
&lt;li&gt;More post types and widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, we're planning on providing the chapters data via the WP-API so it can be used in other CC websites (The CC Global Network for instance), so we can show information from what's going on in the whole network&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-chooser-week4/">
    <title type="text">GSoC cc-chooser Week 4</title>
    <id>urn:uuid:5f04f948-c01a-39b2-b0cb-b84c15039d61</id>
    <updated>2019-06-24T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-chooser-week4/" />
    <author>
      <name>akmadian</name>
    </author>
    <content type="html">&lt;p&gt;In case you don't know, my GSoC project involves revamping &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;the CC license chooser&lt;/a&gt;.
 I am working with my mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, to visually overhaul the tool, as well as making it more educational, and more usable.&lt;/p&gt;
&lt;p&gt;This week, I worked on some of the Chooser's JS functionality, and the educational section's layout.&lt;/p&gt;
&lt;p&gt;Getting the chooser working was lots of fun. It's the first real JS I've written for the site (other than the modal system, which is about 6 lines total).
 The thing I like most is seeing the site take shape. Previously, the chooser was all dummy controls and placeholder text.
 Now, it has a fully working chooser, complete with the license icons being updated, the link to the license page being set, etc.
 The thing that took the longest was getting the code to return the correct license based on the user's inputs. There was some
 temperamental code, and the starting state variables were also a little off.&lt;/p&gt;
&lt;p&gt;Next up was the educational section. I decided to go from a three column layout, to a to row layout. I moved the question buttons 
 to the top row (now alone), and the license icon descriptions (and example) to the bottom row. This allows the icon descriptions 
 to be longer without looking really weird, and gives a space for an example of how the license name, icons, and permissions are related.
 I also decided to swap the positions of the educational section and the chooser section on the page. This means that the chooser is 
 now at the top of the page, with the educational section (re-labelled as &quot;Confused? Need Help?&quot;) below it.&lt;/p&gt;
&lt;p&gt;Next week, I'll be working on getting a new version of the license chooser controls working.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-a-gsoc-project/">
    <title type="text">CC Browser Extension - A GSoC Project</title>
    <id>urn:uuid:a6b57727-90f7-31c1-a01f-94ff017eb17f</id>
    <updated>2019-06-20T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-browser-extension-a-gsoc-project/" />
    <author>
      <name>makkoncept</name>
    </author>
    <content type="html">&lt;p&gt;With the Creative Commons engineering team working very hard to catalog and index a plethora of CC-licensed works floating all over the internet, the next step is to make a suite of user-centric applications and interfaces to interact, consume and even reuse the content. The CC-Search is one such app with over &lt;a href=&quot;https://creativecommons.github.io/blog/entries/cc-search-out-of-beta/&quot;&gt;300 million CC-Licensed images indexed&lt;/a&gt; and since there is a full separation of concern between the backend (&lt;a href=&quot;https://github.com/creativecommons/cccatalog-api&quot;&gt;CC-Catalog-API&lt;/a&gt;) and frontend (&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend&quot;&gt;CC-Catalog-frontend&lt;/a&gt;), we can leverage the backend architecture to design plugins for other platforms.&lt;/p&gt;
&lt;p&gt;This GSoC project aims to do this by making a Cross-Browser extension to interact with CC-Catalog-API.&lt;/p&gt;
&lt;h3 id=&quot;why-browser-extension?&quot;&gt;Why browser Extension?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Having at least two browser-centric front-ends (&lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search web app&lt;/a&gt; and browser extension) to the CC-Catalog-API would be beneficial because based on the community feedback we can ship only those features to the extension that would make the most sense to its users while having CC Search up to date. Therefore making &lt;em&gt;two flavors of interfaces&lt;/em&gt; in the process.&lt;/li&gt;
&lt;li&gt;We don’t have to tackle compatibility issues of different Operating Systems. If it runs in Firefox, it will run on any OS that has Firefox.&lt;/li&gt;
&lt;li&gt;Majority of users surf the internet through modern browsers which provide easy ways to add extensions with most of them having dedicated online stores.&lt;/li&gt;
&lt;li&gt;Most people tend to look for an extension for something they do more often on the internet so that they can save time, so it makes sense to develop one for CC Search also.&lt;/li&gt;
&lt;li&gt;Personalized experience: I talk more about this later in the post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-plan:&quot;&gt;The Plan:&lt;/h3&gt;&lt;p&gt;The first task would be to make an MVP that would be inspired by the CC Search design. For this, I will make sure to have the least dependence on browser extension APIs (probably use only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browserAction&quot;&gt;browserAction&lt;/a&gt;) so that the extension can be easily ported to different browsers without any major change in the code. Sure, we still have to work out porting and polyfilling CS3 and javaScript code to work on different browsers, but having one less thing to worry about while porting the initial version of extension will only help.&lt;/p&gt;
&lt;p&gt;Then I want to move to the next step and work on things that would make the user experience more personal and intuitive and here various browser extensions APIs would come handy, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage&quot;&gt;storage&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs&quot;&gt;tabs&lt;/a&gt;, etc. Then the priority would shift to making the extension compatible with Firefox and chrome.&lt;/p&gt;
&lt;h3 id=&quot;what-do-i-mean-by-personalized-experience?&quot;&gt;What do I mean by Personalized experience?&lt;/h3&gt;&lt;p&gt;Most people who will download the extension would want it to act as their own. They would want to customize it so that their flow is more intuitive and they don't have to repeat steps like if one user searches extensively for CC Content on Behance and DeviantArt only, they would want to not set the search filter before every new session. &lt;em&gt;This is where the browser extension shines&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One good example of solving this problem would be to make an options page, that would open in a new tab, where they can set the filters they use more often as default.&lt;/p&gt;
&lt;p&gt;Similarly, if we add a feature, say dark-mode, then the users who prefer it over the default can set their preferences.&lt;/p&gt;
&lt;h3 id=&quot;work-done-till-now:&quot;&gt;Work Done till Now:&lt;/h3&gt;&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;extension-screenshot.png&quot; alt&quot;CC Browser Extension Screenshot&quot; align=&quot;middle&quot;/&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot; style=&quot;display:block; text-align:center;&quot;&gt;CC Browser Extension Screenshot&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up the project directory structure, Eslint, Circle-ci.&lt;/li&gt;
&lt;li&gt;Set up the popup markup and styles.&lt;/li&gt;
&lt;li&gt;Started making API calls. You can search and get thumbnails of images.&lt;/li&gt;
&lt;li&gt;Showing image metadata like its title, license, provider when thumbnails are hovered on.&lt;/li&gt;
&lt;li&gt;Add a loading animation.&lt;/li&gt;
&lt;li&gt;Add functionality to apply license and provider filters to search.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming up&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set up lazy loading or pagination.&lt;/li&gt;
&lt;li&gt;Start working on the functionality of showing the image preview with data, attribution, etc when we click on the image. This may take more than one week.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-you-can-help&quot;&gt;How you can help&lt;/h3&gt;&lt;p&gt;The development is still in the initial phase but you can check out &lt;strong&gt;a working extension&lt;/strong&gt; at the &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension&quot;&gt;Github Repository&lt;/a&gt;. There are instructions to help you get started and load it to Firefox.&lt;/p&gt;
&lt;p&gt;Tell us what you expect the extension to do, or a feature that you wish would be implemented. At this early stage of development, it might help us improve our goals. You can join the discussion on &lt;code&gt;#gsoc-browser-ext&lt;/code&gt; channel on &lt;a href=&quot;http://creativecommons.github.io/community/#slack&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti&lt;/a&gt; to for their mentorship and providing an experienced perspective and solutions to the problems faced by this naive developer.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-first-phase/">
    <title type="text">Reviving and Updating Creative Commons Plugin for WordPress</title>
    <id>urn:uuid:fa1fd3f8-26f4-3501-8017-5418a52c7c1a</id>
    <updated>2019-06-20T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-wp-plugin-first-phase/" />
    <author>
      <name>ahmadbilaldev</name>
    </author>
    <content type="html">&lt;p&gt;I am Ahmad Bilal, and I am working with Creative Commons in Google Summer of Code 2019. With that said, let's dive into my &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#5810039753801728&quot;&gt;CC WordPress Plugin project&lt;/a&gt;. The plugin is basically an attribution tool, allowing users to attribute their content and include a CC license on their WordPress website in a jiffy. However, it had not been updated for over two years and was lacking a bunch of useable features. The following is how I started and what implementation was involved.&lt;/p&gt;
&lt;h3 id=&quot;first-phase&quot;&gt;First Phase&lt;/h3&gt;&lt;p&gt;The very first target was to make the code streamlined and consistent, which goes hand in hand with better inline documentation. Thankfully, for WordPress we have Coding and Documentation Standards. So I went along finding issues, applying best practices for code and optimization was followed, making it clean and consistent. I was happy with this being my first deliverable because it made me quite familiar with the code. Workflow for setting up these standards was added in the contribution guidelines. We are also working for a continuous integration possibility, that will ensure tests being run at each push.&lt;/p&gt;
&lt;p&gt;After the first week, eight issues and multiple commits later most of the consistency and bad practice issues had been dealt with. Now, it was time to improve usability. The plugin was based on &quot;Classic Editor&quot; of WordPress, which was replaced by the new Gutenberg Editor in WordPress 5.0. This meant that any user using this plugin now, will not be able to attribute licenses to a post. To solve this issue, we needed React.js based Gutenberg Blocks for all licenses. I created the blocks in the second week and successfully integrated them with the plugin.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-wp-plugin-first-phase/cc-blocks.png&quot; alt=&quot;CC Gutenberg Blocks&quot;&gt;&lt;/p&gt;
&lt;p&gt;A big challenge was my final exams in the third week. Frankly, I couldn't really give time to my studies because of the project. My mentors, &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/hugocreativecommons-org/&quot;&gt;Hugo Solar&lt;/a&gt; have been very helpful and supportive throughout. With their understanding, I went on a seven-day break to take care of my finals. Now I am back, excited to resume my project and finishing final touches on the blocks. Looking forward!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/searching-300-million/">
    <title type="text">Searching 300MM Images with CC Search: Backend Architecture</title>
    <id>urn:uuid:1d02b5a4-1f82-3e66-bb65-82d0ca60db09</id>
    <updated>2019-06-19T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/searching-300-million/" />
    <author>
      <name>aldenpage</name>
    </author>
    <content type="html">&lt;p&gt;In 2016, Creative Commons hired &lt;a href=&quot;https://lizadaly.com/&quot;&gt;Liza Daly&lt;/a&gt; to build &lt;a href=&quot;https://hackernoon.com/cc-search-developer-notes-and-reflection-418271194682&quot;&gt;a proof-of-concept engine&lt;/a&gt; for searching 10 million CC works. Based on the success of that project, Creative Commons chose to pursue funding for scaling up CC Search even further, setting a goal to catalog a larger sample of the estimated 1.4 billion CC-licensed works on the internet. To date, we’ve indexed over 300 million images and served over 15 million search queries in the &lt;a href=&quot;https://search.creativecommons.org&quot;&gt;new version of CC Search&lt;/a&gt;. This post describes some of the technical architecture changes we’ve made to CC Search in order to reach this point.&lt;/p&gt;
&lt;h1 id=&quot;evolution-of-architecture&quot;&gt;Evolution of architecture&lt;/h1&gt;&lt;p&gt;While the prototype successfully demonstrated the usefulness and feasibility of searching openly licensed images, accommodating more images and traffic inevitably required some architectural changes. In addition to supporting a higher quantity of works, we would have significantly increased traffic requirements after exiting the beta phase of the project.
The original prototype was structured as a 3-tier Django app hosted on Amazon Elastic Beanstalk. That’s the best design for a team of one building a minimum viable product. However, the requirements of the project changed: we now have a rapidly growing set of works, more developers, and higher traffic requirements. It would not be possible to meet these requirements without rewriting a lot of code.&lt;/p&gt;
&lt;p&gt;At this point, it’s easy to fall into the trap of overengineering. Rather than start from scratch, we decided to preserve the parts of the project that worked well for our use case, and perform an informed rewrite of the parts that didn’t. To that end, bits and pieces of the original CC Search prototype live on in the current version of CC Search.&lt;/p&gt;
&lt;h2 id=&quot;peopleware&quot;&gt;Peopleware&lt;/h2&gt;&lt;p&gt;First, we divided the work into 3 separate silos - data engineering, backend, and frontend. That means that each respective developer could focus entirely on accumulating CC licensed content, building scalable infrastructure to serve this content to the public, and improving the user experience/presentation layer. The data and frontend layers would be tied together through an &lt;a href=&quot;https://api.creativecommons.engineering&quot;&gt;open API&lt;/a&gt;, which also opens up the possibility of developers building their own custom applications with CC Search, such as a Photoshop plugin or a &lt;a href=&quot;https://github.com/creativecommons/ccsearch-browser-extension/&quot;&gt;Firefox addon&lt;/a&gt;. Each developer could use whatever tools they were most familiar with to implement their slice of the project.&lt;/p&gt;
&lt;h2 id=&quot;updating-the-search-index&quot;&gt;Updating the search index&lt;/h2&gt;&lt;p&gt;One of the first problems that needed to be solved was reducing the time that it took to add works to our search engine. It took about 3 days to index 10 million images in the original prototype. Since the prototype search data was static, that was completely acceptable; however, for 300 million works, it would take 90 days to index the data.
Investigation revealed that the problem was the use of Django signals to populate the search index. Every time a work was added to the database, it would be indexed inside of Elasticsearch. This works well for a steady trickle of updates, but does not work so well for 300 million updates.&lt;/p&gt;
&lt;p&gt;Instead of using Django signals to incrementally add individual items to the database and search index, we took a “freight train” approach where we would rebuild the entire database and search index in bulk. The tradeoff is that there would be some lag time between finding CC licensed content and when it actually shows up in production where the end user can see it. Since users can’t really tell if your image index is a few hours out of date, this seemed like a worthwhile price to pay; we can always introduce “fast path” updates later when the situation calls for it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/searching-300-million/ingestion_diagram.jpg&quot; alt=&quot;Ingestion Server&quot;&gt;&lt;/p&gt;
&lt;p&gt;The piece of software responsible for updating our search data is called &lt;a href=&quot;https://github.com/creativecommons/cccatalog-api/tree/master/ingestion_server/ingestion_server&quot;&gt;Ingestion Server&lt;/a&gt;. It copies data from the CC Catalog into the production PostgreSQL database, and then indexes that data inside of Elasticsearch in bulk. The tricky part about this is that we had to reload the data without impacting performance or availability of the production system. So, if the ingestion were to fail for some reason (Elasticsearch or our database runs out of space, malformed data breaks the indexer, etc), the users shouldn’t even notice. To accomplish that, all data is loaded into temporary tables and indices, tested for defects, and then promoted to the “live” search index.&lt;/p&gt;
&lt;h2 id=&quot;searching-300-million-works-in-high-traffic-conditions&quot;&gt;Searching 300 million works in high traffic conditions&lt;/h2&gt;&lt;p&gt;Searching 10 million works is achievable with nothing but a database and a single virtual machine. Searching 300 million images to an unknown (but probably larger) number of users would take some more firepower.
We predicted that we would have a lot more users after removing the “beta” designation and promoting CC Search to the general public, but couldn’t possibly predict exactly how much. To deal with that uncertainty, we designed the system to be horizontally scalable: we can always add more nodes to Elasticsearch to accommodate an increase in content and traffic, and we can also scale up the number of API servers in response to demand. Finally, we can utilize caching to reduce the cost of each search query. With these changes, our infrastructure is able to handle high volumes of visitors without unplanned downtime.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/searching-300-million/system_architecture.png&quot; alt=&quot;System Architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, drawing architecture diagrams and allocating autoscaling groups does not prove that your design will work under load. To that end, we wrote up some Locust load tests. With about 50 lines of code, we were able to hammer the API with tens of thousands of requests per second and see what happened. This step was vital, as it allowed us to fix performance bottlenecks before experiencing live traffic. It uncovered a number of difficult to discover performance related configuration problems and deadlock conditions before we ever even hit production.&lt;/p&gt;
&lt;h2 id=&quot;a-hack-for-handling-link-rot-at-scale&quot;&gt;A hack for handling link rot at scale&lt;/h2&gt;&lt;p&gt;One significant challenge we faced was link rot: over time, images are moved to new locations or entirely deleted. Once we began indexing more data from social platforms like Flickr and Behance, the problem became too big to ignore; CC Search was returning page after page of dead links. To make matters worse, we don’t host our own thumbnails; we scrape them from the original data source and embed them in our results. As a consequence of this, broken thumbnails would show up in the search results, creating a really bad user experience.&lt;/p&gt;
&lt;p&gt;The logical answer to this would be to scrape the images and produce our own thumbnails, which we intend to do in the near future. That would solve the immediate usability problem of broken thumbnails, but not solve the underlying issue of deleted images being linked in our search results. Additionally, scraping and storing 300 million+ images would incur significant storage costs. We would also need to crawl 300 million images without placing undue burden on our content partners. When 290 million images in the catalog are stored on Flickr alone, this is impossible; we would have to make thousands of calls per second to crawl that amount of content in a reasonable period of time. Your crawler will not survive for very long if all of your target sites block you for sucking up all of their capacity. Finally, how often can we perform such a crawl? Once a month? Once per year? In the meantime, between crawls, more link rot is taking place.&lt;/p&gt;
&lt;p&gt;Instead of building a crawler, we decided to perform some server-side validation. After we obtain the search results, the API server concurrently performs a HEAD request on every single image in the result set to check that it’s still valid. If it’s invalid, we delete it from the search results. We cache the image’s status code in Redis with a TTL to ensure that we aren’t making loads of pointless HTTP requests and reduce the risk of being throttled by 3rd parties.&lt;/p&gt;
&lt;p&gt;In general, this “just-in-time validation” has worked surprisingly well. Broken thumbnails are a rare occurrence now. It solved a lot of the issues related to embedding 3rd party content in our search results, buying us more time to build a more sustainable database-layer solution to link rot and thumbnailing.&lt;/p&gt;
&lt;h2 id=&quot;managing-infrastructure-with-terraform&quot;&gt;Managing infrastructure with Terraform&lt;/h2&gt;&lt;p&gt;With greater scale comes greater complexity. Since there would be more moving parts in our implementation of CC Search, we would need some kind of infrastructure as code tool to manage zero-downtime deployments, provisioning new virtual machines, configuration management, tracking expenses, and documenting what is actually in production. We considered Kubernetes, but that seemed like massive overkill for a team of our size and a source of too much operational complexity. Instead, we use &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; to declaratively provision our software to EC2 instances hosted on AWS. Everything is containerized, so we can easily transition to Kubernetes or Nomad if we desire in the future, but Terraform has proven to be more than sufficient so far.&lt;/p&gt;
&lt;p&gt;With Terraform, we are able to produce deployment plans, see what changes are going to appear in production, and only then pull the trigger. It also provides &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/what-is-immutable-infrastructure&quot;&gt;immutable infrastructure&lt;/a&gt;:  instead of sshing into servers and fiddling with settings or running bespoke deployment scripts, whenever we want to make a change, we completely re-provision the virtual machine with new settings. The current state of the system is always documented in our Terraform code.&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;&lt;p&gt;The next step for CC Search is improving the relevance of our search results, which is going to entail performing large scale scraping of some of the catalog, performing AI analysis of the scraped content, and implementing some popularity-based algorithm to boost the most interesting results to the top. We’re also going to start producing thumbnails for at least some subset of our catalog, perhaps on a just-in-time basis or through multiple caching image proxies.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/">
    <title type="text">Visualize CC Catalog data</title>
    <id>urn:uuid:5c735e37-45cf-3704-884e-389e17fe42eb</id>
    <updated>2019-06-17T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-datacatalog-visualization/" />
    <author>
      <name>soccerdroid</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;“By visualizing information, we turn it into a landscape that you can explore with your eyes.”&lt;/em&gt; – David McCandless.&lt;/p&gt;
&lt;p&gt;The landscape of licensed content is wide and varied. We have domains linking to other domains, different license types, and some metadata. This information is extracted from the Internet monthly by &lt;a href=&quot;http://commoncrawl.org/&quot;&gt;Common Crawl&lt;/a&gt;. It is fair to mention that we have 250 million works and growing! If you didn't know we had so much licensed content, well then, this is one of the goals of this project: show the users how licensers are connected, their licensed content, and show how the licensing wave is expanding.&lt;/p&gt;
&lt;h3 id=&quot;hands-to-work&quot;&gt;Hands to work!&lt;/h3&gt;&lt;p&gt;Currently, there are tons of graphs and visualization concepts that have proven to work better with certain data. In addition, because of the huge amount of data we possess, a critical point to keep in mind is that the graph must keep being meaningful (for example, with the classic node-link approach, you can end up having a confusing hairball). Hence, the visualization must be scalable. Finding which visualization would  work the best with the CC catalog dataset was my first task. I reviewed the state-of-art in graphs visualization, but in this post I'm not going to go deep with it. The highlights and conclusions of this review are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two case studies were reviewed, named &lt;a href=&quot;https://onlinelibrary.wiley.com/doi/abs/10.1111/cgf.12395&quot;&gt;Papilio&lt;/a&gt; and &lt;a href=&quot;https://ieeexplore.ieee.org/document/5613445&quot;&gt;GeneaQuilts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In both cases, data needs to be hierarchical (or have an attribute to use so to order or group the data) .&lt;/li&gt;
&lt;li&gt;Benefits are focused on the analysis tasks that are specific to those use cases (and yes, they are not the same for our case).&lt;/li&gt;
&lt;li&gt;Visualizations are not meaningful when you have thousands of nodes.&lt;/li&gt;
&lt;li&gt;Both cases needed to build a library from scratch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; neither of the solutions reviewed seemed viable for the CC-Catalog visualization project, as they do not show huge improvements in scalability. In addition, they do not fit for our case study.&lt;/p&gt;
&lt;h3 id=&quot;the-graph&quot;&gt;The graph&lt;/h3&gt;&lt;p&gt;Now that I knew what to draw, the next step was to find HOW to draw the graph. There is a wide range of visualization libraries where to choose from, you might feel overwhelmed at first. &lt;strong&gt;Tip:&lt;/strong&gt; define priorities/ key aspects according to what you want to visualize. Performance with big data, community support and a smooth learning curve were the aspects I checked for making a decision. We finally chose to work with &lt;a href=&quot;https://github.com/vasturiano/force-graph&quot;&gt;force-d3&lt;/a&gt;, an open-source library that uses the d3-force module as the underlying physics engine.  It has a friendly and simple API, as well as documentation and examples.&lt;/p&gt;
&lt;p&gt;One challenging task was to draw the nodes. The idea here is to show the domains names inside the nodes, and let the nodes size to be data driven. Funny fact: I spent hours before finding out that I received nodes as canvas objects with the API. Once you know how to draw nodes, the styling of the edges is a ride, because in force-d3 they are handled in the same way as the nodes objects. The edges are highlighted and their width increases when the user hovers over them. Another not-so-easy feature I implemented was to highlight a node and its neighbors. Here I have to thank to &lt;a href=&quot;https://github.com/vasturiano&quot;&gt;Mr. Vasturiano&lt;/a&gt;, the author of the library, who directed me to an example he developed with a very similar functionality. He is continuously checking and fixing open issues in his repo. Great library! I recommend you to check it out.&lt;/p&gt;
&lt;h3 id=&quot;licensed-content-by-types-of-cc-licenses&quot;&gt;Licensed content by types of CC licenses&lt;/h3&gt;&lt;p&gt;Creative Commons has &lt;a href=&quot;https://creativecommons.org/licenses/&quot;&gt;6 license types&lt;/a&gt;. We know which licenses each domain uses for their content, so it would be great if we can show to the public, for example, the most popular license. The idea is then, to display in a simple graph like a pie chart, the licensed content of each domain, classified by their type. The pie chart will be placed inside a modal. The modal will be triggered and showed after the user clicks on a node in the graph. For this visualization, we are using &lt;a href=&quot;https://www.highcharts.com/&quot;&gt;Highcharts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The final look of the front-end is:&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;cc_graph.png&quot; alt=&quot;CC Data Catalog Visualization&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Current sample graph, developed with force-d3. &lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;cc_graph_zoom.png&quot; alt=&quot;CC Data Catalog Visualization&quot; /&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Nodes with sample domain names. When the user hovers over a node, its neighbors are highlighted. The nodes sizes are data-driven.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
&lt;img src=&quot;cc_piechart.png&quot; alt=&quot;Pie chart license types&quot; /&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot; style=&quot;text-align:center;&quot;&gt;Pie chart that shows the proportions of licensed content of a domain, classified by CC license types.&lt;/small&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PD:&lt;/strong&gt; if the nodes labels are familiar to you, yes, they are the names of the characters of Les Misérables. I'm working with sample data!&lt;/p&gt;
&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;&lt;p&gt;As the front-end is complete, I am going to get my hands dirty with the data. Future milestones for the next two weeks include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Files conversion in Spark&lt;/li&gt;
&lt;li&gt;Reviewing of part of the dataset&lt;/li&gt;
&lt;li&gt;Implementation of a module for cleaning and parsing the data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the project development in the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CC Data Catalog Visualization is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;, who has been greatly helpful and considerate since the GSoC application period. Also, my backup mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, and engineering director &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt;, have been very supportive.&lt;/p&gt;
&lt;p&gt;Have a nice week!&lt;/p&gt;
&lt;p&gt;Maria&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-new-design-system/">
    <title type="text">CC Vocabulary is a new design system for Creative Commons</title>
    <id>urn:uuid:846bae1d-ddc6-307a-9f1f-edecfd142816</id>
    <updated>2019-06-15T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-vocabulary-new-design-system/" />
    <author>
      <name>dhruvkb</name>
    </author>
    <content type="html">&lt;p&gt;With the development period of GSoC 2019 well under way, a number of new and
improved Creative Commons apps are navigating their way to production and
worldwide reception. With all this development comes one obvious challenge:
&lt;em&gt;consistency&lt;/em&gt; (not to mention a number of other challenges such as 
internationalisation and modularity).&lt;/p&gt;
&lt;p&gt;The idea of a design system, to have a collection of elements and components
designed cohesively to be used across the body of applications of a particular
brand, is not new or even remotely my original. In fact, every organisation with
more than one application should have a design system. My last project was
backed by its own component library and it saved my team countless hours of
bikeshedding and repetitive design iterations.&lt;/p&gt;
&lt;p&gt;Contributing to CC Search in the period before GSoC made me realize the numerous
areas of the project that would benefit from a pre-built library and prompted
the proposal that eventually became my project. I'll cite the same example that 
I used in my proposal because it so clearly shows a problem and its solution.&lt;/p&gt;
&lt;p&gt;Consider for example the header and footer. All CC apps have a header and a
footer developed along the lines of &lt;a href=&quot;https://creativecommons.org/&quot;&gt;the
homepage&lt;/a&gt;, albeit to varying extents. However, due
to the lack of a common component, every app develops its own and they end up
looking like these. Calling them inconsistent would be an understatement.&lt;/p&gt;
&lt;div&gt;
&lt;img src=&quot;cc_home.png&quot; alt=&quot;CC Homepage&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The footer on the CC homepage&lt;/small&gt;
&lt;/div&gt;&lt;div&gt;
&lt;img alt=&quot;CC Search&quot; src=&quot;cc_search.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The footer in the CC Search app&lt;/small&gt;
&lt;/div&gt;&lt;div&gt;
&lt;img alt&quot;CC GitHub&quot; src=&quot;cc_github.png&quot;/&gt;&lt;br&gt;
&lt;small class=&quot;muted&quot;&gt;The footer on the CC Open Source site&lt;/small&gt;
&lt;/div&gt;&lt;h3 id=&quot;enter-cc-vocabulary&quot;&gt;Enter CC Vocabulary&lt;/h3&gt;&lt;p&gt;CC Vocabulary solves precisely that. It is a set of components, elements and
patterns that unite Creative Commons' applications in terms of look and feel,
while encapsulating and abstracting basic functionality that need not be
reinvented per-app.&lt;/p&gt;
&lt;p&gt;Now CC Vocabulary provides a footer (ready to use today!) that can be used on
all three of the above sites, conveying the same information in the same
consistent layout.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;What about the different contents in the footers?&quot;&lt;/em&gt;, you ask.&lt;/p&gt;
&lt;p&gt;As for the different content in all three footers, the third column is 100%
customisable. So whether crediting the developers of the website, attributing
the icon artists or licensing the content therein, the footer just works. And
when it comes to translations, Vocabulary has you covered. Lastly, to embody the
colorful world of creativity, every CC Vocabulary component can be colored. So
from the blue header of CC Search to the orange one on the homepage, there's a
component for everybody.&lt;/p&gt;
&lt;p&gt;'Nuff said.&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;CC Vocabulary&quot; src=&quot;cc_vocabulary.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The footer provided by CC Vocabulary&lt;/small&gt;
&lt;/div&gt;&lt;div&gt;
&lt;img alt=&quot;CC Vocabulary GitHub&quot; src=&quot;cc_vocabulary_github.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The footer provided by CC Vocabulary customised for the CC
Open Source site&lt;/small&gt;
&lt;/div&gt;&lt;div&gt;
&lt;img alt=&quot;CC Vocabulary Hindi&quot; src=&quot;cc_vocabulary_hindi.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;The footer provided by CC Vocabulary in Hindi&lt;/small&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Let's get to the nerdy stuff, the &lt;strong&gt;development details&lt;/strong&gt;. Here's the good, the
bad and the ugly of Vue development and also how all three adjectives fail to
embody the one constant feeling: &lt;em&gt;challenging&lt;/em&gt;!&lt;/p&gt;
&lt;h3 id=&quot;the-good&quot;&gt;The good&lt;/h3&gt;&lt;p&gt;As you've already seen, the prospects of the library in making the CC codebase
modular, cleaner and i18n-ready are huge. And being written in Vue has a ton of
perks, not the least of which is a future-ready, progressive framework to back
the project!&lt;/p&gt;
&lt;p&gt;Working in JavaScript is very different from a Python project. For instance, I
had literally very little need for Docker containers in the first place as npm
modules are local unlike pip, which needs Pipenv or similar to add sanity to
package management.&lt;/p&gt;
&lt;p&gt;Development in Vue is even more different, and even even more so when building a
Webpack-based app with Vue CLI, which takes a different approach compared to
React CRA. For one, there is no option to eject! So any changes to the Webpack
config have to be submitted via an object in &lt;code&gt;vue.config.js&lt;/code&gt; and deep merged
with the existing config.&lt;/p&gt;
&lt;p&gt;Then there are plugins. Plugins for Vue CLI are few and far in between but those
that are work extremely well and integrate with the Vue UI, a web based
management tool for Vue projects. Both Vue Styleguidist, the plugin used to
generate the styleguide and Vue i18n, the plugin used to provide translations
work seamlessly with Vue and, with the exception of having to manually enable
i18n in Styleguidist by extending the renderer in &lt;code&gt;styleguide.config.js&lt;/code&gt; (more
on that later), with each other.&lt;/p&gt;
&lt;p&gt;Coming from a React background, the helpfulness of the Vue framework contrasts
starkly with the cold stony world I was accustomed to. &lt;em&gt;&quot;I'm beginning to enjoy
JavaScript&quot;&lt;/em&gt;, a sentence I never thought I'd say.&lt;/p&gt;
&lt;p&gt;So by the end of week one, I had a styleguide with a Heading component and a
Docker setup to boot. I also had a ridiculously large smile from all the
learning that I did. By the end of three weeks, I was the proud developer of a
world-class web component framework that was beginning to have some real
footing, something I had not even dreamed possible!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; If you haven't seen or experienced Vue UI, you should. It will 
change your opinion of Vue for the better, as it did mine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;[user cc-vocabulary]$ vue ui
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;the-bad&quot;&gt;The bad&lt;/h3&gt;&lt;p&gt;In week 2, I had to develop a number of components and incorporate design
tokens, a practice with origins at Salesforce. Folks wiser than myself at
Salesforce came up with the idea of using design tokens to keep constants out of
the design and frontend development process, abstracting the actual nitty gritty
of colors and border radii behind semantic names such as &lt;code&gt;blue_light&lt;/code&gt; and
&lt;code&gt;radius_small&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hardcoding every single color and every single dimension in YAML files manually
from little to no reference at all was a very low point in an already low week.
The reason behing this pain is &lt;a href=&quot;https://wiki.creativecommons.org/wiki/colors&quot;&gt;CC's color
palette&lt;/a&gt; which provides all values
in hex &lt;code&gt;#abcdef&lt;/code&gt; for the close to forty colors in the palette. Were they HSL
values, it would have been extremely easy to shade the colors. If any brand aims
to redo its colors, I would suggest using HSL wherein HS is used to determine a
color and L is varied to determine its shades.&lt;/p&gt;
&lt;p&gt;Another strange decision taken by Vue is that Vue components use a Single File
Component scheme making use of &lt;code&gt;.vue&lt;/code&gt; files that Webpack processes using the
&lt;code&gt;vue-loader&lt;/code&gt; package. Now Styleguidist and Vue i18n both add their own tags to
the mix such as &lt;code&gt;&amp;lt;docs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;i18n&amp;gt;&lt;/code&gt; making one component file go to hundreds
or even thousands of lines! In a world that taught us to decouple style from
functionality, this mushing of languages did not sit too well with me and I kept
contemplating what reasons would have prompted the developers to take this step.&lt;/p&gt;
&lt;p&gt;Also Styleguidist comes with a very bland default style so to make it barely
presentable, one needs to override a lot of CSS styles that have absurdly high
specificities. Thankfully the default design is bland, not ugly otherwise the
whole thing would have been an ugly, miserable affair.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; This catastrophe could have become ugly were it not for the
benevolent &lt;code&gt;src&lt;/code&gt; attribute supported by some Vue tags. I had known this for
merely seconds when I found myself breaking my components down using&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;style scoped lang=&amp;quot;stylus&amp;quot; src=&amp;quot;./Component.styl&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to store CSS separately and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;i18n src=&amp;quot;./Component.json&amp;quot;&amp;gt;&amp;lt;/i18n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to keep translations outside of my code, thus making the file much more
manageable. There is still no way to split the JS &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; from the HTML
&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; without losing all autocompletion features provided by the IDE.&lt;/p&gt;
&lt;h3 id=&quot;the-ugly&quot;&gt;The ugly&lt;/h3&gt;&lt;p&gt;Incorporating translations into the project was the weirdest. With two or three
commands maximum, the Vue website had translations enabled and was working
perfectly. But the Styleguide would &lt;em&gt;just not render translations at all!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It took close to three days to even figure out why. Once I misinterpreted the
cause of the error, broke the entire styleguide and had to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;[user cc-vocabulary]$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to even get things to work. &lt;em&gt;&quot;Use VCS.&quot;&lt;/em&gt;, proved one again.&lt;/p&gt;
&lt;p&gt;Finally I had to register the i18n plugin separately for the styleguide, install
the middleware on all components and add a locale selector to every preview box
across the styleguide by extending and overriding the preview component. The
good folks at Styleguidist had provided for that functionality, and it revealed
itself to me as I was at the very brink of losing my mind.&lt;/p&gt;
&lt;p&gt;To add insult to injury, translations have to be done by hand. I know this is
how the world of i18n works but it would be really magical if we had a service
to do the translations automatically. Now I can write in two languages, and will
translate components to the other one as best as I can. But I urge you to
&lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;contribute&lt;/a&gt; too. Together we
can make CC components globally local.&lt;/p&gt;
&lt;p&gt;Languages that follow an alternate orientation, such as top-to-bottom or
right-to-left would pose significant difficulty to implement, having to manually
render everything in an opposite or perpendicular direction gives me the chills.
It's gonna be ugly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro-tip:&lt;/strong&gt; I learned that flags are a terrible way to represent language. Many
languages are spoken more widely outside countries of origin (think English) and
many countries are home to several languages (think India). Many large websites
make the mistake of using flag alongside language names and that seems so stupid
in retrospect.&lt;/p&gt;
&lt;p&gt;Also one should use the native name of the language in the selector (like हिन्दी)
and the universal translation icon (or some stylistic variant thereof).&lt;/p&gt;
&lt;center&gt;
&lt;img alt=&quot;Translate icon&quot; src=&quot;translate.png&quot; height=&quot;48px&quot;/&gt;
&lt;/center&gt;&lt;hr&gt;
&lt;h3 id=&quot;tl;dr&quot;&gt;TL;DR&lt;/h3&gt;&lt;p&gt;The project which takes out a lot of the hard work from frontend
development has its fair share of hard work cut out for itself. The challenges
ahead are plentiful, but the solutions they inspire are diamonds in their own
right. It is safe to say that I can attribute my complete understanding of Vue, i18n,
component libraries, styleguides and design systems to CC Vocabulary.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before we move on, let me tell you the bad and the ugly are not the norm. The 
good was the major portion of the project.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;future&quot;&gt;Future&lt;/h3&gt;&lt;p&gt;So as you can see CC Vocabulary represents a huge leap forward for the
web-facing Creative Commons. I can't wait to see the new generation of apps by
Creative Commons, &lt;em&gt;powered by CC Vocabulary&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;CC Vocabulary is out now, with its code, design and translations on GitHub and a
live styleguide hosted on GitHub pages. Please &lt;a href=&quot;https://creativecommons.github.io/cc-vocabulary/&quot;&gt;check it
out&lt;/a&gt; and join the discussions.
Since it is too early to even call it a beta, your feedback is crucial in shaping
its future and with it, the future of all Creative Commons apps.&lt;/p&gt;
&lt;p&gt;Here's a sneak peek!&lt;/p&gt;
&lt;div&gt;
&lt;img alt=&quot;CC Vocabulary in production&quot; src=&quot;hello.png&quot;/&gt;&lt;br/&gt;
&lt;small class=&quot;muted&quot;&gt;Say hello to CC Vocabulary!&lt;/small&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;CC Vocabulary is my GSoC 2019 project under the guidance of &lt;a href=&quot;https://creativecommons.org/author/hugocreativecommons-org/&quot;&gt;Hugo
Solar&lt;/a&gt; and &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine
Clachar&lt;/a&gt;. Although not officially
a mentor &lt;a href=&quot;https://creativecommons.org/author/kriticreativecommons-org/&quot;&gt;Kriti
Godey&lt;/a&gt; has also
been really supportive and helpful.&lt;/p&gt;
&lt;h3 id=&quot;work-log&quot;&gt;Work log&lt;/h3&gt;&lt;p&gt;See GitHub &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary/commits&quot;&gt;commits&lt;/a&gt;
for in-depth logs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up the Vue CLI 3 project&lt;/li&gt;
&lt;li&gt;Installed and customised Styleguidist&lt;/li&gt;
&lt;li&gt;Dockerised the setup for ease of setup and development&lt;/li&gt;
&lt;li&gt;Developed a home page for the project&lt;/li&gt;
&lt;li&gt;Developed simple components, called elements, like Heading and Paragraph&lt;/li&gt;
&lt;li&gt;Added design tokens and Theo workflow&lt;/li&gt;
&lt;li&gt;Converted all constants to design tokens: color, fonts and dimensions&lt;/li&gt;
&lt;li&gt;Wrote some, not all and definitely not enough, tests&lt;/li&gt;
&lt;li&gt;Added elements like Container and Badge&lt;/li&gt;
&lt;li&gt;Added complex components, called patterns, like Hello, Header and Footer&lt;/li&gt;
&lt;li&gt;Deployed styleguide to GitHub Pages&lt;/li&gt;
&lt;li&gt;Added color to patterns in a reusable way&lt;/li&gt;
&lt;li&gt;Added i18n capabilities and initiated translation to Hindi in the Footer&lt;/li&gt;
&lt;li&gt;Developed the Locale switcher and integrated with Styleguidist&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;coming-up&quot;&gt;Coming up&lt;/h3&gt;&lt;p&gt;See proposal for in-depth goals.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrate the library, gradually, with CC Search&lt;/li&gt;
&lt;li&gt;Add more generic components&lt;/li&gt;
&lt;li&gt;Go to point 1&lt;/li&gt;
&lt;li&gt;Develop a non-Vue vanilla CSS + JS based version of the library&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-chooser-week2/">
    <title type="text">GSoC cc-chooser Week 2</title>
    <id>urn:uuid:aec31b22-4365-3e47-830a-aa80c115ff1d</id>
    <updated>2019-06-14T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-chooser-week2/" />
    <author>
      <name>akmadian</name>
    </author>
    <content type="html">&lt;p&gt;In case you don't know, my GSoC project involves revamping &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;the CC license chooser&lt;/a&gt;.
 I am working with my mentor, &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt;, to visually overhaul the tool, as well as making it more educational, and more usable.&lt;/p&gt;
&lt;p&gt;This week, I worked on the site layout and usability testing of the existing chooser.&lt;/p&gt;
&lt;p&gt;I enjoyed usability testing more than I expected. During my mid-week standup meeting with Breno, he had some suggestions about the layout that came up in usability testing I was conducting literally the same day.
 I thought this was kinda funny, it was like my tester and Breno had talked about the layout between the meeting and testing. 
 I really enjoyed working on the layout. Experimenting with different layouts and visual styles, seeing the changes and the progression
 from iteration to iteration was a really fun process, and I really enjoyed seeing the new site take shape right before my eyes.&lt;/p&gt;
&lt;p&gt;This week's time managment was somewhat difficult for me. It's the second to last week of my current college quarter, so I'm working hard to prep for finals,
 and that takes lots of time (something I've never considered to be too scarce before I started college, but it's now a precious commodity!).
 With lots of tea and careful time management, I made it through on schedule.&lt;/p&gt;
&lt;p&gt;Next week is all about planning code structure and taking steps with dialing the look and feel of the site, and I'm excited to get started.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-catalog-leverage-open-data-1/">
    <title type="text">CC Catalog: Leveraging Open Data and Open APIs</title>
    <id>urn:uuid:762b80c0-ba51-343d-8d65-652f83e599bc</id>
    <updated>2019-06-07T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-catalog-leverage-open-data-1/" />
    <author>
      <name>sclachar</name>
    </author>
    <content type="html">&lt;p&gt;This post is the first of a three-part series about the underlying infrastructure for Creative Commons (CC) Catalog and the efforts to increase the volume and variety of creative works.&lt;/p&gt;
&lt;p&gt;The purpose of &lt;a href=&quot;https://github.com/creativecommons/cccatalog&quot;&gt;CC Catalog&lt;/a&gt; is to facilitate the discovery of openly licensed content, that proliferates the web. However, this is a challenging task and it requires a combination of techniques. The initial efforts to catalog the Commons began in 2016. The goal was to identify approximately &lt;a href=&quot;https://hackernoon.com/cc-search-developer-notes-and-reflection-418271194682&quot;&gt;1% of the estimated 1.4 billion works&lt;/a&gt; by harnessing open repositories and open APIs to build a &lt;a href=&quot;https://creativecommons.org/2017/02/07/new-cc-search/&quot;&gt;front door to the Commons&lt;/a&gt;. Since then, there has been an emphasis on including more content and discovering new platforms. While CC Catalog still leverages open data to achieve the above, we needed to develop the appropriate infrastructure to also routinely update the existing data.&lt;/p&gt;
&lt;p&gt;The development of this infrastructure began in 2018 with the first &lt;a href=&quot;http://commoncrawl.org/&quot;&gt;Common Crawl&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Pipeline_(computing)&quot;&gt;data pipeline&lt;/a&gt;. &lt;a href=&quot;https://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; was used to streamline the processing of petabytes of web crawl data to identify all domains that link to a Creative Commons license. The first test of this strategy was successful and it was instrumental in increasing the number of images and added 13 new platforms for the &lt;a href=&quot;https://creativecommons.org/2018/09/24/big-changes-for-cc-search-beta-updates-released-today/&quot;&gt;updates to CC Search beta&lt;/a&gt;. It also provided incremental updates to the catalog on a monthly basis. Even though Common Crawl corpus is an invaluable source, it requires us to develop a custom parser for each platform that we integrate. This has its merits, but presents a few challenges.&lt;/p&gt;
&lt;p&gt;After this, &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_API&quot;&gt;open APIs&lt;/a&gt; were explored and its purpose was not to replace the Common Crawl methodology but to augment it and hopefully increase the volume of data. This approach began with two platforms: 1) Flickr, since it has &lt;a href=&quot;https://blog.flickr.net/en/2019/03/08/update-on-creative-commons-licenses-and-in-memoriam-accounts/&quot;&gt;millions of CC license content&lt;/a&gt; and 2) Thingiverse. At the end of 2018, the exploratory efforts paid off and the catalog grew from 10 million images to over 260 million and the Flickr API was instrumental in achieving this. In early 2019, three new API providers were included: 1) Met Museum, 2) Cleveland Museum, and 3) Brooklyn Museum. This led to the development of our API &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL data pipeline&lt;/a&gt; that is managed by &lt;a href=&quot;https://airflow.apache.org/&quot;&gt;Apache Airflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently, we have over 305 million images from 25 providers, and we are still working to improve the data infrastructure and solidify our efforts for &lt;a href=&quot;https://creativecommons.org/2017/02/07/new-cc-search/&quot;&gt;building a vibrant, usable Commons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-catalog-leverage-open-data-1/cc-catalog-growth.jpg&quot; alt=&quot;cc-catalog-img&quot;&gt;&lt;/p&gt;
&lt;p&gt;The above data is made available to &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; via &lt;a href=&quot;https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt;. However, all providers in the catalog are not immediately available in CC Search. Various preprocessing efforts are performed in the back-end by the CC Catalog API to determine which content is deemed ready for publishing. Also, platforms are subject to additional reviews and may be suppressed until that process has completed. Currently, CC Search has 19 of the above providers comprising over &lt;a href=&quot;https://creativecommons.github.io/blog/entries/cc-search-out-of-beta/&quot;&gt;300 million images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal for 2019 is to increase the catalog to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;325 million images&lt;/li&gt;
&lt;li&gt;30 providers&lt;/li&gt;
&lt;li&gt;add new content types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next post will discuss the details of the Common Crawl data pipeline and how instrumental this corpus is for identifying potential providers and understanding how people are using the various CC license.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/meet-gsoc-2019-students/">
    <title type="text">Meet CC’s 2019 Google Summer of Code students</title>
    <id>urn:uuid:3a7d4f8d-5944-36d4-888b-dde225f5161e</id>
    <updated>2019-05-30T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/meet-gsoc-2019-students/" />
    <author>
      <name>kgodey</name>
    </author>
    <content type="html">&lt;p&gt;This year, &lt;a href=&quot;https://creativecommons.org/2019/03/04/cc-google-summer-of-code-2019/&quot;&gt;CC is participating in Google Summer of Code (GSoC)&lt;/a&gt;
 as a mentoring organization after a six year break from the program. We
 are excited to be hosting five phenomenal students (representing three 
continents) who will be working on CC tech projects full-time over the 
summer. Here they are!&lt;/p&gt;
&lt;div class=&quot;students&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Ahmad Bilal&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;em&gt;I am Ahmad Bilal, a Computer Science undergrad from UET Lahore, 
      who likes computers, problems and using the former to solve the later. I
      am always excited about Open Source, and currently focused on Node.js, 
      Serverless, GraphQL, Cloud, Gatsby.js with React.js and WordPress. I 
      like organizing meetups, conferences and meeting new people. I view 
      working in GSoC with Creative Commons, one of the biggest opportunities 
      of my life. Cats are my weakness, and I am a sucker for well-engineered 
      cars.&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;Ahmad will be taking ownership of &lt;a href=&quot;https://github.com/creativecommons/creativecommons-wordpress-plugin&quot;&gt;the CC WordPress plugin&lt;/a&gt;,
      which simplifies the process of applying CC licenses to content created
      using the popular WordPress blogging platform. He will be updating it 
      to use the latest WordPress best practices, resolving open issues, and 
      adding new features like integrating with CC Search. Ahmad’s mentor is 
      our Core Systems Manager &lt;a href=&quot;https://creativecommons.org/author/timidcreativecommons-org/&quot;&gt;Timid Robot Zehta&lt;/a&gt;, backed up by Hugo Solar.&lt;/p&gt;

      &lt;p&gt;You can follow the progress of this project through the &lt;a href=&quot;https://github.com/creativecommons/creativecommons-wordpress-plugin&quot;&gt;GitHub repo&lt;/a&gt; or on the &lt;code&gt;#cc-dev-wordpress&lt;/code&gt; channel on our &lt;a href=&quot;https://creativecommons.github.io/community&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col pt-3&quot;&gt;
      &lt;img src=&quot;ahmad.jpg&quot; alt=&quot;ahmad bilal&quot; /&gt;&lt;br /&gt;
      &lt;small class=&quot;muted&quot;&gt;Ahmad Bilal, credit: Usman C., CC BY-NC-ND 2.0&lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Dhruv Bhanushali&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;em&gt;I am Dhruv Bhanushali, a Mumbai-based software developer recently
       graduated from IIT Roorkee. I started programming as a hobby some five 
      years ago and, having found my calling, am now am pursuing a career in 
      the field. I have worked on a lot of institute-level projects and am 
      excited to expand the reach of my code to a global scale with CC through
       GSoC. Apart from development, I am a huge music fan and keep my curated
       collection of music with me at all times. I also love to binge watch TV
       shows and movies, especially indie art films.&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;Dhruv will be working on an original project, CC Vocabulary, which is
       a collection of UI components that make it easy to develop Creative 
      Commons apps and services while ensuring a cohesive experience and 
      appearance across CC projects. These components will be able to be used 
      in sites built using modern JavaScript frameworks (specifically Vue.js) 
      as well as simpler websites built using WordPress. CC’s Web Developer &lt;a href=&quot;https://creativecommons.org/author/hugocreativecommons-org/&quot;&gt;Hugo Solar&lt;/a&gt; serves as primary mentor, with backup from Sophine Clachar.&lt;/p&gt;

      &lt;p&gt;You can follow the progress of this project through the &lt;a href=&quot;https://github.com/creativecommons/cc-vocabulary&quot;&gt;GitHub repo&lt;/a&gt; or on the &lt;code&gt;#gsoc-cc-vocabulary&lt;/code&gt; channel on our &lt;a href=&quot;https://creativecommons.github.io/community/&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col pt-3&quot;&gt;
      &lt;img src=&quot;dhruv.jpg&quot; alt=&quot;dhruv bhanushali&quot; /&gt;&lt;br /&gt;
      &lt;small class=&quot;muted&quot;&gt;Dhruv Bhanushali, credit: Arpit Gupta, CC BY&lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;&lt;strong&gt;María Belén Guaranda Cabezas&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;em&gt;Hello! My name is María, and I am an undergraduate Computer 
      Science student from ESPOL, in Ecuador. I have worked for the past 2 
      years as a research assistant. I have worked in projects including 
      computer vision, the estimation of socio-economic indexes through CDRs 
      analysis, and a machine learning model with sensors data. During my 
      spare time, I like to watch animes and reading. I love sports! Specially
       soccer. I am also committed to environmental causes, and I am a huge 
      fan of cats and dogs (I have 4 and 1 respectively).&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;María will be working on producing visualizations of the data 
      associated with more than 300 million works we have indexed in the CC 
      Catalog (which powers CC Search) and how that data is interconnected. 
      These visualizations will enable users to understand how much 
      CC-licensed content is available on the internet, which websites host 
      the most content, which CC licenses are used the most, and much more. 
      She will be mentored by our Data Engineer &lt;a href=&quot;https://creativecommons.org/author/sclachar/&quot;&gt;Sophine Clachar&lt;/a&gt; with backup from Breno Ferreira.&lt;/p&gt;

      &lt;p&gt;You can follow the progress of this project through the &lt;a href=&quot;https://github.com/creativecommons/cccatalog-dataviz&quot;&gt;GitHub repo&lt;/a&gt; or on the &lt;code&gt;#gsoc-cc-catalog-viz&lt;/code&gt; channel on our &lt;a href=&quot;https://creativecommons.github.io/community/&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col pt-3&quot;&gt;
      &lt;img src=&quot;maria.jpg&quot; alt=&quot;María Belén Guaranda Cabezas&quot; /&gt;&lt;br /&gt;
      &lt;small class=&quot;muted&quot;&gt;María Belén Guaranda Cabezas, CC BY-NC-SA&lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Ari Madian&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;em&gt;I am an 18 year old, Seattle based, mostly self taught, Computer 
      Science student. I originally started programming by tinkering with 
      Python, and eventually moved into C# and the .NET framework, as well as 
      JS and some web development. I like Chai and Rooibos teas, volunteering 
      at my local food bank, and some occasional PC gaming, among other 
      things. I’m now working with Creative Commons on Google Summer of Code!&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;Ari will be working on creating a modern human-centered version of &lt;a href=&quot;https://creativecommons.org/choose/&quot;&gt;our CC license chooser tool&lt;/a&gt;, which is long overdue for an update. His work will focus on design and usability as well as code. CC’s Front End Engineer &lt;a href=&quot;https://creativecommons.org/author/brenoferreira/&quot;&gt;Breno Ferreira&lt;/a&gt; is the primary mentor for this project with support from Alden Page.&lt;/p&gt;

      &lt;p&gt;You can follow the progress of this project through the &lt;a href=&quot;https://github.com/creativecommons/cc-chooser&quot;&gt;GitHub repo&lt;/a&gt; or on the &lt;code&gt;#gsoc-license-chooser&lt;/code&gt; channel on our &lt;a href=&quot;https://creativecommons.github.io/community/&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col pt-3&quot;&gt;
      &lt;p&gt;&lt;img src=&quot;ari.jpg&quot; alt=&quot;Ari Madian&quot; /&gt;&lt;br /&gt;
      &lt;small class=&quot;muted&quot;&gt;Ari Madian, credit: Ellen Madian, CC0&lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Mayank Nader&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;&lt;em&gt;I am Mayank Nader, a sophomore Computer Science student from 
      India. Currently, my main area of interest is Python scripting, 
      JavaScript development, backend, and API development. I also like to 
      experiment with bash scripting and ricing and configuring my Linux 
      setup. Apart from that, I like listening to music and watching movies, 
      documentaries, and tv shows. I am very much inspired by Open Source and 
      try to contribute whenever I can.&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;Mayank will be working on building a cross-platform browser plugin 
      that allows users to search CC-licensed works directly from the browser 
      and enable reuse of those works by providing easy image attribution 
      tools. Users will be able to find content to use without having to 
      switch to a new website. Mayank will be mentored by CC’s Software 
      Engineer &lt;a href=&quot;https://creativecommons.org/author/aldencreativecommons-org/&quot;&gt;Alden Page&lt;/a&gt; with support from Timid Robot Zehta.&lt;/p&gt;

      &lt;p&gt;You can follow the progress of this project through the GitHub repo or on the #gsoc-browser-ext channel on our &lt;a href=&quot;https://creativecommons.github.io/community/&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;

      &lt;p&gt;You can visit &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/6514859793973248/&quot;&gt;the Creative Commons organization page&lt;/a&gt;
       on Google Summer of Code site to see longer descriptions of the 
      projects. We welcome community input and feedback – you are the users of
       all these products and we’d love for you to be involved. So don’t 
      hesitate to join the project Slack channel or talk to us on GitHub or &lt;a href=&quot;https://creativecommons.github.io/community/&quot;&gt;our other community forums&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col pt-3&quot;&gt;
      &lt;p&gt;&lt;img src=&quot;mayank.png&quot; alt=&quot;Mayank Nader&quot; /&gt;&lt;br /&gt;
      &lt;small class=&quot;muted&quot;&gt;Mayank Nader, credit: Rohit Motwani, CC BY&lt;/small&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This post was originally posted &lt;a href=&quot;https://creativecommons.org/2019/05/30/meet-ccs-2019-google-summer-of-code-students/&quot;&gt;on the primary Creative Commons blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-gsoc-accepted-students/">
    <title type="text">CC Google Summer of Code accepted students announced</title>
    <id>urn:uuid:7377e0a2-3d71-34a4-ae50-b7f7fd9ff043</id>
    <updated>2019-05-06T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-gsoc-accepted-students/" />
    <author>
      <name>kgodey</name>
    </author>
    <content type="html">&lt;p&gt;Google Summer of Code has just announced the list of accepted students for 2019. We’d like to congratulate our accepted students Ahmad Bilal, Ari Madian, Dhruv Bhanushali, Maria Belen Guaranda, and Mayank Nader! Your mentors will be in touch with you with next steps.&lt;/p&gt;
&lt;p&gt;We reshuffled some of the mentors for the projects around (from our original &lt;a href=&quot;https://creativecommons.github.io/gsoc-2019/project-ideas/&quot;&gt;Project Ideas list&lt;/a&gt;) so that we could have a dedicated mentor for each project. I will be focusing on the responsibility of organization admin and supporting the projects however I can. Here's the final list of accepted proposals and mentors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CC WordPress Plugin&lt;/strong&gt; by Ahmed Bilal (mentor: Timid Robot Zehta, backup: Hugo Solar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New CC License Chooser&lt;/strong&gt; by Ari Madian (mentor: Breno Ferreira, backup: Alden Page)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CC Vocabulary&lt;/strong&gt; by dhruvkb (mentor: Hugo Solar, backup: Sophine Clachar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CC Catalog Visualization&lt;/strong&gt; by Maria Belen Guaranda (mentor: Sophine Clachar, backup: Breno Ferreira)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CC Browser Extension&lt;/strong&gt; by Mayank Nader (mentor: Alden Page, backup: Timid Robot Zehta)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/6514859793973248/#projects&quot;&gt;about the accepted proposals here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please don’t lose heart if you were not accepted! We were amazed at the quality of proposals we got and we had to make some really tough decisions. We appreciate the hard work you put into your proposals and contributing to our code and we wish we could accept more proposals. We hope that you’ll stick around and &lt;a href=&quot;https://creativecommons.github.io/contributing-code/&quot;&gt;be part of the CC developer community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re interested in working on one of our remaining &lt;a href=&quot;https://creativecommons.github.io/gsoc-2019/project-ideas/&quot;&gt;project ideas&lt;/a&gt; as a volunteer outside of Google Summer of Code, please reach out to me. These are all things that CC is invested in building and we can provide guidance. We are especially looking for help with &lt;a href=&quot;https://creativecommons.github.io/gsoc-2019/project-ideas/all/#supercharge-our-indexing-engine&quot;&gt;supercharging our search indexer&lt;/a&gt;, improving our tooling around license translations (including &lt;a href=&quot;https://creativecommons.github.io/gsoc-2019/project-ideas/all/#automated-link-checking&quot;&gt;automated license link checking&lt;/a&gt;), and &lt;a href=&quot;https://creativecommons.github.io/gsoc-2019/project-ideas/all/#cc-plugin-generic&quot;&gt;plugins for integrating CC Search with external creation platforms&lt;/a&gt;. If we have multiple volunteers for the same idea, we will ask them to work together.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A note about availability&lt;/em&gt;: all CC staff have very limited availability over the next week because of&lt;a href=&quot;https://summit.creativecommons.org/&quot;&gt; CC Global Summit&lt;/a&gt; and CC is closed for most of the following week so we won’t be around at all then. Please be patient, we’ll respond to you as soon as we can.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/open-source-at-cc-gs2019-pre-event/">
    <title type="text">Open Source at Creative Commons - 2019 Global Summit Event</title>
    <id>urn:uuid:c6faa157-f959-3177-a2e2-fc1372621ec7</id>
    <updated>2019-05-01T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/open-source-at-cc-gs2019-pre-event/" />
    <author>
      <name>sclachar</name>
    </author>
    <content type="html">&lt;p&gt;Creative Commons has been building free software for over a decade to support its mission of maximizing digital creativity, sharing, and innovation. We would love your assistance in creating and improving that software. Please join us at &lt;a href=&quot;https://summit.creativecommons.org/&quot;&gt;Creative Commons Global Summit 2019&lt;/a&gt; in Lisbon, Portugal May 9-11 2019 where we will host a session entitled &lt;a href=&quot;https://ccglobalsummit2019lisbonportugal.sched.com/event/MiWW/open-source-at-creative-commons&quot;&gt;Open Source at Creative Commons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduce the Creative Commons Engineering Team.&lt;/li&gt;
&lt;li&gt;Discuss our primary projects and potential collaborations.&lt;/li&gt;
&lt;li&gt;Network with the attendees to build a vibrant community of developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Event Information&lt;/strong&gt;
&lt;br&gt;Date: Friday May 10, 2019 1:30pm - 2:25pm
&lt;br&gt;Location: &lt;a href=&quot;http://www.museudooriente.pt/museuoriente/deli-ilhas.php&quot;&gt;New Delhi Room&lt;/a&gt;, 4th Floor, Museu do Oriente Av. Brasília 352, 1350-279 Lisboa, Portugal
&lt;br&gt;Moderator: &lt;a href=&quot;https://mzeinstra.nl/&quot;&gt;Maarten Zeinstra&lt;/a&gt; Chapter lead for Creative Commons Netherlands&lt;/p&gt;
&lt;p&gt;We look forward to meeting you at this event and getting your feedback. If you would like to stay updated on our work, join our &lt;a href=&quot;https://groups.google.com/a/creativecommons.org/forum/#!forum/cc-developers&quot;&gt;developer mailing list&lt;/a&gt;, the #creativecommons-dev IRC channel on &lt;a href=&quot;https://freenode.net/&quot;&gt;freenode&lt;/a&gt;, or the #cc-developers channel on our &lt;a href=&quot;https://slack-signup.creativecommons.org/&quot;&gt;Slack community&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://opensource.creativecommons.org/blog/entries/cc-search-out-of-beta/">
    <title type="text">CC Search is out of beta with 300M images and easier attribution</title>
    <id>urn:uuid:33f8e2b5-b6ef-36a3-b81c-016b50feafe0</id>
    <updated>2019-04-30T00:00:00Z</updated>
    <link href="http://opensource.creativecommons.org/blog/entries/cc-search-out-of-beta/" />
    <author>
      <name>janeatcc</name>
    </author>
    <content type="html">&lt;p&gt;Today &lt;a href=&quot;https://search.creativecommons.org/&quot;&gt;CC Search&lt;/a&gt; comes out of beta, with over 300 million images indexed from multiple collections, a major redesign, and faster, more relevant search. It’s the result of a huge amount of work from the engineering team at Creative Commons and our community of volunteer developers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/entries/cc-search-out-of-beta/compressed-kittens-again.gif&quot; alt=&quot;cc-search-gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;CC Search searches images across &lt;a href=&quot;https://search.creativecommons.org/about&quot;&gt;19 collections&lt;/a&gt; pulled from open APIs and the &lt;a href=&quot;https://commoncrawl.org/&quot;&gt;Common Crawl&lt;/a&gt; dataset, including cultural works from museums (the Metropolitan Museum of Art, Cleveland Museum of Art), graphic designs and art works (Behance, DeviantArt), photos from Flickr, and an initial set of CC0 3D designs from Thingiverse.&lt;/p&gt;
&lt;p&gt;Aesthetically, you’ll see some key changes — a cleaner home page, better navigation and filters, design alignment with creativecommons.org, streamlined attribution options, and clear channels for providing feedback on both the overall function of the site and on specific image reuses. It’s also now linked directly from the Creative Commons homepage as the default method to search for CC-licensed works, and replaces the old search portal (though that tool is still online &lt;a href=&quot;https://oldsearch.creativecommons.org/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Under the hood, we improved search loading times and search phrase relevance, implemented analytics to better understand when and how the tools are used, and fixed many critical bugs our community helped us to identify.&lt;/p&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;What’s next&lt;/h3&gt;&lt;p&gt;We will continue to grow the number of images in our catalog, prioritizing key image collections such as Europeana and Wikimedia Commons. We also plan to index additional types of CC-licensed works, such as open textbooks and audio, later this year. While our ultimate goal remains the same (to provide access to all 1.4 billion works in the commons), we are initially focused on &lt;a href=&quot;https://creativecommons.org/2019/03/19/cc-search/&quot;&gt;images that creators desire to reuse in meaningful ways&lt;/a&gt;, learning about how these images are reused in the wild, and incorporating that learning back into CC Search.&lt;/p&gt;
&lt;p&gt;Feature-wise, we have specific deliverables for this quarter listed in our &lt;a href=&quot;https://docs.google.com/document/d/19yH2V5K4nzWgEXaZhkzD1egzrRayyDdxlzxZOTCm_pc/&quot;&gt;roadmap&lt;/a&gt;, which includes advanced filters on the home page, the ability to browse collections without entering search terms, and improved accessibility and UX on mobile. In addition, we expect some work related to CC Search will be done by our Google Summer of Code students starting in May.&lt;/p&gt;
&lt;p&gt;We’re also presenting the “&lt;a href=&quot;https://sched.co/MhKv&quot;&gt;State of CC Search&lt;/a&gt;” at the &lt;a href=&quot;https://summit.creativecommons.org/&quot;&gt;CC Global Summit&lt;/a&gt; next month in Lisbon, Portugal, where we’ll host a global community discussion around desired features and collections for CC Search.&lt;/p&gt;
&lt;h3 id=&quot;get-involved&quot;&gt;Get involved&lt;/h3&gt;&lt;p&gt;Your feedback is valuable, and we invite you to &lt;a href=&quot;https://search.creativecommons.org/feedback&quot;&gt;let us know&lt;/a&gt; what you would like to see improved. You can also join the &lt;a href=&quot;https://creativecommons.slack.com/messages/CCS9CF2JE/details/&quot;&gt;#cc-usability&lt;/a&gt; channel on &lt;a href=&quot;https://wiki.creativecommons.org/wiki/Slack#How_to_join_Slack&quot;&gt;CC Slack&lt;/a&gt; to keep up with new releases.&lt;/p&gt;
&lt;p&gt;All of our code, including the code behind CC Search, is open source (&lt;a href=&quot;https://github.com/creativecommons/cccatalog-frontend/&quot;&gt;CC Search&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/cccatalog-api&quot;&gt;CC Catalog API&lt;/a&gt;, &lt;a href=&quot;https://github.com/creativecommons/cccatalog&quot;&gt;CC Catalog&lt;/a&gt;) and we &lt;a href=&quot;https://creativecommons.github.io/contributing-code/&quot;&gt;welcome community contribution&lt;/a&gt;. If you know how to code, we invite you to &lt;a href=&quot;https://creativecommons.github.io/&quot;&gt;join the growing CC developer community&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;thank-you&quot;&gt;Thank you&lt;/h3&gt;&lt;p&gt;CC Search is also made possible by a number of institutional and individual supporters and donors. Specifically, we would like to thank &lt;a href=&quot;https://www.arcadiafund.org.uk/about-peter-baldwin-lisbet-rausing/&quot;&gt;Arcadia&lt;/a&gt; – a charitable fund of Lisbet Rausing and Peter Baldwin, &lt;a href=&quot;https://www.mozilla.org/en-US/foundation/&quot;&gt;Mozilla&lt;/a&gt;, and the Brin Wojcicki Foundation for their support.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This post was originally posted &lt;a href=&quot;https://creativecommons.org/2019/04/30/cc-search-images/&quot;&gt;on the primary Creative Commons blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
